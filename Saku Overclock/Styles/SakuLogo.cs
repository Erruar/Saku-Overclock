//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           8.1.240821.1+077322fa26
//       
//       Command:
//           LottieGen -Language CSharp -Public -WinUIVersion 3.0 -InputFile SakuLogo.json
//       
//       Input file:
//           SakuLogo.json (10469 bytes created 15:07+03:00 Apr 13 2025)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    46 |
// |--------------------------+-------|
// | Expression animators     |     2 |
// | KeyFrame animators       |     6 |
// | Reference parameters     |     2 |
// | Expression operations    |     0 |
// |--------------------------+-------|
// | Animated brushes         |     - |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     2 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     1 |
// | CompositionSpriteShapes  |     3 |
// |--------------------------+-------|
// | Brushes                  |     2 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
using Microsoft.Graphics;
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Composition;
using System;
using System.Collections.Generic;
using System.Numerics;
using Windows.UI;

namespace AnimatedVisuals
{
    // Name:        saku-logo
    // Frame rate:  60 fps
    // Frame count: 224
    // Duration:    3733.3 mS
    sealed class SakuLogo
        : Microsoft.UI.Xaml.Controls.IAnimatedVisualSource
        , Microsoft.UI.Xaml.Controls.IAnimatedVisualSource2
    {
        // Animation duration: 3.733 seconds.
        internal const long c_durationTicks = 37333333;

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor)
        {
            object ignored = null;
            return TryCreateAnimatedVisual(compositor, out ignored);
        }

        public Microsoft.UI.Xaml.Controls.IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;

            var res = 
                new SakuLogo_AnimatedVisual(
                    compositor
                    );
                res.CreateAnimations();
                return res;
        }

        /// <summary>
        /// Gets the number of frames in the animation.
        /// </summary>
        public double FrameCount => 224d;

        /// <summary>
        /// Gets the frame rate of the animation.
        /// </summary>
        public double Framerate => 60d;

        /// <summary>
        /// Gets the duration of the animation.
        /// </summary>
        public TimeSpan Duration => TimeSpan.FromTicks(37333333);

        /// <summary>
        /// Converts a zero-based frame number to the corresponding progress value denoting the
        /// start of the frame.
        /// </summary>
        public double FrameToProgress(double frameNumber)
        {
            return frameNumber / 224d;
        }

        /// <summary>
        /// Returns a map from marker names to corresponding progress values.
        /// </summary>
        public IReadOnlyDictionary<string, double> Markers =>
            new Dictionary<string, double>
            {
            };

        /// <summary>
        /// Sets the color property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetColorProperty(string propertyName, Color value)
        {
        }

        /// <summary>
        /// Sets the scalar property with the given name, or does nothing if no such property
        /// exists.
        /// </summary>
        public void SetScalarProperty(string propertyName, double value)
        {
        }

        sealed class SakuLogo_AnimatedVisual
            : Microsoft.UI.Xaml.Controls.IAnimatedVisual
            , Microsoft.UI.Xaml.Controls.IAnimatedVisual2
        {
            const long c_durationTicks = 37333333;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            AnimationController _animationController_0;
            AnimationController _animationController_1;
            CompositionColorBrush _colorBrush_AlmostBlack_FF1D1D1B;
            CompositionContainerShape _containerShape;
            CompositionPath _path;
            CompositionPathGeometry _pathGeometry_0;
            CompositionPathGeometry _pathGeometry_1;
            CompositionPathGeometry _pathGeometry_2;
            ContainerVisual _root;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            StepEasingFunction _holdThenStepEasingFunction;

            void BindProperty(
                CompositionObject target,
                string animatedPropertyName,
                string expression,
                string referenceParameterName,
                CompositionObject referencedObject)
            {
                _reusableExpressionAnimation.ClearAllParameters();
                _reusableExpressionAnimation.Expression = expression;
                _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
                target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
            }

            ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, Vector2 initialValue, CompositionEasingFunction initialEasingFunction)
            {
                var result = _c.CreateVector2KeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                return result;
            }

            CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, Matrix3x2 transformMatrix, CompositionBrush fillBrush)
            {
                var result = _c.CreateSpriteShape(geometry);
                result.TransformMatrix = transformMatrix;
                result.FillBrush = fillBrush;
                return result;
            }

            AnimationController AnimationController_0()
            {
                if (_animationController_0 != null) { return _animationController_0; }
                var result = _animationController_0 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_0, "Progress", "_.Progress*0.9955556+0.004444445", "_", _root);
                return result;
            }

            // - - - Layer aggregator
            // - Transforms: Кривые Слой 3 Offset:<-196.338, -289.909>
            AnimationController AnimationController_1()
            {
                if (_animationController_1 != null) { return _animationController_1; }
                var result = _animationController_1 = _c.CreateAnimationController();
                result.Pause();
                BindProperty(_animationController_1, "Progress", "_.Progress", "_", _root);
                return result;
            }

            // - - - - Layer aggregator
            // - - Transforms: Кривые Слой 1 Offset:<-196.338, -289.909>
            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(132.328995F, -27.1720009F));
                    builder.AddCubicBezier(new Vector2(132.285004F, -25.2579994F), new Vector2(131.768005F, -23.7649994F), new Vector2(131.382004F, -22.8700008F));
                    builder.AddCubicBezier(new Vector2(68.4449997F, 58.4910011F), new Vector2(5.5170002F, 139.843994F), new Vector2(-57.4199982F, 221.205002F));
                    builder.AddCubicBezier(new Vector2(-58.1660004F, 221.863998F), new Vector2(-59.3240013F, 222.742004F), new Vector2(-60.9220009F, 223.417007F));
                    builder.AddCubicBezier(new Vector2(-65.0469971F, 225.164001F), new Vector2(-68.8830032F, 224.207001F), new Vector2(-70.0859985F, 223.848007F));
                    builder.AddCubicBezier(new Vector2(-76.4499969F, 221.934006F), new Vector2(-78.9339981F, 215.912003F), new Vector2(-79.25F, 215.104996F));
                    builder.AddCubicBezier(new Vector2(-79.6449966F, 214.007996F), new Vector2(-80.0749969F, 212.356995F), new Vector2(-80.0309982F, 210.347F));
                    builder.AddCubicBezier(new Vector2(-80.0049973F, 209.337997F), new Vector2(-79.8639984F, 208.451004F), new Vector2(-79.697998F, 207.714005F));
                    builder.AddCubicBezier(new Vector2(-59.2630005F, 148.621994F), new Vector2(-38.8279991F, 89.5299988F), new Vector2(-18.4020004F, 30.4379997F));
                    builder.AddLine(new Vector2(-122.612F, 30.2080002F));
                    builder.AddCubicBezier(new Vector2(-122.902F, 30.2000008F), new Vector2(-123.349998F, 30.1739998F), new Vector2(-123.875999F, 30.0690002F));
                    builder.AddCubicBezier(new Vector2(-128.300003F, 29.2180004F), new Vector2(-130.636002F, 24.9519997F), new Vector2(-130.934998F, 24.3899994F));
                    builder.AddCubicBezier(new Vector2(-132.216003F, 21.9669991F), new Vector2(-132.285004F, 19.7290001F), new Vector2(-132.302994F, 18.5879993F));
                    builder.AddCubicBezier(new Vector2(-132.302994F, 18.5879993F), new Vector2(-132.382004F, 14.6199999F), new Vector2(-130.397995F, 10.7139997F));
                    builder.AddCubicBezier(new Vector2(-126.431F, 2.89299989F), new Vector2(41.2509995F, -208.723007F), new Vector2(51.012001F, -221.037994F));
                    builder.AddCubicBezier(new Vector2(52.0299988F, -221.942993F), new Vector2(55.5680008F, -224.856003F), new Vector2(60.8520012F, -224.987F));
                    builder.AddCubicBezier(new Vector2(62.4239998F, -225.031006F), new Vector2(67.4700012F, -225.164001F), new Vector2(71.0690002F, -221.266998F));
                    builder.AddCubicBezier(new Vector2(75.3789978F, -216.606003F), new Vector2(73.8949966F, -210.214996F), new Vector2(73.7639999F, -209.671005F));
                    builder.AddCubicBezier(new Vector2(54.9259987F, -153.089005F), new Vector2(36.0979996F, -96.5159988F), new Vector2(17.2609997F, -39.9339981F));
                    builder.AddLine(new Vector2(120.884003F, -39.9339981F));
                    builder.AddCubicBezier(new Vector2(122.271004F, -39.7060013F), new Vector2(125.306999F, -38.9949989F), new Vector2(128.072006F, -36.5019989F));
                    builder.AddCubicBezier(new Vector2(129.748001F, -34.9830017F), new Vector2(130.714996F, -33.3590012F), new Vector2(131.259003F, -32.2360001F));
                    builder.AddCubicBezier(new Vector2(131.697998F, -31.2970009F), new Vector2(132.382004F, -29.507F), new Vector2(132.328995F, -27.1720009F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(132.328995F, -27.1720009F));
                    builder.AddCubicBezier(new Vector2(132.285004F, -25.2579994F), new Vector2(131.768005F, -23.7649994F), new Vector2(131.382004F, -22.8700008F));
                    builder.AddCubicBezier(new Vector2(68.4449997F, 58.4910011F), new Vector2(5.5170002F, 139.843994F), new Vector2(-57.4199982F, 221.205002F));
                    builder.AddCubicBezier(new Vector2(-58.1660004F, 221.863998F), new Vector2(-59.3240013F, 222.742004F), new Vector2(-60.9220009F, 223.417007F));
                    builder.AddCubicBezier(new Vector2(-65.0469971F, 225.164001F), new Vector2(-68.8830032F, 224.207001F), new Vector2(-70.0859985F, 223.848007F));
                    builder.AddCubicBezier(new Vector2(-76.4499969F, 221.934006F), new Vector2(-78.9339981F, 215.912003F), new Vector2(-79.25F, 215.104996F));
                    builder.AddCubicBezier(new Vector2(-79.6449966F, 214.007996F), new Vector2(-80.0749969F, 212.356995F), new Vector2(-80.0309982F, 210.347F));
                    builder.AddCubicBezier(new Vector2(-80.0049973F, 209.337997F), new Vector2(-79.8639984F, 208.451004F), new Vector2(-79.697998F, 207.714005F));
                    builder.AddCubicBezier(new Vector2(-59.2630005F, 148.621994F), new Vector2(-38.8279991F, 89.5299988F), new Vector2(-18.4020004F, 30.4379997F));
                    builder.AddLine(new Vector2(-122.612F, 30.2080002F));
                    builder.AddCubicBezier(new Vector2(-122.902F, 30.2000008F), new Vector2(-123.349998F, 30.1739998F), new Vector2(-123.875999F, 30.0690002F));
                    builder.AddCubicBezier(new Vector2(-128.300003F, 29.2180004F), new Vector2(-130.636002F, 24.9519997F), new Vector2(-130.934998F, 24.3899994F));
                    builder.AddCubicBezier(new Vector2(-132.216003F, 21.9669991F), new Vector2(-132.285004F, 19.7290001F), new Vector2(-132.302994F, 18.5879993F));
                    builder.AddCubicBezier(new Vector2(-132.302994F, 18.5879993F), new Vector2(-132.382004F, 14.6199999F), new Vector2(-130.397995F, 10.7139997F));
                    builder.AddCubicBezier(new Vector2(-126.431F, 2.89299989F), new Vector2(41.2509995F, -208.723007F), new Vector2(51.012001F, -221.037994F));
                    builder.AddCubicBezier(new Vector2(52.0299988F, -221.942993F), new Vector2(55.5680008F, -224.856003F), new Vector2(60.8520012F, -224.987F));
                    builder.AddCubicBezier(new Vector2(62.4239998F, -225.031006F), new Vector2(67.4700012F, -225.164001F), new Vector2(71.0690002F, -221.266998F));
                    builder.AddCubicBezier(new Vector2(75.3789978F, -216.606003F), new Vector2(73.8949966F, -210.214996F), new Vector2(73.7639999F, -209.671005F));
                    builder.AddCubicBezier(new Vector2(54.9259987F, -153.089005F), new Vector2(36.0979996F, -96.5159988F), new Vector2(17.2609997F, -39.9339981F));
                    builder.AddLine(new Vector2(120.884003F, -39.9339981F));
                    builder.AddCubicBezier(new Vector2(122.271004F, -39.7060013F), new Vector2(125.306999F, -38.9949989F), new Vector2(128.072006F, -36.5019989F));
                    builder.AddCubicBezier(new Vector2(129.748001F, -34.9830017F), new Vector2(130.714996F, -33.3590012F), new Vector2(131.259003F, -32.2360001F));
                    builder.AddCubicBezier(new Vector2(131.697998F, -31.2970009F), new Vector2(132.382004F, -29.507F), new Vector2(132.328995F, -27.1720009F));
                    builder.EndFigure(CanvasFigureLoop.Closed);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CompositionColorBrush ColorBrush_AlmostBlack_FF1D1D1B()
            {
                return (_colorBrush_AlmostBlack_FF1D1D1B == null)
                    ? _colorBrush_AlmostBlack_FF1D1D1B = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x1D, 0x1D, 0x1B))
                    : _colorBrush_AlmostBlack_FF1D1D1B;
            }

            // - - Layer aggregator
            // Transforms: Кривые Слой 1 Offset:<-196.338, -289.909>
            CompositionColorBrush ColorBrush_AlmostPlum_FFDCADFF()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xDC, 0xAD, 0xFF));
            }

            // Layer aggregator
            CompositionContainerShape ContainerShape()
            {
                if (_containerShape != null) { return _containerShape; }
                var result = _containerShape = _c.CreateContainerShape();
                var shapes = result.Shapes;
                // Transforms: Кривые Слой 1 Offset:<-196.338, -289.909>
                shapes.Add(SpriteShape_0());
                // Transforms: Кривые Слой 2 Offset:<-196.338, -289.909>
                shapes.Add(SpriteShape_1());
                // Transforms: Кривые Слой 3 Offset:<-196.338, -289.909>
                shapes.Add(SpriteShape_2());
                return result;
            }

            CompositionPath Path()
            {
                if (_path != null) { return _path; }
                var result = _path = new CompositionPath(Geometry_1());
                return result;
            }

            // - - Layer aggregator
            // Transforms: Кривые Слой 1 Offset:<-196.338, -289.909>
            CompositionPathGeometry PathGeometry_0()
            {
                if (_pathGeometry_0 != null) { return _pathGeometry_0; }
                var result = _pathGeometry_0 = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                return result;
            }

            // - - Layer aggregator
            // Transforms: Кривые Слой 2 Offset:<-196.338, -289.909>
            CompositionPathGeometry PathGeometry_1()
            {
                if (_pathGeometry_1 != null) { return _pathGeometry_1; }
                var result = _pathGeometry_1 = _c.CreatePathGeometry(Path());
                result.TrimOffset = -0.247222215F;
                return result;
            }

            // - - Layer aggregator
            // Transforms: Кривые Слой 3 Offset:<-196.338, -289.909>
            CompositionPathGeometry PathGeometry_2()
            {
                if (_pathGeometry_2 != null) { return _pathGeometry_2; }
                var result = _pathGeometry_2 = _c.CreatePathGeometry(Path());
                result.TrimEnd = 0.50999999F;
                result.TrimOffset = -0.747222245F;
                return result;
            }

            // - Layer aggregator
            // Контур 1
            CompositionSpriteShape SpriteShape_0()
            {
                // Offset:<1.0440063, 0.25500488>
                var geometry = PathGeometry_0();
                var result = CreateSpriteShape(geometry, new Matrix3x2(1F, 0F, 0F, 1F, 1.04400635F, 0.255004883F), ColorBrush_AlmostPlum_FFDCADFF());;
                return result;
            }

            // - Layer aggregator
            // Контур 1
            CompositionSpriteShape SpriteShape_1()
            {
                // Offset:<1.0440063, 0.25500488>
                var result = CreateSpriteShape(PathGeometry_1(), new Matrix3x2(1F, 0F, 0F, 1F, 1.04400635F, 0.255004883F));;
                result.StrokeBrush = ColorBrush_AlmostBlack_FF1D1D1B();
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 26F;
                return result;
            }

            // - Layer aggregator
            // Контур 1
            CompositionSpriteShape SpriteShape_2()
            {
                // Offset:<1.0440063, 0.25500488>
                var result = CreateSpriteShape(PathGeometry_2(), new Matrix3x2(1F, 0F, 0F, 1F, 1.04400635F, 0.255004883F));;
                result.StrokeBrush = ColorBrush_AlmostBlack_FF1D1D1B();
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeMiterLimit = 2F;
                result.StrokeThickness = 26F;
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                if (_root != null) { return _root; }
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0F);
                // Layer aggregator
                result.Children.InsertAtTop(ShapeVisual_0());
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return (_cubicBezierEasingFunction_0 == null)
                    ? _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F))
                    : _cubicBezierEasingFunction_0;
            }

            // - - - Layer aggregator
            // - Transforms: Кривые Слой 2 Offset:<-196.338, -289.909>
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_0p52()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 177.21.
                result.InsertKeyFrame(0.791111112F, 0.519999981F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - Transforms: Кривые Слой 1 Offset:<-196.338, -289.909>
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0_to_1()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0F, HoldThenStepEasingFunction());
                // Frame 196.12.
                result.InsertKeyFrame(0.875555575F, 1F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - Transforms: Кривые Слой 1 Offset:<-196.338, -289.909>
            // TrimOffset
            ScalarKeyFrameAnimation TrimOffsetScalarAnimation_m0p247_to_m0p725()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, -0.247222215F, HoldThenStepEasingFunction());
                // Frame 7.96.
                result.InsertKeyFrame(0.0355555564F, -0.269444436F, CubicBezierEasingFunction_0());
                // Frame 21.9.
                result.InsertKeyFrame(0.0977777764F, -0.302777767F, CubicBezierEasingFunction_0());
                // Frame 42.81.
                result.InsertKeyFrame(0.191111118F, -0.355555564F, CubicBezierEasingFunction_0());
                // Frame 58.74.
                result.InsertKeyFrame(0.26222223F, -0.400000006F, CubicBezierEasingFunction_0());
                // Frame 74.67.
                result.InsertKeyFrame(0.333333343F, -0.458333343F, CubicBezierEasingFunction_0());
                // Frame 86.61.
                result.InsertKeyFrame(0.386666656F, -0.48888889F, CubicBezierEasingFunction_0());
                // Frame 88.6.
                result.InsertKeyFrame(0.395555556F, -0.49444443F, CubicBezierEasingFunction_0());
                // Frame 96.57.
                result.InsertKeyFrame(0.431111097F, -0.51111114F, CubicBezierEasingFunction_0());
                // Frame 105.53.
                result.InsertKeyFrame(0.471111119F, -0.547222197F, CubicBezierEasingFunction_0());
                // Frame 118.47.
                result.InsertKeyFrame(0.528888881F, -0.552777767F, CubicBezierEasingFunction_0());
                // Frame 136.39.
                result.InsertKeyFrame(0.608888865F, -0.602777779F, CubicBezierEasingFunction_0());
                // Frame 149.33.
                result.InsertKeyFrame(0.666666687F, -0.628769457F, CubicBezierEasingFunction_0());
                // Frame 164.27.
                result.InsertKeyFrame(0.733333349F, -0.666111112F, CubicBezierEasingFunction_0());
                // Frame 168.25.
                result.InsertKeyFrame(0.75111109F, -0.677777767F, CubicBezierEasingFunction_0());
                // Frame 171.24.
                result.InsertKeyFrame(0.76444447F, -0.686111093F, CubicBezierEasingFunction_0());
                // Frame 172.23.
                result.InsertKeyFrame(0.768888891F, -0.694444418F, CubicBezierEasingFunction_0());
                // Frame 186.17.
                result.InsertKeyFrame(0.831111133F, -0.725000024F, CubicBezierEasingFunction_0());
                return result;
            }

            // - - - Layer aggregator
            // - Transforms: Кривые Слой 3 Offset:<-196.338, -289.909>
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p497_to_0()
            {
                // Frame 0.
                var result = CreateScalarKeyFrameAnimation(0F, 0.49713999F, CubicBezierEasingFunction_0());
                // Frame 177.
                result.InsertKeyFrame(0.790178597F, 0F, CubicBezierEasingFunction_0());
                return result;
            }

            // Layer aggregator
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(1136F, 583F);
                result.Shapes.Add(ContainerShape());
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                if (_holdThenStepEasingFunction != null) { return _holdThenStepEasingFunction; }
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // - Layer aggregator
            // Offset
            Vector2KeyFrameAnimation OffsetVector2Animation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(549F, 663.5F), HoldThenStepEasingFunction());
                // Frame 62.72.
                result.InsertKeyFrame(0.280000001F, new Vector2(549F, 267.5F), CubicBezierEasingFunction_0());
                // Frame 99.56.
                result.InsertKeyFrame(0.444444448F, new Vector2(559.677979F, 118.372002F), CubicBezierEasingFunction_0());
                // Frame 149.33.
                result.InsertKeyFrame(0.666666687F, new Vector2(647F, -85.5F), CubicBezierEasingFunction_0());
                // Frame 193.14.
                result.InsertKeyFrame(0.862222195F, new Vector2(568F, 291.5F), CubicBezierEasingFunction_0());
                return result;
            }

            // - Layer aggregator
            // Scale
            Vector2KeyFrameAnimation ScaleVector2Animation()
            {
                // Frame 0.
                var result = CreateVector2KeyFrameAnimation(0F, new Vector2(1.98000002F, 1.98000002F), HoldThenStepEasingFunction());
                // Frame 62.72.
                result.InsertKeyFrame(0.280000001F, new Vector2(4F, 4F), CubicBezierEasingFunction_0());
                // Frame 74.67.
                result.InsertKeyFrame(0.333333343F, new Vector2(3.01526999F, 3.01526999F), CubicBezierEasingFunction_0());
                // Frame 85.62.
                result.InsertKeyFrame(0.382222235F, new Vector2(2.76309991F, 2.76309991F), CubicBezierEasingFunction_0());
                // Frame 99.56.
                result.InsertKeyFrame(0.444444448F, new Vector2(3.03511F, 3.03511F), CubicBezierEasingFunction_0());
                // Frame 115.48.
                result.InsertKeyFrame(0.515555561F, new Vector2(4.01955986F, 4.01955986F), CubicBezierEasingFunction_0());
                // Frame 193.14.
                result.InsertKeyFrame(0.862222195F, new Vector2(1F, 1F), CubicBezierEasingFunction_0());
                // Frame 208.07.
                result.InsertKeyFrame(0.928888917F, new Vector2(1.08000004F, 1.08000004F), CubicBezierEasingFunction_0());
                // Frame 222.01.
                result.InsertKeyFrame(0.9911111F, new Vector2(1F, 1F), CubicBezierEasingFunction_0());
                return result;
            }

            internal SakuLogo_AnimatedVisual(
                Compositor compositor
                )
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            public Visual RootVisual => _root;
            public TimeSpan Duration => TimeSpan.FromTicks(c_durationTicks);
            public Vector2 Size => new Vector2(1136F, 583F);
            void IDisposable.Dispose() => _root?.Dispose();

            public void CreateAnimations()
            {
                _containerShape.StartAnimation("Scale", ScaleVector2Animation(), AnimationController_0());
                _containerShape.StartAnimation("Offset", OffsetVector2Animation(), AnimationController_0());
                _pathGeometry_0.StartAnimation("TrimEnd", TrimEndScalarAnimation_0_to_1(), AnimationController_0());
                _pathGeometry_0.StartAnimation("TrimOffset", TrimOffsetScalarAnimation_m0p247_to_m0p725(), AnimationController_0());
                _pathGeometry_1.StartAnimation("TrimEnd", TrimEndScalarAnimation_0_to_0p52(), AnimationController_0());
                _pathGeometry_2.StartAnimation("TrimStart", TrimStartScalarAnimation_0p497_to_0(), AnimationController_1());
            }

            public void DestroyAnimations()
            {
                _containerShape.StopAnimation("Scale");
                _containerShape.StopAnimation("Offset");
                _pathGeometry_0.StopAnimation("TrimEnd");
                _pathGeometry_0.StopAnimation("TrimOffset");
                _pathGeometry_1.StopAnimation("TrimEnd");
                _pathGeometry_2.StopAnimation("TrimStart");
            }

        }
    }
}
