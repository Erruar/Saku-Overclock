#pragma checksum "C:\Users\Sakura\source\repos\Saku Overclock\Saku Overclock\Views\ShellPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "1641C88AF194487D2B81A0DEA76A65919505A7CEF3480421326FA73D4D7DB55E"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Saku_Overclock.Views
{
    partial class ShellPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_NavigationView_IsBackEnabled(global::Microsoft.UI.Xaml.Controls.NavigationView obj, global::System.Boolean value)
            {
                obj.IsBackEnabled = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_NavigationView_SelectedItem(global::Microsoft.UI.Xaml.Controls.NavigationView obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.SelectedItem = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_NavigationView_Header(global::Microsoft.UI.Xaml.Controls.NavigationView obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Header = value;
            }
            public static void Set_Saku_Overclock_Behaviors_NavigationViewHeaderBehavior_DefaultHeader(global::Saku_Overclock.Behaviors.NavigationViewHeaderBehavior obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.DefaultHeader = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(global::Microsoft.UI.Xaml.Controls.Primitives.Selector obj, global::System.Int32 value)
            {
                obj.SelectedIndex = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ShellPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IShellPage_Bindings
        {
            private global::Saku_Overclock.Views.ShellPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.NavigationView obj4;
            private global::Microsoft.UI.Xaml.Controls.ComboBox obj26;
            private global::Saku_Overclock.Behaviors.NavigationViewHeaderBehavior obj38;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj4IsBackEnabledDisabled = false;
            private static bool isobj4SelectedItemDisabled = false;
            private static bool isobj4HeaderDisabled = false;
            private static bool isobj26ItemsSourceDisabled = false;
            private static bool isobj26SelectedIndexDisabled = false;
            private static bool isobj38DefaultHeaderDisabled = false;

            private ShellPage_obj1_BindingsTracking bindingsTracking;

            public ShellPage_obj1_Bindings()
            {
                this.bindingsTracking = new ShellPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 38 && columnNumber == 5)
                {
                    isobj4IsBackEnabledDisabled = true;
                }
                else if (lineNumber == 39 && columnNumber == 5)
                {
                    isobj4SelectedItemDisabled = true;
                }
                else if (lineNumber == 43 && columnNumber == 5)
                {
                    isobj4HeaderDisabled = true;
                }
                else if (lineNumber == 221 && columnNumber == 46)
                {
                    isobj26ItemsSourceDisabled = true;
                }
                else if (lineNumber == 222 && columnNumber == 49)
                {
                    isobj26SelectedIndexDisabled = true;
                }
                else if (lineNumber == 89 && columnNumber == 13)
                {
                    isobj38DefaultHeaderDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 4: // Views\ShellPage.xaml line 32
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NavigationView>(target);
                        break;
                    case 26: // Views\ShellPage.xaml line 219
                        this.obj26 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_26(this.obj26);
                        break;
                    case 38: // Views\ShellPage.xaml line 88
                        this.obj38 = global::WinRT.CastExtensions.As<global::Saku_Overclock.Behaviors.NavigationViewHeaderBehavior>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IShellPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::Saku_Overclock.Views.ShellPage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Saku_Overclock.Views.ShellPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::Saku_Overclock.ViewModels.ShellViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsBackEnabled(obj.IsBackEnabled, phase);
                        this.Update_ViewModel_Selected(obj.Selected, phase);
                        this.Update_ViewModel_Items(obj.Items, phase);
                        this.Update_ViewModel_SelectedIndex(obj.SelectedIndex, phase);
                    }
                }
            }
            private void Update_ViewModel_IsBackEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ShellPage.xaml line 32
                    if (!isobj4IsBackEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NavigationView_IsBackEnabled(this.obj4, obj);
                    }
                }
            }
            private void Update_ViewModel_Selected(global::System.Object obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Selected_Cast_Selected_To_ContentControl((global::Microsoft.UI.Xaml.Controls.ContentControl)obj, phase);
                    }
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ShellPage.xaml line 32
                    if (!isobj4SelectedItemDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NavigationView_SelectedItem(this.obj4, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Selected_Cast_Selected_To_ContentControl(global::Microsoft.UI.Xaml.Controls.ContentControl obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Selected_Cast_Selected_To_ContentControl(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Selected_Cast_Selected_To_ContentControl_Content(obj.Content, phase);
                    }
                }
            }
            private void Update_ViewModel_Selected_Cast_Selected_To_ContentControl_Content(global::System.Object obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ShellPage.xaml line 32
                    if (!isobj4HeaderDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_NavigationView_Header(this.obj4, obj, null);
                    }
                    // Views\ShellPage.xaml line 88
                    if (!isobj38DefaultHeaderDisabled)
                    {
                        XamlBindingSetters.Set_Saku_Overclock_Behaviors_NavigationViewHeaderBehavior_DefaultHeader(this.obj38, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Items(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Controls.ComboBoxItem> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Items(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ShellPage.xaml line 219
                    if (!isobj26ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj26, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SelectedIndex(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ShellPage.xaml line 219
                    if (!isobj26SelectedIndexDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_Selector_SelectedIndex(this.obj26, obj);
                    }
                }
            }
            private void UpdateTwoWay_26_SelectedIndex()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.SelectedIndex = this.obj26.SelectedIndex;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ShellPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<ShellPage_obj1_Bindings> weakRefToBindingObj; 

                public ShellPage_obj1_BindingsTracking(ShellPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ShellPage_obj1_Bindings>(obj);
                }

                public ShellPage_obj1_Bindings TryGetBindingObject()
                {
                    ShellPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_Selected_Cast_Selected_To_ContentControl(null);
                    UpdateChildListeners_ViewModel_Items(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ShellPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::Saku_Overclock.ViewModels.ShellViewModel obj = sender as global::Saku_Overclock.ViewModels.ShellViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_IsBackEnabled(obj.IsBackEnabled, DATA_CHANGED);
                                bindings.Update_ViewModel_Selected(obj.Selected, DATA_CHANGED);
                                bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                bindings.Update_ViewModel_SelectedIndex(obj.SelectedIndex, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsBackEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsBackEnabled(obj.IsBackEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Selected":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Selected(obj.Selected, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Items":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Items(obj.Items, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SelectedIndex":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SelectedIndex(obj.SelectedIndex, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Saku_Overclock.ViewModels.ShellViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::Saku_Overclock.ViewModels.ShellViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void DependencyPropertyChanged_ViewModel_Selected_Cast_Selected_To_ContentControl_Content(global::Microsoft.UI.Xaml.DependencyObject sender, global::Microsoft.UI.Xaml.DependencyProperty prop)
                {
                    ShellPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::Microsoft.UI.Xaml.Controls.ContentControl obj = sender as global::Microsoft.UI.Xaml.Controls.ContentControl;
                        if (obj != null)
                        {
                            bindings.Update_ViewModel_Selected_Cast_Selected_To_ContentControl_Content(obj.Content, DATA_CHANGED);
                        }
                    }
                }
                private global::Microsoft.UI.Xaml.Controls.ContentControl cache_ViewModel_Selected_Cast_Selected_To_ContentControl = null;
                private long tokenDPC_ViewModel_Selected_Cast_Selected_To_ContentControl_Content = 0;
                public void UpdateChildListeners_ViewModel_Selected_Cast_Selected_To_ContentControl(global::Microsoft.UI.Xaml.Controls.ContentControl obj)
                {
                    if (obj != cache_ViewModel_Selected_Cast_Selected_To_ContentControl)
                    {
                        if (cache_ViewModel_Selected_Cast_Selected_To_ContentControl != null)
                        {
                            cache_ViewModel_Selected_Cast_Selected_To_ContentControl.UnregisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ContentControl.ContentProperty, tokenDPC_ViewModel_Selected_Cast_Selected_To_ContentControl_Content);
                            cache_ViewModel_Selected_Cast_Selected_To_ContentControl = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Selected_Cast_Selected_To_ContentControl = obj;
                            tokenDPC_ViewModel_Selected_Cast_Selected_To_ContentControl_Content = obj.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.ContentControl.ContentProperty, DependencyPropertyChanged_ViewModel_Selected_Cast_Selected_To_ContentControl_Content);
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Items(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ShellPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Controls.ComboBoxItem> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Controls.ComboBoxItem>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Items(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ShellPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Controls.ComboBoxItem> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Controls.ComboBoxItem>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Controls.ComboBoxItem> cache_ViewModel_Items = null;
                public void UpdateChildListeners_ViewModel_Items(global::System.Collections.ObjectModel.ObservableCollection<global::Microsoft.UI.Xaml.Controls.ComboBoxItem> obj)
                {
                    if (obj != cache_ViewModel_Items)
                    {
                        if (cache_ViewModel_Items != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Items).PropertyChanged -= PropertyChanged_ViewModel_Items;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Items).CollectionChanged -= CollectionChanged_ViewModel_Items;
                            cache_ViewModel_Items = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Items = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Items;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Items;
                        }
                    }
                }
                public void RegisterTwoWayListener_26(global::Microsoft.UI.Xaml.Controls.ComboBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.Primitives.Selector.SelectedIndexProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_26_SelectedIndex();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 1: // Views\ShellPage.xaml line 1
                {
                    global::Microsoft.UI.Xaml.Controls.Page element1 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Page>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Page)element1).Loaded += this.OnLoaded;
                }
                break;
            case 2: // Views\ShellPage.xaml line 13
                {
                    this.SharedShadow = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.ThemeShadow>(target);
                }
                break;
            case 3: // Views\ShellPage.xaml line 16
                {
                    this.KeyboardHandler = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                }
                break;
            case 4: // Views\ShellPage.xaml line 32
                {
                    this.NavigationViewControl = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.NavigationView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.NavigationView)this.NavigationViewControl).PaneOpened += this.NavigationViewControl_PaneOpened;
                    ((global::Microsoft.UI.Xaml.Controls.NavigationView)this.NavigationViewControl).PaneClosed += this.NavigationViewControl_PaneClosed;
                    ((global::Microsoft.UI.Xaml.Controls.NavigationView)this.NavigationViewControl).DisplayModeChanged += this.NavigationViewControl_DisplayModeChanged;
                }
                break;
            case 5: // Views\ShellPage.xaml line 107
                {
                    this.AppTitleBar = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 6: // Views\ShellPage.xaml line 272
                {
                    this.NotificationLostFocusBackground = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Grid)this.NotificationLostFocusBackground).PointerPressed += this.NotificationContainerBackground_PointerPressed;
                }
                break;
            case 7: // Views\ShellPage.xaml line 284
                {
                    this.NotificationPanel = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 8: // Views\ShellPage.xaml line 345
                {
                    this.NotificationPanelClearAllGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 9: // Views\ShellPage.xaml line 355
                {
                    this.NotificationPanelClearAllBtn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.NotificationPanelClearAllBtn).Click += this.ClearAllNotification;
                }
                break;
            case 10: // Views\ShellPage.xaml line 298
                {
                    this.NotificationPanelScrollViewer = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ScrollViewer>(target);
                }
                break;
            case 11: // Views\ShellPage.xaml line 303
                {
                    this.NoNotificationIndicator = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                }
                break;
            case 12: // Views\ShellPage.xaml line 333
                {
                    this.NotificationContainer = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                }
                break;
            case 13: // Views\ShellPage.xaml line 109
                {
                    this.LeftPaddingColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 14: // Views\ShellPage.xaml line 110
                {
                    this.IconColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 15: // Views\ShellPage.xaml line 111
                {
                    this.LeftDragColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 16: // Views\ShellPage.xaml line 112
                {
                    this.SearchColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 17: // Views\ShellPage.xaml line 113
                {
                    this.RightDragColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 18: // Views\ShellPage.xaml line 114
                {
                    this.RingerNotif = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 19: // Views\ShellPage.xaml line 115
                {
                    this.RightRDragColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 20: // Views\ShellPage.xaml line 116
                {
                    this.RightPaddingColumn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ColumnDefinition>(target);
                }
                break;
            case 21: // Views\ShellPage.xaml line 118
                {
                    this.TitleIcon = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Grid)this.TitleIcon).PointerEntered += this.TitleIcon_PointerEntered;
                    ((global::Microsoft.UI.Xaml.Controls.Grid)this.TitleIcon).PointerExited += this.TitleIcon_PointerExited;
                }
                break;
            case 22: // Views\ShellPage.xaml line 214
                {
                    this.ProfileSetup = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 23: // Views\ShellPage.xaml line 246
                {
                    this.RingerNotifGrid = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 24: // Views\ShellPage.xaml line 254
                {
                    this.ToggleNotificationPanelBtn = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Primitives.ToggleButton)this.ToggleNotificationPanelBtn).Click += this.ToggleNotificationPanelBtn_Click;
                }
                break;
            case 25: // Views\ShellPage.xaml line 263
                {
                    this.NewNotificationCountBadge = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.InfoBadge>(target);
                }
                break;
            case 26: // Views\ShellPage.xaml line 219
                {
                    this.ProfileSetComboBox = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.ProfileSetComboBox).SelectionChanged += this.ProfileSetComboBox_SelectionChanged;
                }
                break;
            case 27: // Views\ShellPage.xaml line 238
                {
                    this.ProfileSetButton = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.ProfileSetButton).IsEnabledChanged += this.ProfileSetButton_IsEnabledChanged;
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.ProfileSetButton).Click += this.ProfileSetButton_Click;
                }
                break;
            case 28: // Views\ShellPage.xaml line 243
                {
                    this.ActivateText = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 29: // Views\ShellPage.xaml line 133
                {
                    this.Icon = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.Icon).Click += this.Icon_Click;
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.Icon).PointerEntered += this.TitleIcon_PointerEntered;
                }
                break;
            case 30: // Views\ShellPage.xaml line 148
                {
                    global::Microsoft.UI.Xaml.Controls.StackPanel element30 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                    ((global::Microsoft.UI.Xaml.Controls.StackPanel)element30).PointerEntered += this.TitleIcon_PointerEntered;
                }
                break;
            case 31: // Views\ShellPage.xaml line 153
                {
                    this.IconImg = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Image)this.IconImg).PointerEntered += this.TitleIcon_PointerEntered;
                }
                break;
            case 32: // Views\ShellPage.xaml line 164
                {
                    this.IconTitle = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                    ((global::Microsoft.UI.Xaml.Controls.StackPanel)this.IconTitle).PointerEntered += this.TitleIcon_PointerEntered;
                }
                break;
            case 33: // Views\ShellPage.xaml line 189
                {
                    this.PreviewBuildIndicator = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.StackPanel>(target);
                    ((global::Microsoft.UI.Xaml.Controls.StackPanel)this.PreviewBuildIndicator).PointerEntered += this.TitleIcon_PointerEntered;
                }
                break;
            case 34: // Views\ShellPage.xaml line 202
                {
                    this.VersionNumberIndicator = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TextBlock)this.VersionNumberIndicator).PointerEntered += this.TitleIcon_PointerEntered;
                }
                break;
            case 35: // Views\ShellPage.xaml line 173
                {
                    global::Microsoft.UI.Xaml.Controls.TextBlock element35 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TextBlock)element35).PointerEntered += this.TitleIcon_PointerEntered;
                }
                break;
            case 36: // Views\ShellPage.xaml line 180
                {
                    global::Microsoft.UI.Xaml.Controls.TextBlock element36 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TextBlock)element36).PointerEntered += this.TitleIcon_PointerEntered;
                }
                break;
            case 40: // Views\ShellPage.xaml line 103
                {
                    this.NavigationFrame = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Frame>(target);
                }
                break;
            case 41: // Views\ShellPage.xaml line 20
                {
                    this.ThemeOpacity = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target);
                }
                break;
            case 42: // Views\ShellPage.xaml line 29
                {
                    this.ThemeMaskOpacity = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 43: // Views\ShellPage.xaml line 24
                {
                    this.ThemeBackground = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Media.ImageBrush>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2310")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\ShellPage.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    ShellPage_obj1_Bindings bindings = new ShellPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

