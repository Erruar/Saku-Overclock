<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpVectors.Model</name>
    </assembly>
    <members>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimateMotionElement.Path">
            <summary>
            Gets or set the attribute specifying the motion path, expressed in the same format and interpreted the same 
            way as the "d" attribute on the "path" element. 
            </summary>
            <value>
            The effect of a motion path animation is to add a supplemental transformation matrix onto the CTM for the 
            referenced object which causes a translation along the x- and y-axes of the current user coordinate system 
            by the computed X and Y values computed over time.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimateMotionElement.KeyPoints">
            <summary>
            Gets or sets a value that takes a semicolon-separated list of floating point values between 0 and 1 and indicates 
            how far along the motion path the object shall move at the moment in time specified by corresponding "keyTimes" value. 
            </summary>
            <value>
            <para>
            Distance calculations use the user agent's distance along the path algorithm. Each progress value in the list 
            corresponds to a value in the "keyTimes" attribute list.
            </para>
            <para>
            If a list of "keyPoints" is specified, there must be exactly as many values in the "keyPoints" list 
            as in the "keyTimes" list.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimateMotionElement.Rotate">
            <summary>
            Gets or sets an attribute post-multiplies a supplemental transformation matrix onto the CTM of the target element 
            to apply a rotation transformation about the origin of the current user coordinate system. 
            </summary>
            <value>
            The rotation transformation is applied after the supplemental translation transformation that is computed 
            due to the "path" attribute.
            <list type="bullet">
            <item><term>auto</term>
            <description>Indicates that the object is rotated over time by the angle of the direction (i.e., 
            directional tangent vector) of the motion path.</description>
            </item>
            <item><term>auto-reverse</term>
            <description>Indicates that the object is rotated over time by the angle of the direction (i.e., 
            directional tangent vector) of the motion path plus 180 degrees.</description>
            </item>
            <item><term>number</term>
            <description>Indicates that the target element has a constant rotation transformation applied to it, 
            where the rotation angle is the specified number of degrees.</description>
            </item>
            </list>
            The default value is '0'.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimateMotionElement.Origin">
            <summary>
            The "origin" attribute is defined in the SMIL Animation specification. It has no effect in SVG.
            </summary>
            <value>
            The value is "default".
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimateTransformElement.Type">
            <summary>
            Gets or sets a value to indicates the type of transformation which is to have its values change over time. 
            </summary>
            <value>
            <para>
            The values are translate | scale | rotate | skewX | skewY.
            </para>
            <para>
            If the attribute is not specified, then the effect is as if a value of 'translate' were specified.
            </para>
            <para>
            The ‘from’, ‘by’ and ‘to’ attributes take a value expressed using the same syntax that is available for the given transformation type:
            </para>
            <list type="bullet">
            <item>
            <description>For a type='translate", each individual value is expressed as {tx} [,{ty}].</description>
            </item>
            <item>
            <description>For a type="scale", each individual value is expressed as {sx} [,{sy}].</description>
            </item>
            <item>
            <description>For a type="rotate", each individual value is expressed as {rotate-angle} [{cx} {cy}].</description>
            </item>
            <item>
            <description>For a type="skewX" and type="skewY", each individual value is expressed as {skew-angle}.</description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimationElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimationElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Animation"/>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAngle">
            <summary>
            Summary description for SvgAngle.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgAngle.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a SvgAngle value
            </summary>
            <param name="s">The string to parse for the angle value</param>
            <param name="defaultValue">The default value for the angle.</param>
            <param name="readOnly">Specifies if the value should be read-only</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgAngle.NewValueSpecifiedUnits(SharpVectors.Dom.Svg.SvgAngleType,System.Double)">
            <summary>
             Reset the value as a number with an associated unitType, thereby replacing the values 
             for all of the attributes on the object.
            </summary>
            <param name="unitType">The unitType for the angle value (e.g., SvgAngleTypeDEG).</param>
            <param name="valueInSpecifiedUnits">The angle value</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgAngle.ConvertToSpecifiedUnits(SharpVectors.Dom.Svg.SvgAngleType)">
            <summary>
             Preserve the same underlying stored value, but reset the stored unit identifier to the given 
             unitType. Object attributes unitType, valueAsSpecified and valueAsString might be modified 
             as a result of this method.
            </summary>
            <param name="unitType">The unitType to switch to (e.g., SvgAngleTypeDEG).</param>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAngle.UnitType">
            <summary>
            The type of the value as specified by one of the constants specified above
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAngle.Value">
            <summary>
             The angle value as a floating point value, in degrees. Setting this attribute will cause 
             valueInSpecifiedUnits and valueAsString to be updated automatically to reflect this setting.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised on an attempt to change the 
            value of a readonly attribute.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAngle.ValueInSpecifiedUnits">
            <summary>
             The angle value as a floating point value, in the units expressed by unitType. Setting this 
             attribute will cause value and valueAsString to be updated automatically to reflect this setting.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised on an attempt to change the 
            value of a readonly attribute.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAngle.ValueAsString">
            <summary>
             The angle value as a string value, in the units expressed by unitType. Setting this attribute 
             will cause value and valueInSpecifiedUnits to be updated automatically to reflect this setting.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised on an attempt to change the 
            value of a readonly attribute.</exception>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAnimatedBoolean">
            <summary>
            Summary description for SvgAnimatedNumber.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAnimatedEnumeration">
            <summary>
            Summary description for SvgAnimatedEnumeration.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAnimatedInteger">
            <summary>
            An implementation of the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedInteger"/> interface.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAnimatedLength">
            <summary>
            Used for attributes of basic type 'length' which can be animated. 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgAnimatedLength.#ctor(SharpVectors.Dom.Svg.SvgElement,System.String,SharpVectors.Dom.Svg.SvgLengthDirection,System.String)">
            <summary>
            Used for attributes of basic type 'length' which can be animated. 
            </summary>
            <param name="ownerElement">The elements that contains the length</param>
            <param name="direction">The direction of the length, 0=x-axis, 1=y-axis, 2=no special axis</param>
            <param name="defaultValue">String to parse for the value</param>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimatedLength.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimatedLength.AnimVal">
            <summary>
            If the given attribute or property is being animated, contains the current animated value of the 
            attribute or property, and both the object itself and its contents are readonly. If the given attribute 
            or property is not currently being animated, contains the same value as 'baseVal'. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAnimatedLengthList">
            <summary>
            Summary description for SvgAnimatedLengthList.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimatedLengthList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedLengthList"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedLengthList"/>.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimatedLengthList.Item(System.UInt32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAnimatedNumber">
            <summary>
            Summary description for SvgAnimatedNumber.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAnimatedNumberList">
            <summary>
            Summary description for SvgAnimatedNumberList.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimatedNumberList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedNumberList"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedNumberList"/>.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimatedNumberList.Item(System.UInt32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimatedNumberList.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAnimatedNumberList.AnimVal">
            <summary>
            If the given attribute or property is being animated, then this attribute contains the current animated
            value of the attribute or property, and both the object itself and its contents are readonly. If the given 
            attribute or property is not currently being animated, then this attribute contains the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAnimatedPreserveAspectRatio">
            <summary>
            Summary description for SvgAnimatedPreserveAspectRatio.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAnimatedRect">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAnimatedString">
            <summary>
            Summary description for SvgAnimatedString.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAnimatedTransformList">
            <summary>
            Used for the various attributes which specify a set of transformations, such as the transform 
            attribute which is available for many of Svg's elements, and which can be animated.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgColor">
            <summary>
            Summary description for SvgColor.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgElement">
            <summary>
            Summary description for SvgElement.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgElement.ElementInstance">
            <summary>
            Whenever an SvgElementInstance is created for an SvgElement this property is set. The value of 
            this property is used by the renderer to dispatch events. SvgElements that are &lt;use&gt;d exist in a 
            conceptual "instance tree" and the target of events for those elements is the conceptual instance 
            node represented by the SvgElementInstance.
            </summary>
            <seealso href="https://www.w3.org/TR/SVG/struct.html#UseElement"/>
            <seealso href="https://www.w3.org/TR/SVG/struct.html#InterfaceSVGElementInstance"/>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFontFamily">
            <summary>
            This provides information on the OpenType and Web fonts to the <see cref="T:SharpVectors.Dom.Svg.SvgDocument"/>.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgLengthDirection">
            <summary>
            Defines the direction of a SvgLength
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgLengthSource">
            <summary>
            Defines the origin type of the SvgLength value
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgLength.#ctor(System.String,System.String,SharpVectors.Dom.Svg.SvgElement,SharpVectors.Dom.Svg.SvgLengthDirection)">
            <summary>
            Creates a SvgLength value
            </summary>
            <param name="baseVal">String to be parsed into a length</param>
            <param name="ownerElement">The associated element</param>
            <param name="direction">Direction of the length, used for percentages</param>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgLength.UnitType">
            <summary>
            The type of the value as specified by one of the constants specified above. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgLength.Value">
            <summary>
            The value as an floating point value, in user units. Setting this attribute will cause 
            valueInSpecifiedUnits and valueAsString to be updated automatically to reflect this setting. 
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"> <c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised on an attempt to change 
            the value of a readonly attribute.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgLength.ValueInSpecifiedUnits">
            <summary>
            The value as an floating point value, in the units expressed by unitType. Setting this 
            attribute will cause value and valueAsString to be updated automatically to reflect this setting.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"> <c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised on an attempt to change 
            the value of a readonly attribute.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgLength.ValueAsString">
            <summary>
            The value as a string value, in the units expressed by unitType. Setting this attribute will 
            cause value and valueInSpecifiedUnits to be updated automatically to reflect this setting.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised on an attempt to change the 
            value of a readonly attribute.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgLength.NewValueSpecifiedUnits(SharpVectors.Dom.Svg.SvgLengthType,System.Double)">
            <summary>
            Reset the value as a number with an associated unitType, thereby replacing the values for 
            all of the attributes on the object.
            </summary>
            <param name="unitType">The unitType for the value (e.g., MM). </param>
            <param name="valueInSpecifiedUnits">The new value</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgLength.ConvertToSpecifiedUnits(SharpVectors.Dom.Svg.SvgLengthType)">
            <summary>
            Preserve the same underlying stored value, but reset the stored unit identifier to the given unitType. 
            Object attributes unitType, valueAsSpecified and valueAsString might be modified as a result of this 
            method. For example, if the original value were "0.5cm" and the method was invoked to convert to 
            millimeters, then the unitType would be changed to MM, valueAsSpecified would be changed to the 
            numeric value 5 and valueAsString would be changed to "5mm". 
            </summary>
            <param name="unitType">The unitType to switch to (e.g., MM).</param>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgLengthList">
            <summary>
            This interface defines a list of SvgLength objects
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgList`1">
            <summary>
            Base class for all SVG*List-derived classes.
            Note we're using <see cref="T:System.Collections.Generic.List`1"/> (as opposed to deriving from) to hide unneeded <see cref="T:System.Collections.Generic.List`1"/> methods
            Note that a CLR uint is equivalent to an IDL ulong, so uint is used for all index values
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgList`1.#ctor">
            <summary>
            SvgList constructor
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgList`1.NumberOfItems">
            <summary>
            NumberOfItems
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgList`1.Clear">
            <summary>
            Clear
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgList`1.Initialize(`0)">
            <summary>
            Initialize
            </summary>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgList`1.GetItem(System.UInt32)">
            <summary>
            GetItem
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgList`1.InsertItemBefore(`0,System.UInt32)">
            <summary>
            InsertItemBefore
            </summary>
            <param name="newItem"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgList`1.ReplaceItem(`0,System.UInt32)">
            <summary>
            ReplaceItem
            </summary>
            <param name="newItem"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgList`1.RemoveItem(System.UInt32)">
            <summary>
            RemoveItem
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgList`1.AppendItem(`0)">
            <summary>
            AppendItem
            </summary>
            <param name="newItem"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgList`1.RemoveItem(`0)">
            <summary>
            RemoveItem - used to remove an item by value as opposed to by position
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgMatrix">
            <summary>
            <para>
            Many of SVG's graphics operations utilize 2x3 matrices of the form:
                [a c e]
                [b d f]
            </para>
            <para>
            which, when expanded into a 3x3 matrix for the purposes of matrix arithmetic, become:
                [a c e]
                [b d f]
                [0 0 1]
            </para>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgNumberList">
            <summary>
            Summary description for SvgNumberList.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPoint">
            <summary>
            Many of the SVG DOM interfaces refer to objects of class SvgPoint.
            An SvgPoint is an (x,y) coordinate pair. When used in matrix 
            operations, an SvgPoint is treated as a vector of the form:	
                [x]
                [y]
                [1]
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPointList">
            <summary>
            This class defines a list of SvgPoint objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgRect">
            <summary>
            Rectangles are defined as consisting of a (x,y) coordinate pair identifying a minimum X value, 
            a minimum Y value, and a width and height, which are usually constrained to be non-negative. 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.op_Equality(SharpVectors.Dom.Svg.SvgRect,SharpVectors.Dom.Svg.SvgRect)">
            <summary>
            This tests whether two <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structures have equal 
            location and size.
            </summary>
            <param name="left">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure that is to the left of the 
            equality operator. 
            </param>
            <param name="right">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure that is to the right of the 
            equality operator. 
            </param>
            <returns>
            This operator returns true if the two specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structures have equal 
            <see cref="P:SharpVectors.Dom.Svg.SvgRect.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRect.Y"/>, 
            <see cref="P:SharpVectors.Dom.Svg.SvgRect.Width"/>, and <see cref="P:SharpVectors.Dom.Svg.SvgRect.Height"/>
            properties.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.op_Inequality(SharpVectors.Dom.Svg.SvgRect,SharpVectors.Dom.Svg.SvgRect)">
            <summary>
            This tests whether two <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structures differ in 
            location or size.</summary>
            <param name="left">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure that is to the left of the 
            inequality operator. 
            </param>
            <param name="right">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure that is to the right of the 
            inequality operator. 
            </param>
            <returns>
            This operator returns true if any of the <see cref="P:SharpVectors.Dom.Svg.SvgRect.X"/>, 
            <see cref="P:SharpVectors.Dom.Svg.SvgRect.Y"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRect.Width"/>, or 
            <see cref="P:SharpVectors.Dom.Svg.SvgRect.Height"/> properties of the two 
            <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structures are unequal; otherwise false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Equals(System.Object)">
            <summary>
            This tests whether an object is a <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> with the 
            same location and size of this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to test. 
            </param>
            <returns>
            This returns <see langword="true"/> if the specified object is a 
            <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> and its <see cref="P:SharpVectors.Dom.Svg.SvgRect.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRect.Y"/>, 
            <see cref="P:SharpVectors.Dom.Svg.SvgRect.Width"/>, and <see cref="P:SharpVectors.Dom.Svg.SvgRect.Height"/> properties are equal 
            to the corresponding properties of this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/>; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Equals(SharpVectors.Dom.Svg.SvgRect)">
            <summary>
            This tests whether the specified <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> is with 
            the same location and size of this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/>.
            </summary>
            <param name="other">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> to test. 
            </param>
            <returns>
            This returns <see langword="true"/> if specified <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> 
            has its <see cref="P:SharpVectors.Dom.Svg.SvgRect.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRect.Y"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRect.Width"/>, and 
            <see cref="P:SharpVectors.Dom.Svg.SvgRect.Height"/> properties are equal to the corresponding 
            properties of this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/>; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Equals(SharpVectors.Dom.Svg.ISvgRect)">
            <summary>
            This tests whether the specified <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> is with 
            the same location and size of this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/>.
            </summary>
            <param name="other">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> to test. 
            </param>
            <returns>
            This returns <see langword="true"/> if specified <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> 
            has its <see cref="P:SharpVectors.Dom.Svg.SvgRect.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRect.Y"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRect.Width"/>, and 
            <see cref="P:SharpVectors.Dom.Svg.SvgRect.Height"/> properties are equal to the corresponding 
            properties of this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/>; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Contains(System.Double,System.Double)">
            <overloads>
            This determines if the specified point or rectangle is contained 
            within this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure.
            </overloads>
            <summary>
            This determines if the specified point is contained within this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure.
            </summary>
            <param name="x">The x-coordinate of the point to test. </param>
            <param name="y">The y-coordinate of the point to test. </param>
            <returns>
            This method returns true if the point defined by x and y is 
            contained within this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure; otherwise 
            false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Contains(SharpVectors.Dom.Svg.SvgPoint)">
            <summary>
            This determines if the specified point is contained within this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure.
            </summary>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPoint"/> to test. </param>
            <returns>
            This method returns true if the point represented by the pt 
            parameter is contained within this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> 
            structure; otherwise false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Contains(SharpVectors.Dom.Svg.SvgRect)">
            <summary>
            This determines if the rectangular region represented by rect is 
            entirely contained within this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure.
            </summary>
            <param name="rect">The <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> to test. </param>
            <returns>
            This method returns true if the rectangular region represented by 
            rect is entirely contained within the rectangular region represented 
            by this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/>; otherwise false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure. 
            For information about the use of hash codes, see Object.GetHashCode.
            </summary>
            <returns>The hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Inflate(System.Double,System.Double)">
            <overloads>
            Inflates this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure by the specified 
            amount.
            </overloads>
            <summary>
            Inflates this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure by the specified 
            amount.
            </summary>
            <param name="x">The amount to inflate this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure horizontally. </param>
            <param name="y">The amount to inflate this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure vertically. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Intersection(SharpVectors.Dom.Svg.SvgRect)">
            <summary>
            This replaces this <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure with the 
            intersection of itself and the specified <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> 
            structure.
            </summary>
            <param name="rect">The rectangle to intersect. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Intersects(SharpVectors.Dom.Svg.SvgRect)">
            <summary>
            This determines if this rectangle intersects with rect.
            </summary>
            <param name="rect">The rectangle to test. </param>
            <returns>
            This method returns <see langword="true"/> if there is any 
            intersection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Offset(System.Double,System.Double)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="y">The amount to offset the location vertically. </param>
            <param name="x">The amount to offset the location horizontally. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Inflate(SharpVectors.Dom.Svg.SvgRect,System.Single,System.Single)">
            <summary>
            Creates and returns an inflated copy of the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure. The copy is inflated by the 
            specified amount. The original rectangle remains unmodified.
            </summary>
            <param name="rect">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> to be copied. This rectangle is not 
            modified. 
            </param>
            <param name="x">
            The amount to inflate the copy of the rectangle horizontally. 
            </param>
            <param name="y">
            The amount to inflate the copy of the rectangle vertically. 
            </param>
            <returns>The inflated <see cref="T:SharpVectors.Dom.Svg.SvgRect"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Intersection(SharpVectors.Dom.Svg.SvgRect,SharpVectors.Dom.Svg.SvgRect)">
            <summary>
            Returns a <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure that represents the 
            intersection of two rectangles. If there is no intersection, and 
            empty <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> is returned.
            </summary>
            <param name="a">A rectangle to intersect. </param>
            <param name="b">A rectangle to intersect. </param>
            <returns>
            A third <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure the size of which 
            represents the overlapped area of the two specified rectangles.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRect.Union(SharpVectors.Dom.Svg.SvgRect,SharpVectors.Dom.Svg.SvgRect)">
            <summary>
            Creates the smallest possible third rectangle that can contain both 
            of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union. </param>
            <param name="b">A rectangle to union. </param>
            <returns>
            A third <see cref="T:SharpVectors.Dom.Svg.SvgRect"/> structure that contains both of 
            the two rectangles that form the union.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgStringList">
            <summary>
            This interface defines a list of String objects
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTests">
            <summary>
            A class to encapsulate all SvgTest functionality. Used by SVG elements as a helper class
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTransform">
            <summary>
            Summary description for SvgTransform.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTransformList">
            <summary>
            Summary description for SvgTransformList.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgViewSpec">
            <summary>
            
            TODO:  This class does not yet support custom views
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgClipPathElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgClipPathElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Clipping"/>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMaskElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMaskElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Masking"/>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgDefsElement">
            <summary>
            The SvgDefsElement interface corresponds to the 'defs' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgDefsElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgDefsElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Containment"/>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgDescElement">
            <summary>
            The SvgDescElement interface corresponds to the 'desc' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgDescElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgDocument">
            <summary>
            The root object in the document object hierarchy of an Svg document.
            </summary>
            <remarks>
            <para>
            When an 'svg' element is embedded inline as a component of a document from another namespace, 
            such as when an 'svg' element is embedded inline within an XHTML document
            [<see href="http://www.w3.org/TR/SVG/refs.html#ref-XHTML">XHTML</see>], then an 
            <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> object will not exist; instead, the root object in the 
            document object hierarchy will be a Document object of a different type, such as an HTMLDocument object.
            </para>
            <para>
            However, an <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> object will indeed exist when the root
            element of the XML document hierarchy is an 'svg' element, such as when viewing a stand-alone SVG 
            file (i.e., a file with MIME type "image/svg+xml"). In this case, the <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> 
            object will be the root object of the document object model hierarchy.
            </para>
            <para>
            In the case where an SVG document is embedded by reference, such as when an XHTML document has an 'object' 
            element whose href attribute references an SVG document (i.e., a document whose MIME type is
            "image/svg+xml" and whose root element is thus an 'svg' element), there will exist two distinct DOM hierarchies. 
            The first DOM hierarchy will be for the referencing document (e.g., an XHTML document). 
            The second DOM hierarchy will be for the referenced SVG document. In this
            second DOM hierarchy, the root object of the document object model
            hierarchy is an <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> object.
            </para>
            <para>
            The <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> interface contains a similar list of attributes and
            methods to the HTMLDocument interface described in the
            <see href="http://www.w3.org/TR/REC-DOM-Level-1/level-one-html.html">Document
            Object Model (HTML) Level 1</see> chapter of the
            [<see href="http://www.w3.org/TR/SVG/refs.html#ref-DOM1">DOM1</see>] specification.
            </para>
            </remarks>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgDocument.XmlIdUrl">
            <summary>
            Namespace URI to map to the xml prefix
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgDocument._entitiesUris">
            <summary>
            Entities URIs corrections are cached here.
            Currently consists in mapping '_' to '' (nothing)
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgDocument._entitiesUrisLock">
            <summary>
            Semaphore to access _entitiesUris
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgDocument._rootType">
            <summary>
            Root where resources are embedded
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgDocument.ResolveNamespaceDelegate">
            <summary>
            Namespace resolution event delegate.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgDocument.ResolveUriDelegate">
            <summary>
            URI resolution event delegate
            </summary>
        </member>
        <member name="E:SharpVectors.Dom.Svg.SvgDocument.ResolveNamespace">
            <summary>
            Occurs when a namespace is being resolved.
            </summary>
        </member>
        <member name="E:SharpVectors.Dom.Svg.SvgDocument.ResolvingUri">
            <summary>
            Occurs when an URI is resolved (always).
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgDocument.Dpi">
            <summary>
            Get or sets the dots per inch at which the objects should be rendered.
            </summary>
            <value>The current dots per inch value.</value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.Load(System.String)">
            <overloads>
            Loads an XML document.Loads the specified XML data.
            <blockquote>
            <b>Note</b>   The Load method always preserves significant white
            space. The PreserveWhitespace property determines whether or not
            white space is preserved. The default is false, whites space is
            not preserved.
            </blockquote>
            </overloads>
            <summary>
            Loads the XML document from the specified URL.
            </summary>
            <param name="filename">
            URL for the file containing the XML document to load.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.Load(System.String,System.IO.Stream)">
            <summary>
            Loads the XML document from the specified stream but with the
            specified base URL
            </summary>
            <param name="baseUrl">
            Base URL for the stream from which the XML document is loaded.
            </param>
            <param name="stream">
            The stream containing the XML document to load.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.Load(System.IO.TextReader)">
            <summary>
            Loads the XML document from the specified
            <see cref="T:System.IO.TextReader">TextReader</see>.
            </summary>
            <param name="txtReader"></param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.Load(System.IO.Stream)">
            <summary>
            Loads the XML document from the specified stream.
            </summary>
            <param name="inStream">
            The stream containing the XML document to load.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.GetEntityUri(System.String)">
            <summary>
            Given a transformed resource name, find a possible existing resource.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.OnXmlResolverGettingEntity(System.Uri,System.String,System.Type)">
            <summary>
            Handles DynamicXmlUrlResolver GettingEntity event.
            </summary>
            <param name="absoluteUri">The absolute URI.</param>
            <param name="role">Currently not used.</param>
            <param name="ofObjectToReturn">The of object to return.</param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.GetEntityFromUri(System.String,System.Type)">
            <summary>
            Gets the URI direct.
            </summary>
            <param name="path">The path.</param>
            <param name="ofObjectToReturn">The of object to return.</param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.OnXmlResolverResolving(System.String)">
            <summary>
            Handles DynamicXmlResolver Resolve event.
            </summary>
            <param name="relativeUri">The relative URI.</param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.GetXmlParserContext">
            <summary>
            Gets/create an XML parser context, with predefined namespaces
            </summary>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.OnResolveXmlNamespaceManager(System.String)">
            <summary>
            Handles DynamicXmlNamespaceManager Resolve event.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.CreateValidatingXmlReader(System.String)">
            <summary>
            Creates the validating XML reader.
            </summary>
            <param name="uri">The URI.</param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.CreateValidatingXmlReader(System.IO.TextReader)">
            <summary>
            Creates the validating XML reader.
            </summary>
            <param name="textReader">The text reader.</param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.CreateValidatingXmlReader(System.String,System.IO.Stream)">
            <summary>
            Creates the validating XML reader.
            </summary>
            <param name="uri">The URI.</param>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgDocument.CreateValidatingXmlReader(System.Xml.XmlReader)">
            <summary>
            Creates the validating XML reader.
            </summary>
            <param name="xmlReader">The XML reader.</param>
            <returns></returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgDocument.Title">
            <summary>
            The title of the document which is the text content of the first child title 
            element of the 'svg' root element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgDocument.Referrer">
            <summary>
            Returns the URI of the page that linked to this page. The value is an empty 
            string if the user navigated to the page directly (not through a link, but, 
            for example, via a bookmark).
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgDocument.Domain">
            <summary>
            The domain name of the server that served the document, or a null string if the 
            server cannot be identified by a domain name.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgDocument.RootElement">
            <summary>
            The root 'svg' element in the document hierarchy
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgDocument.Window">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgGElement">
            <summary>
            This implements the <see cref="T:SharpVectors.Dom.Svg.ISvgGElement"/> interface, which corresponds to the 'g' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Containment"/>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgImageElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Image"/>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgStyleableElement">
            <summary>
            SvgStyleableElement is an extension to the Svg DOM to create a class for all elements that are styleable.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgStyleElement">
            <summary>
            The SvgStyleElement interface corresponds to the 'style' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgStyleElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgSvgElement">
            <summary>
            <para>
            A key interface definition is the <see cref="T:SharpVectors.Dom.Svg.ISvgSvgElement"/> interface, which is the interface that corresponds 
            to the 'svg' element. This interface contains various miscellaneous commonly-used utility methods, 
            such as matrix operations and the ability to control the time of redraw on visual rendering devices.
            </para>
            <para>
            <see cref="T:SharpVectors.Dom.Svg.ISvgSvgElement"/> extends ViewCSS and DocumentCSS to provide access to the 
            computed values of properties and the override style sheet as described in DOM2. 
            </para>
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Containment"/>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.X">
            <summary>
            Corresponds to attribute x on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.Y">
            <summary>
            Corresponds to attribute y on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.Width">
            <summary>
            Corresponds to attribute width on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.Height">
            <summary>
            Corresponds to attribute height on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.ContentScriptType">
            <summary>
            Corresponds to attribute contentScriptType on the given 'svg' element
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.ContentStyleType">
            <summary>
            Corresponds to attribute contentStyleType on the given 'svg' element.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.Viewport">
            <summary>
            The position and size of the viewport (implicit or explicit) that corresponds to this 'svg' element. When the user agent is actually rendering the content, then the position and size values represent the actual values when rendering. The position and size values are unitless values in the coordinate system of the parent element. If no parent element exists (i.e., 'svg' element represents the root of the document tree), if this SVG document is embedded as part of another document (e.g., via the HTML 'object' element), then the position and size are unitless values in the coordinate system of the parent document. (If the parent uses CSS or XSL layout, then unitless values represent pixel units for the current CSS or XSL viewport, as described in the CSS2 specification.) If the parent element does not have a coordinate system, then the user agent should provide reasonable default values for this attribute.
            The object itself and its contents are both readonly.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.PixelUnitToMillimeterX">
            <summary>
            Size of a pixel units (as defined by CSS2) along the x-axis of the viewport, which represents a unit somewhere in the range of 70dpi to 120dpi, and, on systems that support this, might actually match the characteristics of the target medium. On systems where it is impossible to know the size of a pixel, a suitable default pixel size is provided.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.PixelUnitToMillimeterY">
            <summary>
            Corresponding size of a pixel unit along the y-axis of the viewport.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.ScreenPixelToMillimeterX">
            <summary>
            User interface (UI) events in DOM Level 2 indicate the screen positions at which the given UI event occurred. When the user agent actually knows the physical size of a "screen unit", this attribute will express that information; otherwise, user agents will provide a suitable default value such as .28mm.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.ScreenPixelToMillimeterY">
            <summary>
            Corresponding size of a screen pixel along the y-axis of the viewport.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.UseCurrentView">
            <summary>
            The initial view (i.e., before magnification and panning) of the current innermost SVG 
            document fragment can be either the "standard" view (i.e., based on attributes on 
            the 'svg' element such as fitBoxToViewport) or to a "custom" view (i.e., a hyperlink 
            into a particular 'view' or other element - see Linking into SVG content: URI 
            fragments and SVG views). If the initial view is the "standard" view, then this 
            attribute is false. If the initial view is a "custom" view, then this attribute is 
            true.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised on an attempt to change the value of a readonly attribute.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.CurrentView">
            <summary>
            The definition of the initial view (i.e., before magnification and panning) of the current innermost SVG document fragment. The meaning depends on the situation:
            * If the initial view was a "standard" view, then:
             o the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly
             o the values for transform and viewTarget within currentView will be null
            * If the initial view was a link into a 'view' element, then:
             o the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will correspond to the corresponding attributes for the given 'view' element
             o the values for transform and viewTarget within currentView will be null
            * If the initial view was a link into another element (i.e., other than a 'view'), then:
             o the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly for the closest ancestor 'svg' element
             o the values for transform within currentView will be null
             o the viewTarget within currentView will represent the target of the link
            * If the initial view was a link into the SVG document fragment using an SVG view specification fragment identifier (i.e., #svgView(...)), then:
             o the values for viewBox, preserveAspectRatio, zoomAndPan, transform and viewTarget within currentView will correspond to the values from the SVG view specification fragment identifier
            The object itself and its contents are both readonly. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.CurrentScale">
            <summary>
            This attribute indicates the current scale factor relative to the initial view to take into account user magnification and panning operations, as described under Magnification and panning. DOM attributes currentScale and currentTranslate are equivalent to the 2x3 matrix [a b c d e f] = [currentScale 0 0 currentScale currentTranslate.x currentTranslate.y]. If "magnification" is enabled (i.e., zoomAndPan="magnify"), then the effect is as if an extra transformation were placed at the outermost level on the SVG document fragment (i.e., outside the outermost 'svg' element).
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised on an attempt to change the value of a readonly attribute</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.ViewBoxTransform">
            <summary>
            This function is super useful, calculates out the transformation matrix 
            (i.e., scale and translate) of the viewport to user space.
            </summary>
            <returns>A Matrix which has the translate and scale portions set.</returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.CurrentTranslate">
            <summary>
            The corresponding translation factor that takes into account user "magnification".
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.SuspendRedraw(System.Int32)">
            <summary>
            Takes a time-out value which indicates that redraw shall not occur until: (a) the 
            corresponding unsuspendRedraw(suspend_handle_id) call has been made, (b) an 
            unsuspendRedrawAll() call has been made, or (c) its timer has timed out. In 
            environments that do not support interactivity (e.g., print media), then redraw shall 
            not be suspended. suspend_handle_id = suspendRedraw(max_wait_milliseconds) and 
            unsuspendRedraw(suspend_handle_id) must be packaged as balanced pairs. When you 
            want to suspend redraw actions as a collection of SVG DOM changes occur, then 
            precede the changes to the SVG DOM with a method call similar to 
            suspend_handle_id = suspendRedraw(max_wait_milliseconds) and follow the changes with 
            a method call similar to unsuspendRedraw(suspend_handle_id). Note that multiple 
            suspendRedraw calls can be used at once and that each such method call is treated
            independently of the other suspendRedraw method calls.
            </summary>
            <param name="maxWaitMilliseconds">The amount of time in milliseconds to hold off 
            before redrawing the device. Values greater than 60 seconds will be truncated 
            down to 60 seconds.</param>
            <returns>A number which acts as a unique identifier for the given suspendRedraw() call. This value must be passed as the parameter to the corresponding unsuspendRedraw() method call.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.UnsuspendRedraw(System.Int32)">
            <summary>
            Cancels a specified suspendRedraw() by providing a unique suspend_handle_id.
            </summary>
            <param name="suspendHandleId">A number which acts as a unique identifier for the desired suspendRedraw() call. The number supplied must be a value returned from a previous call to suspendRedraw()</param>
            <exception cref="T:SharpVectors.Dom.DomException">This method will raise a <see cref="T:SharpVectors.Dom.DomException"/> with value NOT_FOUND_ERR if an invalid value (i.e., no such suspend_handle_id is active) for suspend_handle_id is provided.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.UnsuspendRedrawAll">
            <summary>
            Cancels all currently active suspendRedraw() method calls. This method is most 
            useful 
            at the very end of a set of SVG DOM calls to ensure that all pending suspendRedraw() 
            method calls have been cancelled.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.ForceRedraw">
            <summary>
            In rendering environments supporting interactivity, forces the user agent to 
            immediately redraw all regions of the viewport that require updating.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.PauseAnimations">
            <summary>
            Suspends (i.e., pauses) all currently running animations that are defined within the 
            SVG document fragment corresponding to this 'svg' element, causing the animation clock 
            corresponding to this document fragment to stand still until it is unpaused.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.UnpauseAnimations">
            <summary>
            Unsuspends (i.e., unpauses) currently running animations that are defined within the 
            SVG document fragment, causing the animation clock to continue from the time at which 
            it was suspended.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.AnimationsPaused">
            <summary>
            Returns true if this SVG document fragment is in a paused state
            </summary>
            <returns>Boolean indicating whether this SVG document fragment is in a paused 
            state.</returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSvgElement.CurrentTime">
            <summary>
            The current time in seconds relative to the start time for the current SVG document 
            fragment.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.GetIntersectionList(SharpVectors.Dom.Svg.ISvgRect,SharpVectors.Dom.Svg.ISvgElement)">
            <summary>
            Returns the list of graphics elements whose rendered content intersects the supplied 
            rectangle, honoring the 'pointer-events' property value on each candidate graphics 
            element.
            </summary>
            <param name="rect">The test rectangle. The values are in the initial coordinate 
            system for the current 'svg' element.</param>
            <param name="referenceElement">If not null, then only return elements whose drawing 
            order has them below the given reference element.</param>
            <returns>A list of Elements whose content intersects the supplied rectangle.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.GetEnclosureList(SharpVectors.Dom.Svg.ISvgRect,SharpVectors.Dom.Svg.ISvgElement)">
            <summary>
            Returns the list of graphics elements whose rendered content is entirely contained 
            within the supplied rectangle, honoring the 'pointer-events' property value on each 
            candidate graphics element.
            </summary>
            <param name="rect">The test rectangle. The values are in the initial coordinate system 
            for the current 'svg' element.</param>
            <param name="referenceElement">If not null, then only return elements whose drawing 
            order has them below the given reference element.</param>
            <returns>A list of Elements whose content is enclosed by the supplied 
            rectangle.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.CheckIntersection(SharpVectors.Dom.Svg.ISvgElement,SharpVectors.Dom.Svg.ISvgRect)">
            <summary>
            Returns true if the rendered content of the given element intersects the supplied 
            rectangle, honoring the 'pointer-events' property value on each candidate graphics 
            element.
            </summary>
            <param name="element">The element on which to perform the given test.</param>
            <param name="rect">The test rectangle. The values are in the initial coordinate system 
            for the current 'svg' element.</param>
            <returns>True or false, depending on whether the given element intersects the supplied 
            rectangle.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.CheckEnclosure(SharpVectors.Dom.Svg.ISvgElement,SharpVectors.Dom.Svg.ISvgRect)">
            <summary>
            Returns true if the rendered content of the given element is entirely contained within 
            the supplied rectangle, honoring the 'pointer-events' property value on each candidate 
            graphics element.
            </summary>
            <param name="element">The element on which to perform the given test</param>
            <param name="rect">The test rectangle. The values are in the initial coordinate system 
            for the current 'svg' element.</param>
            <returns>True or false, depending on whether the given element is enclosed by the 
            supplied rectangle.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.DeselectAll">
            <summary>
            Unselects any selected objects, including any selections of text strings and type-in 
            bars.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.CreateSvgNumber">
            <summary>
            Creates an SVGNumber object outside of any document trees. The object is initialized 
            to a value of zero.
            </summary>
            <returns>An SVGNumber object.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.CreateSvgLength">
            <summary>
            Creates an SVGLength object outside of any document trees. The object is initialized 
            to the value of 0 user units.
            </summary>
            <returns>An SVGLength object.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.CreateSvgAngle">
            <summary>
            Creates an SVGAngle object outside of any document trees. The object is initialized to 
            the value 0 degrees (unitless).
            </summary>
            <returns>An SVGAngle object.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.CreateSvgPoint">
            <summary>
            Creates an SVGPoint object outside of any document trees. The object is initialized to 
            the point (0,0) in the user coordinate system.
            </summary>
            <returns>An SVGPoint object.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.CreateSvgMatrix">
            <summary>
            Creates an SVGMatrix object outside of any document trees. The object is initialized 
            to the identity matrix.
            </summary>
            <returns>An SVGMatrix object.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.CreateSvgRect">
            <summary>
            Creates an SVGRect object outside of any document trees. The object is initialized 
            such that all values are set to 0 user units.
            </summary>
            <returns>An SVGRect object.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.CreateSvgTransform">
            <summary>
            Creates an SVGTransform object outside of any document trees. The object is initialized
            to an identity matrix transform (SVG_TRANSFORM_MATRIX).
            </summary>
            <returns>An SVGTransform object.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.CreateSvgTransformFromMatrix(SharpVectors.Dom.Svg.ISvgMatrix)">
            <summary>
            Creates an SVGTransform object outside of any document trees. The object is 
            initialized to the given matrix transform (i.e., SVG_TRANSFORM_MATRIX).
            </summary>
            <param name="matrix">The transform matrix.</param>
            <returns>An SVGTransform object.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSvgElement.GetElementById(System.String)">
            <summary>
            Searches this SVG document fragment (i.e., the search is restricted to a subset of the 
            document tree) for an Element whose id is given by elementId. If an Element is found, 
            that Element is returned. If no such element exists, returns null. Behavior is not 
            defined if more than one element has this id.
            </summary>
            <param name="elementId">The unique id value for an element.</param>
            <returns>The matching element.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgSwitchElement">
            <summary>
            The SvgSwitchElement interface corresponds to the 'switch' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSwitchElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Containment"/>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSymbolElement.X">
            <summary>
            Corresponds to attribute x on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSymbolElement.Y">
            <summary>
            Corresponds to attribute y on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSymbolElement.Width">
            <summary>
            Corresponds to attribute width on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSymbolElement.Height">
            <summary>
            Corresponds to attribute height on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSymbolElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSymbolElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Containment"/>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTitleElement">
            <summary>
            The SvgTitleElement interface corresponds to the 'title' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTitleElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformableElement.GetCTM">
            <summary>
            For each given element, the accumulation of all transformations that have been defined 
            on the given element and all of its ancestors up to and including the element that 
            established the current viewport (usually, the 'svg' element which is the most 
            immediate ancestor to the given element) is called the current transformation matrix 
            or CTM. 
            </summary>
            <returns>A matrix representing the mapping of current user coordinates to viewport 
            coordinates.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgWindow.CreateEmptySvgDocument">
            <summary>
            Create and assign an empty SvgDocument to this window.  This is needed only in situations where 
            the library user needs to create an SVG DOM tree outside of the usual LoadSvgDocument mechanism.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgWindow.Resize(System.Int32,System.Int32)">
            <summary>
            This is expected to be called by the host
            </summary>
            <param name="innerWidth">The new width of the control</param>
            <param name="innerHeight">The new height of the control</param>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgResolveNamespaceEventArgs">
            <summary>
            Arguments when namespace is trying to be resolved
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgResolveNamespaceEventArgs.Prefix">
            <summary>
            Gets or sets the prefix (for example: 'rdf')
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgResolveNamespaceEventArgs.Uri">
            <summary>
            Gets or sets the URI (for example: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#').
            This value may have already been initialized, it's up to the application to check if it wants to override the resolution
            </summary>
            <value>The URI.</value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgResolveUriEventArgs">
            <summary>
            Arguments when URI is trying to be resolved while loading schema
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgResolveUriEventArgs.Uri">
            <summary>
            Gets or sets the URI (for example: 'http://www.w3.org/2000/svg').
            This value may have already been initialized, it's up to the application to check if it wants to override the resolution
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGradientElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgLinearGradientElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPatternElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPatternElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Containment"/>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPatternElement.ViewBoxTransform">
            <summary>
            This function is super useful, calculates out the transformation matrix 
            (i.e., scale and translate) of the viewport to user space.
            </summary>
            <returns>A Matrix which has the translate and scale portions set.</returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPatternElement.CurrentView">
            <summary>
            The definition of the initial view (i.e., before magnification and panning) of the current innermost SVG document fragment. The meaning depends on the situation:
            * If the initial view was a "standard" view, then:
             o the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly
             o the values for transform and viewTarget within currentView will be null
            * If the initial view was a link into a 'view' element, then:
             o the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will correspond to the corresponding attributes for the given 'view' element
             o the values for transform and viewTarget within currentView will be null
            * If the initial view was a link into another element (i.e., other than a 'view'), then:
             o the values for viewBox, preserveAspectRatio and zoomAndPan within currentView will match the values for the corresponding DOM attributes that are on SVGSVGElement directly for the closest ancestor 'svg' element
             o the values for transform within currentView will be null
             o the viewTarget within currentView will represent the target of the link
            * If the initial view was a link into the SVG document fragment using an SVG view specification fragment identifier (i.e., #svgView(...)), then:
             o the values for viewBox, preserveAspectRatio, zoomAndPan, transform and viewTarget within currentView will correspond to the values from the SVG view specification fragment identifier
            The object itself and its contents are both readonly. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgRadialGradientElement">
            <summary>
            The implementation of the <c>radialGradient</c> element or the <see cref="T:SharpVectors.Dom.Svg.ISvgRadialGradientElement"/> interface.
            </summary>
            <remarks>
            Radial Gradient fx/fy values should only be inherited from a referenced element if that element is explicitly 
            defining them, otherwise they should follow the cy special case behavior. Additionally, because xlink references 
            can inherit to an arbitrary level, we should walk up the tree looking for explicitly defined fx/fy values to 
            inherit before falling back to the cx/cy definitions.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRadialGradientElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgSolidColorElement">
            <summary>
            An SVG object represents an 'solidcolor' element in the DOM.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSolidColorElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSolidColorElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Containment"/>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgStopElement">
            <summary>
            Summary description for SvgStopElement.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgStopElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgComponentTransferFunctionElement">
            <summary>
            This <see langword="abstract"/> defines a base class used by the component transfer function interfaces. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgComponentTransferFunctionElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgComponentTransferFunctionElement.Type">
            <summary>
            Corresponds to attribute 'type' on the given element. 
            </summary>
            <value>
            <para>type = "identity | table | discrete | linear | gamma" </para>
            <para>Indicates the type of component transfer function. The type of function determines the applicability 
            of the other attributes.</para>
            An enumeration of the type <see cref="T:SharpVectors.Dom.Svg.SvgFilterTransferType"/>. The default value is 
            <see cref="F:SharpVectors.Dom.Svg.SvgFilterTransferType.Identity"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgComponentTransferFunctionElement.TableValues">
            <summary>
            Corresponds to attribute 'tableValues' on the given element. 
            </summary>
            <value>
            <para>tableValues = "(list of numbers)" </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgComponentTransferFunctionElement.Slope">
            <summary>
            When type="linear", the slope of the linear function.
            </summary>
            <value>
            <para>slope = "number"</para>
            The initial value for slope is <c>1</c>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgComponentTransferFunctionElement.Intercept">
            <summary>
            When type="linear", the intercept of the linear function.
            </summary>
            <value>
            <para>slope = "number"</para>
            The initial value for intercept is <c>0</c>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgComponentTransferFunctionElement.Amplitude">
            <summary>
            When type="gamma", the amplitude of the gamma function.
            </summary>
            <value>
            <para>amplitude = "number" </para>
            The initial value for amplitude is <c>1</c>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgComponentTransferFunctionElement.Exponent">
            <summary>
            When type="gamma", the exponent of the gamma function.
            </summary>
            <value>
            <para>exponent = "number" </para>
            The initial value for exponent is <c>1</c>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgComponentTransferFunctionElement.Offset">
            <summary>
            When type="gamma", the offset of the gamma function.
            </summary>
            <value>
            <para>offset = "number" </para>
            The initial value for offset is <c>0</c>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFEBlendElement">
            <summary>
            This filter blends two objects together using commonly used imaging software blending modes. 
            It performs a pixel-wise combination of two input images.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEBlendElement.Mode">
            <summary>
            One of the blend modes defined by 'Compositing and Blending Level 1' with the input in representing the source 
            <c>Cs</c> and the second input <c>in2</c> representing the backdrop <c>Cb</c>. The output of this filter 
            primitive <c>Cm</c> is the result of blending <c>Cs</c> with <c>Cb</c>.
            </summary>
            <value>
            <para>mode = "blend-mode" </para>
            An enumeration of the type <see cref="T:SharpVectors.Dom.Svg.SvgFilterBlendMode"/>. The default value is <see cref="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Normal"/>.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEBlendElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEBlendElement.In2">
            <summary>
            Corresponds to attribute <c>in2</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEColorMatrixElement.Type">
            <summary>
            </summary>
            <value>
            <para></para>
            An enumeration of the type <see cref="T:SharpVectors.Dom.Svg.SvgFilterColorMatrix"/>. 
            The default value is <see cref="F:SharpVectors.Dom.Svg.SvgFilterColorMatrix.Matrix"/>.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEColorMatrixElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEComponentTransferElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFECompositeElement.Operator">
            <summary>
            </summary>
            <value>
            <para></para>
            An enumeration of the type <see cref="T:SharpVectors.Dom.Svg.SvgFilterCompositeOperator"/>. 
            The default value is <see cref="F:SharpVectors.Dom.Svg.SvgFilterCompositeOperator.Over"/>.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFECompositeElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFECompositeElement.In2">
            <summary>
            Corresponds to attribute <c>in2</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement">
            <summary>
            This applies a matrix convolution filter effect. A convolution combines pixels in the input image 
            with neighboring pixels to produce a resulting image. A wide variety of imaging operations can be 
            achieved through convolutions, including blurring, edge detection, sharpening, embossing and beveling.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.EdgeMode">
            <summary>
            Determines how to extend the input image as necessary with color values so that the matrix operations 
            can be applied when the kernel is positioned at or near the edge of the input image.
            </summary>
            <value>
            <para>edgeMode = "duplicate | wrap | none"</para>
            An enumeration of the type <see cref="T:SharpVectors.Dom.Svg.SvgFilterEdgeMode"/>. The default value is <see cref="F:SharpVectors.Dom.Svg.SvgFilterEdgeMode.Duplicate"/>.
            </value>
            <remarks>
            <para>
            "duplicate" indicates that the input image is extended along each of its borders as necessary by duplicating 
            the color values at the given edge of the input image.
            </para>
            <para>
            "wrap" indicates that the input image is extended by taking the color values from the opposite edge of the image.
            </para>
            <para>
            "none" indicates that the input image is extended with pixel values of zero for R, G, B and A.
            </para>
            If attribute 'edgeMode' is not specified, then the effect is as if a value of duplicate were specified. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.Bias">
            <summary>
            
            </summary>
            <value>
            <para>bias = "number"</para>
            </value>
            <remarks>
            <para>
            After applying the 'kernelMatrix' to the input image to yield a number and applying the 'divisor', the 
            'bias' attribute is added to each component.
            </para>
            <para>
            One application of 'bias' is when it is desirable to have .5 gray value be the zero response of the filter. 
            The bias property shifts the range of the filter. This allows representation of values that would otherwise 
            be clamped to 0 or 1.
            </para>
            If 'bias' is not specified, then the effect is as if a value of 0 were specified.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.Divisor">
            <summary>
            
            </summary>
            <value>
            <para>divisor = number</para>
            </value>
            <remarks>
            <para>
            After applying the <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.KernelMatrix"/> to the input image to yield a number, that number is divided by 'divisor' 
            to yield the final destination color value. A divisor that is the sum of all the matrix values tends to have 
            an evening effect on the overall color intensity of the result. It is an error to specify a divisor of zero.
            </para>
            <para>
            The default value is the sum of all values in <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.KernelMatrix"/>, with the exception that if the sum is zero, 
            then the divisor is set to 1.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.KernelMatrix">
            <summary>
            
            </summary>
            <value>
            <para>kernelMatrix = "list of numbers"</para>
            </value>
            <remarks>
            The list of <c>number</c>s that make up the kernel matrix for the convolution. Values are separated by space 
            characters and/or a comma. The number of entries in the list must equal <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderX"/> times <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderY"/>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.KernelUnitLengthX">
            <summary>
            Corresponds to attribute 'kernelUnitLength' on the given 'feConvolveMatrix' element. 
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.KernelUnitLengthY">
            <summary>
            Corresponds to attribute 'kernelUnitLength' on the given 'feConvolveMatrix' element. 
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderX">
            <summary>
            Indicates the number of cells in each dimension for 'kernelMatrix'. 
            </summary>
            <value>
            <para>order = "number-optional-number"</para>
            <para>The values provided must be <c>integer</c>s greater than zero.</para>
            <para>The first number, <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderX"/>, indicates the number of columns in the matrix. </para>
            <para>
            The second number, <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderY"/>, indicates the number of rows in the matrix. 
            If <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderY"/>is not provided, it defaults to <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderX"/>.
            </para>
            </value>
            <remarks>
            <para>
            A typical value is order="3". It is recommended that only small values(e.g., 3) be used; 
            higher values may result in very high CPU overhead and usually do not produce results that 
            justify the impact on performance.
            </para>
            <para>
            If the attribute is not specified, the effect is as if a value of <c>3</c> were specified.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderY">
            <summary>
            Indicates the number of cells in each dimension for 'kernelMatrix'. 
            </summary>
            <value>
            <para>order = "number-optional-number"</para>
            <para>The values provided must be <c>integer</c>s greater than zero.</para>
            <para>The first number, <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderX"/>, indicates the number of columns in the matrix. </para>
            <para>
            The second number, <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderY"/>, indicates the number of rows in the matrix. 
            If <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderY"/>is not provided, it defaults to <see cref="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.OrderX"/>.
            </para>
            </value>
            <remarks>
            <para>
            A typical value is order="3". It is recommended that only small values(e.g., 3) be used; 
            higher values may result in very high CPU overhead and usually do not produce results that 
            justify the impact on performance.
            </para>
            <para>
            If the attribute is not specified, the effect is as if a value of <c>3</c> were specified.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.TargetX">
            <summary>
            Determines the positioning in X of the convolution matrix relative to a given target pixel in the input image. 
            </summary>
            <value>
            <para>targetX = "integer"</para>
            The leftmost column of the matrix is column number zero. The value must be such that: 
            <c><![CDATA[ 0 <= targetX < orderX. ]]></c>
            By default, the convolution matrix is centered in X over each pixel of the input image 
            (i.e., <c>targetX = floor ( orderX / 2 )</c>).
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.TargetY">
            <summary>
            Determines the positioning in Y of the convolution matrix relative to a given target pixel in the input image. 
            </summary>
            <value>
            <para>targetY = "integer"</para>
            The leftmost column of the matrix is column number zero. The value must be such that: 
            <c><![CDATA[ 0 <= targetY < orderY. ]]></c>
            By default, the convolution matrix is centered in Y over each pixel of the input image 
            (i.e., <c>targetY = floor ( orderY / 2 )</c>).
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEConvolveMatrixElement.PreserveAlpha">
            <summary>
            
            </summary>
            <value>
            <para>preserveAlpha = "false | true"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDiffuseLightingElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feDiffuseLighting</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDiffuseLightingElement.SurfaceScale">
            <summary>
            Corresponds to attribute 'surfaceScale' on the given 'feDiffuseLighting' element. 
            </summary>
            <value>
            <para>surfaceScale = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 1 were specified.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDiffuseLightingElement.DiffuseConstant">
            <summary>
            Corresponds to attribute 'diffuseConstant' on the given 'feDiffuseLighting' element. 
            </summary>
            <value>
            <para>diffuseConstant = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 1 were specified.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDiffuseLightingElement.KernelUnitLengthX">
            <summary>
            Corresponds to attribute 'kernelUnitLength' on the given 'feDiffuseLighting' element. 
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDiffuseLightingElement.KernelUnitLengthY">
            <summary>
            Corresponds to attribute 'kernelUnitLength' on the given 'feDiffuseLighting' element. 
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFEDisplacementMapElement">
            <summary>
            This filter primitive uses the pixels values from the image from 'in2' to spatially displace the image from 'in'. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDisplacementMapElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDisplacementMapElement.In2">
            <summary>
            Corresponds to attribute <c>in2</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDisplacementMapElement.Scale">
            <summary>
            Displacement scale factor. The amount is expressed in the coordinate system established by 
            attribute 'primitiveUnits' on the 'filter' element. 
            </summary>
            <value>
            <para>scale = "number"</para>
            <para>When the value of this attribute is <c>0</c>, this operation has no effect on the source image.</para>
            <para>If the attribute is not specified, then the effect is as if a value of <c>0</c> were specified.</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDisplacementMapElement.XChannelSelector">
            <summary>
            Indicates which channel from 'in2' to use to displace the pixels in 'in' along the x-axis. 
            </summary>
            <value>
            <para>xChannelSelector = "R | G | B | A"</para>
            An enumeration of the type <see cref="T:SharpVectors.Dom.Svg.SvgFilterChannelSelector"/>. The default value is <see cref="F:SharpVectors.Dom.Svg.SvgFilterChannelSelector.A"/>.
            </value>
            <remarks>
            If attribute 'xChannelSelector' is not specified, then the effect is as if a value of A were specified. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDisplacementMapElement.YChannelSelector">
            <summary>
            Indicates which channel from 'in2' to use to displace the pixels in 'in' along the y-axis. 
            </summary>
            <value>
            <para>yChannelSelector = "R | G | B | A"</para>
            An enumeration of the type <see cref="T:SharpVectors.Dom.Svg.SvgFilterChannelSelector"/>. The default value is <see cref="F:SharpVectors.Dom.Svg.SvgFilterChannelSelector.A"/>.
            </value>
            <remarks>
            If attribute 'yChannelSelector' is not specified, then the effect is as if a value of A were specified. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDistantLightElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDistantLightElement.Azimuth">
            <summary>
            Direction angle for the light source on the XY plane (clockwise), in degrees from the x axis.
            </summary>
            <value>
            Corresponds to attribute 'azimuth' on the given 'feDistantLight' element. 
            <para>azimuth = "number"</para>
            If the attribute is not specified, then the effect is as if a value of <c>0</c> were specified.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEDistantLightElement.Elevation">
            <summary>
            Direction angle for the light source from the XY plane towards the z axis, in degrees. 
            Note the positive Z-axis points towards the viewer of the content.
            </summary>
            <value>
            Corresponds to attribute 'elevation' on the given 'feDistantLight' element.
            <para>elevation = "number"</para>
            If the attribute is not specified, then the effect is as if a value of <c>0</c> were specified.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEFloodElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFEGaussianBlurElement">
            <summary>
            This filter primitive performs a Gaussian blur on the input image.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEGaussianBlurElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEGaussianBlurElement.StdDeviationX">
            <summary>
            
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            <para>
            The standard deviation for the blur operation. If two <c>number</c>s are provided, the first number represents 
            a standard deviation value along the x-axis of the coordinate system established by attribute 'primitiveUnits' 
            on the 'filter' element. The second value represents a standard deviation in Y. If one number is provided, 
            then that value is used for both X and Y.
            </para>
            <para>
            A negative value is an error(see Error processing). A value of zero disables the effect of the given filter 
            primitive(i.e., the result is the filter input image). 
            </para>
            <para>
            If 'stdDeviation' is 0 in only one of X or Y, then the effect is that the blur is only applied in the direction 
            that has a non-zero value.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEGaussianBlurElement.StdDeviationY">
            <summary>
            
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            <para>
            The standard deviation for the blur operation. If two <c>number</c>s are provided, the first number represents 
            a standard deviation value along the x-axis of the coordinate system established by attribute 'primitiveUnits' 
            on the 'filter' element. The second value represents a standard deviation in Y. If one number is provided, 
            then that value is used for both X and Y.
            </para>
            <para>
            A negative value is an error(see Error processing). A value of zero disables the effect of the given filter 
            primitive(i.e., the result is the filter input image). 
            </para>
            <para>
            If 'stdDeviation' is 0 in only one of X or Y, then the effect is that the blur is only applied in the direction 
            that has a non-zero value.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEMergeNodeElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEMergeNodeElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEMorphologyElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEMorphologyElement.Operator">
            <summary>
            A keyword indicating whether to erode (i.e., thin) or dilate (fatten) the source graphic. 
            </summary>
            <value>
            <para>operator = "erode | dilate"</para>
            An enumeration of the type <see cref="T:SharpVectors.Dom.Svg.SvgFilterMorphologyOperator"/>. 
            The default value is <see cref="F:SharpVectors.Dom.Svg.SvgFilterMorphologyOperator.Erode"/>.
            </value>
            <remarks>
            If attribute 'operator' is not specified, then the effect is as if a value of erode were specified. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEMorphologyElement.RadiusX">
            <summary>
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            <para>
            The radius (or radii) for the operation. If two <c>number</c>s are provided, the first number represents a x-radius 
            and the second value represents a y-radius. If one number is provided, then that value is used for both X and Y. 
            The values are in the coordinate system established by attribute 'primitiveUnits' on the 'filter' element.
            </para>
            <para>
            A negative value is an error(see Error processing). A value of zero disables the effect of the given filter 
            primitive(i.e., the result is a transparent black image).
            </para>
            <para>
            If the attribute is not specified, then the effect is as if a value of <c>0</c> were specified.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEMorphologyElement.RadiusY">
            <summary>
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            <para>
            The radius (or radii) for the operation. If two <c>number</c>s are provided, the first number represents a x-radius 
            and the second value represents a y-radius. If one number is provided, then that value is used for both X and Y. 
            The values are in the coordinate system established by attribute 'primitiveUnits' on the 'filter' element.
            </para>
            <para>
            A negative value is an error(see Error processing). A value of zero disables the effect of the given filter 
            primitive(i.e., the result is a transparent black image).
            </para>
            <para>
            If the attribute is not specified, then the effect is as if a value of <c>0</c> were specified.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEOffsetElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEOffsetElement.Dx">
            <summary>
            The amount to offset the input graphic along the x-axis. The offset amount is expressed in the 
            coordinate system established by attribute 'primitiveUnits' on the 'filter' element.
            </summary>
            <value>
            <para>dx = "number"</para>
            </value>
            If the attribute is not specified, then the effect is as if a value of <c>0</c> were specified.
            <remarks>
            Corresponds to attribute 'dx' on the given 'feOffset' element. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEOffsetElement.Dy">
            <summary>
            The amount to offset the input graphic along the y-axis. The offset amount is expressed in the 
            coordinate system established by attribute 'primitiveUnits' on the 'filter' element.
            </summary>
            <value>
            <para>dy = "number"</para>
            If the attribute is not specified, then the effect is as if a value of <c>0</c> were specified.
            </value>
            <remarks>
            Corresponds to attribute 'dy' on the given 'feOffset' element. 
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFEPointLightElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEPointLightElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEPointLightElement.X">
            <summary>
            X location for the light source in the coordinate system established by attribute 'primitiveUnits' on the 'filter' element.
            </summary>
            <value>
            <para>x = "number"</para>
            If the attribute is not specified, then the effect is as if a value of <c>0</c> were specified.
            </value>
            <remarks>
            Corresponds to attribute 'x' on the given 'fePointLight' element.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEPointLightElement.Y">
            <summary>
            Y location for the light source in the coordinate system established by attribute 'primitiveUnits' on the 'filter' element.
            </summary>
            <value>
            <para>y = "number"</para>
            If the attribute is not specified, then the effect is as if a value of <c>0</c> were specified.
            </value>
            <remarks>
            Corresponds to attribute 'y' on the given 'fePointLight' element.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFEPointLightElement.Z">
            <summary>
            Z location for the light source in the coordinate system established by attribute 'primitiveUnits' on the 'filter' element, 
            assuming that, in the initial coordinate system, the positive Z-axis comes out towards the person viewing the content 
            and assuming that one unit along the Z-axis equals one unit in X and Y.
            </summary>
            <value>
            <para>z = "number"</para>
            If the attribute is not specified, then the effect is as if a value of <c>0</c> were specified.
            </value>
            <remarks>
            Corresponds to attribute 'z' on the given 'fePointLight' element. 
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFESpecularLightingElement">
            <summary>
            This filter primitive lights a source graphic using the alpha channel as a bump map. The resulting image is an 
            RGBA image based on the light color. The lighting calculation follows the standard specular component of the 
            Phong lighting model. The resulting image depends on the light color, light position and surface geometry of 
            the input bump map. The result of the lighting calculation is added. The filter primitive assumes that the 
            viewer is at infinity in the z direction (i.e., the unit vector in the eye direction is (0,0,1) everywhere).
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpecularLightingElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            Corresponds to attribute 'in' on the given 'feSpecularLighting' element. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpecularLightingElement.SurfaceScale">
            <summary>
            
            </summary>
            <value>
            <para>surfaceScale = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 1 were specified.
            </value>
            <remarks>
            Corresponds to attribute 'surfaceScale' on the given 'feSpecularLighting' element. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpecularLightingElement.SpecularConstant">
            <summary>
            
            </summary>
            <value>
            <para>specularConstant = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 1 were specified.
            </value>
            <remarks>
            Corresponds to attribute 'specularConstant' on the given 'feSpecularLighting' element. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpecularLightingElement.SpecularExponent">
            <summary>
            
            </summary>
            <value>
            <para>specularExponent = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 1 were specified.
            </value>
            <remarks>
            Corresponds to attribute 'specularExponent' on the given 'feSpecularLighting' element. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpecularLightingElement.KernelUnitLengthX">
            <summary>
            
            Corresponds to attribute 'kernelUnitLength' on the given 'feSpecularLighting' element.
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            The first number is the <c>dx</c> value. The second number is the <c>dy</c> value. If the <c>dy</c> value is not specified, 
            it defaults to the same value as <c>dx</c>. Indicates the intended distance in current filter units (i.e., units as 
            determined by the value of attribute 'primitiveUnits') for dx and dy, respectively, in the surface normal calculation 
            formulas. By specifying value(s) for 'kernelUnitLength', the kernel becomes defined in a scalable, abstract coordinate 
            system. If 'kernelUnitLength' is not specified, the dx and dy values should represent very small deltas relative to a 
            given (x,y) position, which might be implemented in some cases as one pixel in the intermediate image offscreen bitmap, 
            which is a pixel-based coordinate system, and thus potentially not scalable. For some level of consistency across 
            display media and user agents, it is necessary that a value be provided for at least one of 'filterRes' and 
            'kernelUnitLength'. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpecularLightingElement.KernelUnitLengthY">
            <summary>
            
            Corresponds to attribute 'kernelUnitLength' on the given 'feSpecularLighting' element. 
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            The first number is the <c>dx</c> value. The second number is the <c>dy</c> value. If the <c>dy</c> value is not specified, 
            it defaults to the same value as <c>dx</c>. Indicates the intended distance in current filter units (i.e., units as 
            determined by the value of attribute 'primitiveUnits') for dx and dy, respectively, in the surface normal calculation 
            formulas. By specifying value(s) for 'kernelUnitLength', the kernel becomes defined in a scalable, abstract coordinate 
            system. If 'kernelUnitLength' is not specified, the dx and dy values should represent very small deltas relative to a 
            given (x,y) position, which might be implemented in some cases as one pixel in the intermediate image offscreen bitmap, 
            which is a pixel-based coordinate system, and thus potentially not scalable. For some level of consistency across 
            display media and user agents, it is necessary that a value be provided for at least one of 'filterRes' and 
            'kernelUnitLength'. 
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFESpotLightElement">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpotLightElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpotLightElement.X">
            <summary>
            X location for the light source in the coordinate system established by attribute 'primitiveUnits' on the 'filter' element.
            </summary>
            <value>
            <para>x = "number"</para>
            </value>
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            <remarks>
            Corresponds to attribute 'x' on the given 'feSpotLight' element. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpotLightElement.Y">
            <summary>
            Y location for the light source in the coordinate system established by attribute 'primitiveUnits' on the 'filter' element.
            </summary>
            <value>
            <para>y = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            </value>
            <remarks>
            Corresponds to attribute 'y' on the given 'feSpotLight' element.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpotLightElement.Z">
            <summary>
            Z location for the light source in the coordinate system established by attribute 'primitiveUnits' on the 'filter' element, 
            assuming that, in the initial coordinate system, the positive Z-axis comes out towards the person viewing the content and 
            assuming that one unit along the Z-axis equals one unit in X and Y.
            </summary>
            <value>
            <para>z = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            </value>
            <remarks>
            Corresponds to attribute 'z' on the given 'feSpotLight' element. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpotLightElement.PointsAtX">
            <summary>
            X location in the coordinate system established by attribute 'primitiveUnits' on the 'filter' element of the point 
            at which the light source is pointing.
            </summary>
            <value>
            <para>pointsAtX = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            </value>
            <remarks>
            Corresponds to attribute 'pointsAtX' on the given 'feSpotLight' element.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpotLightElement.PointsAtY">
            <summary>
            Y location in the coordinate system established by attribute 'primitiveUnits' on the 'filter' element of the point 
            at which the light source is pointing.
            </summary>
            <value>
            <para>pointsAtY = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            </value>
            <remarks>
            Corresponds to attribute 'pointsAtY' on the given 'feSpotLight' element. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpotLightElement.PointsAtZ">
            <summary>
            Z location in the coordinate system established by attribute 'primitiveUnits' on the 'filter' element of the point 
            at which the light source is pointing, assuming that, in the initial coordinate system, the positive Z-axis comes 
            out towards the person viewing the content and assuming that one unit along the Z-axis equals one unit in X and Y. 
            </summary>
            <value>
            <para>pointsAtZ = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            </value>
            <remarks>
            Corresponds to attribute 'pointsAtZ' on the given 'feSpotLight' element.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpotLightElement.SpecularExponent">
            <summary>
            Exponent value controlling the focus for the light source.
            </summary>
            <value>
            <para>specularExponent = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 1 were specified.
            </value>
            <remarks>
            Corresponds to attribute 'specularExponent' on the given 'feSpotLight' element. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFESpotLightElement.LimitingConeAngle">
            <summary>
            A limiting cone which restricts the region where the light is projected. No light is projected outside the cone. 
            'limitingConeAngle' represents the angle in degrees between the spot light axis (i.e. the axis between the light 
            source and the point to which it is pointing at) and the spot light cone. User agents should apply a smoothing 
            technique such as anti-aliasing at the boundary of the cone.
            </summary>
            <value>
            <para>limitingConeAngle = "number"</para>
            If no value is specified, then no limiting cone will be applied.
            </value>
            <remarks>
            Corresponds to attribute 'limitingConeAngle' on the given 'feSpotLight' element. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFETileElement.In1">
            <summary>
            Corresponds to attribute <c>in</c> on the given <c>feBlend</c> element. 
            </summary>
            <value>
            <para> in = "SourceGraphic | SourceAlpha | BackgroundImage | BackgroundAlpha | 
                        FillPaint | StrokePaint | filter-primitive-reference"</para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFETurbulenceElement">
            <summary>
            This filter primitive creates an image using the Perlin turbulence function. It allows the synthesis of 
            artificial textures like clouds or marble.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFETurbulenceElement.BaseFrequencyX">
            <summary>
            Corresponds to attribute 'baseFrequency' on the given 'feTurbulence' element. 
            Contains the X component of the 'baseFrequency' attribute.
            </summary>
            <value>
            <para>baseFrequency = "number-optional-number"</para>
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            </value>
            <remarks>
            The base frequency (frequencies) parameter(s) for the noise function. If two <c>number</c>s are provided, 
            the first number represents a base frequency in the X direction and the second value represents a base 
            frequency in the Y direction. If one number is provided, then that value is used for both X and Y.
            A negative value for base frequency is an error (see Error processing).
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFETurbulenceElement.BaseFrequencyY">
            <summary>
            Corresponds to attribute 'baseFrequency' on the given 'feTurbulence' element. 
            Contains the Y component of the (possibly computed automatically) 'baseFrequency' attribute. 
            </summary>
            <value>
            <para>baseFrequency = "number-optional-number"</para>
            If the attribute is not specified, then the effect is as if a value of 0 were specified.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFETurbulenceElement.NumOctaves">
            <summary>
            The numOctaves parameter for the noise function.
            </summary>
            <value>
            <para>numOctaves = "integer"</para>
            If the attribute is not specified, then the effect is as if a value of 1 were specified.
            </value>
            <remarks>
            Corresponds to attribute 'numOctaves' on the given 'feTurbulence' element.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFETurbulenceElement.Seed">
            <summary>
            The starting number for the pseudo random number generator.
            </summary>
            <value>
            <para>seed = "number"</para>
            If the attribute is not specified, then the effect is as if a value of 0 were specified. 
            When the seed number is handed over to the algorithm above it must first be truncated, i.e. 
            rounded to the closest integer value towards zero.
            </value>
            <remarks>
            Corresponds to attribute 'seed' on the given 'feTurbulence' element. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFETurbulenceElement.StitchTiles">
            <summary>
            Corresponds to attribute 'stitchTiles' on the given 'feTurbulence' element. 
            </summary>
            <value>
            <para>stitchTiles = "stitch | noStitch"</para>
            An enumeration of the type <see cref="T:SharpVectors.Dom.Svg.SvgFilterStitchOption"/>. 
            The default value is <see cref="F:SharpVectors.Dom.Svg.SvgFilterStitchOption.NoStitch"/>.
            </value>
            <remarks>
            <para>
            If stitchTiles="noStitch", no attempt it made to achieve smooth transitions at the border of tiles which contain a 
            turbulence function. Sometimes the result will show clear discontinuities at the tile borders.
            If stitchTiles = "stitch", then the user agent will automatically adjust baseFrequency-x and baseFrequency-y values 
            such that the feTurbulence node's width and height (i.e., the width and height of the current subregion) contains 
            an integral number of the Perlin tile width and height for the first octave. The baseFrequency will be adjusted up 
            or down depending on which way has the smallest relative (not absolute) change as follows: Given the frequency, 
            calculate lowFreq=floor(width*frequency)/width and hiFreq=ceil(width*frequency)/width. 
            If <c><![CDATA[frequency/lowFreq < hiFreq/frequency]]></c> then use lowFreq, else use hiFreq. 
            While generating turbulence values, generate lattice vectors as normal for Perlin Noise, except for those 
            lattice points that lie on the right or bottom edges of the active area (the size of the resulting tile). 
            In those cases, copy the lattice vector from the opposite edge of the active area. 
            </para>
            <para>
            If attribute 'stitchTiles' is not specified, then the effect is as if a value of noStitch were specified. 
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFETurbulenceElement.Type">
            <summary>
            Indicates whether the filter primitive should perform a noise or turbulence function. 
            </summary>
            <value>
            <para>type = "fractalNoise | turbulence"</para>
            An enumeration of the type <see cref="T:SharpVectors.Dom.Svg.SvgFilterTurbulenceType"/>. 
            The default value is <see cref="F:SharpVectors.Dom.Svg.SvgFilterTurbulenceType.Turbulence"/>.
            </value>
            <remarks>
            Corresponds to attribute 'type' on the given 'feTurbulence' element.
            If attribute 'type' is not specified, then the effect is as if a value of turbulence were specified.
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterElement">
            <summary>
            An implementation of the <see cref="T:SharpVectors.Dom.Svg.ISvgFilterElement"/> interface, which corresponds to the <c>'filter'</c> element.
            </summary>
            <remarks>
            <para>A filter effect is a graphical operation that is applied to an element as it is drawn into the document. 
            It is an image-based effect, in that it takes zero or more images as input, a number of parameters specific to the 
            effect, and then produces an image as output. The output image is either rendered into the document instead of the 
            original element, used as an input image to another filter effect, or provided as a CSS image value.
            </para>
            <para>Filter Region</para>
            <para>A filter element can define a filter region on the canvas to which a given filter effect 
            applies and can provide a resolution for any intermediate continuous tone images used to process 
            any raster-based filter primitives.</para>
            <para>The filter element has the following attributes which work together to define the filter region:</para>
            <para><see cref="P:SharpVectors.Dom.Svg.SvgFilterElement.FilterUnits"/>, <see cref="P:SharpVectors.Dom.Svg.SvgFilterElement.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgFilterElement.Y"/>, <see cref="P:SharpVectors.Dom.Svg.SvgFilterElement.Width"/>, <see cref="P:SharpVectors.Dom.Svg.SvgFilterElement.Height"/></para>
            </remarks>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterElement.SourceGraphic">
            <summary>
            This keyword represents the graphics elements that were the original input into the filter element. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterElement.SourceAlpha">
            <summary>
            This keyword represents the graphics elements that were the original input into the filter element. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterElement.BackgroundImage">
            <summary>
            This keyword represents the back drop defined by the current isolation group behind the filter region 
            at the time that the filter element was invoked.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterElement.BackgroundAlpha">
            <summary>
            Same as BackgroundImage except only the alpha channel is used. See SourceAlpha and the isolation property.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterElement.FillPaint">
            <summary>
            This keyword represents the value of the fill property on the target element for the filter effect. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterElement.StrokePaint">
            <summary>
            This keyword represents the value of the stroke property on the target element for the filter effect.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterElement.FilterUnits">
            <summary>
            Gets a value definining the coordinate system for attributes <see cref="P:SharpVectors.Dom.Svg.SvgFilterElement.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgFilterElement.Y"/>, 
            <see cref="P:SharpVectors.Dom.Svg.SvgFilterElement.Width"/>, <see cref="P:SharpVectors.Dom.Svg.SvgFilterElement.Height"/>.
            </summary>
            <value>
            <para>filterUnits = "userSpaceOnUse | objectBoundingBox"</para>
            <para>If the value is equal to <see cref="F:SharpVectors.Dom.Svg.SvgUnitType.UserSpaceOnUse"/>, x, y, width, height represent values 
            in the current user coordinate system in place at the time when the filter element is referenced (i.e., the 
            user coordinate system for the element referencing the filter element via a filter property).
            </para>
            <para>If the value is equal to <see cref="F:SharpVectors.Dom.Svg.SvgUnitType.ObjectBoundingBox"/>, then x, y, width, height represent 
            fractions or percentages of the bounding box on the referencing element (see object bounding box units).</para>
            <para>The initial value for filter-units is <see cref="F:SharpVectors.Dom.Svg.SvgUnitType.ObjectBoundingBox"/>.</para>
            </value>
            <remarks></remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterElement.PrimitiveUnits">
            <summary>
            Gets a value specifying the coordinate system for the various length values within the filter primitives 
            and for the attributes that define the filter primitive subregion.
            </summary>
            <value>
            <para>primitiveUnits = "userSpaceOnUse | objectBoundingBox" </para>
            <para>If the value is equal to <see cref="F:SharpVectors.Dom.Svg.SvgUnitType.UserSpaceOnUse"/>, any length values within the filter 
            definitions represent values in the current local coordinate system in place at the time when the filter element 
            is referenced (i.e., the user coordinate system for the element referencing the filter element via a filter property).
            </para>
            <para>If the value is equal to <see cref="F:SharpVectors.Dom.Svg.SvgUnitType.ObjectBoundingBox"/>, then any length values within the filter 
            definitions represent fractions or percentages of the bounding box on the referencing element (see object bounding 
            box units). Note that if only one number was specified in a <c>number-optional-number</c> value this number is expanded 
            out before the primitive-units computation takes place.
            </para>
            <para>The initial value for primitive-units is <see cref="F:SharpVectors.Dom.Svg.SvgUnitType.UserSpaceOnUse"/>.</para>
            </value>
            <remarks></remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterElement.X">
            <summary>
            
            </summary>
            <value>
            <para></para>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterElement.Y">
            <summary>
            
            </summary>
            <value>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterElement.Width">
            <summary>
            
            </summary>
            <value>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterElement.Height">
            <summary>
            
            </summary>
            <value>
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterElement.FilterResX">
            <summary>
            The contains the X component of attribute <c>'filterRes'</c>. 
            The <c>'filterRes'</c> indicates the width and height of the intermediate images in pixels of a filter primitive.
            </summary>
            <value>This value takes one or two values, the first one outlining the resolution in horizontal direction, 
            the second one in vertical direction. If only one value is specified, it is used for both directions.</value>
            <remarks>The <c>'filterRes'</c> attribute was removed from the <c>SVG 2</c> specification.</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterElement.FilterResY">
            <summary>
            The contains the X component of attribute <c>'filterRes'</c>. 
            The <c>'filterRes'</c> indicates the width and height of the intermediate images in pixels of a filter primitive.
            </summary>
            <value>This value takes one or two values, the first one outlining the resolution in horizontal direction, 
            the second one in vertical direction. If only one value is specified, it is used for both directions.</value>
            <remarks>The <c>'filterRes'</c> attribute was removed from the <c>SVG 2</c> specification.</remarks>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgFilterElement.SetFilterRes(System.UInt64,System.UInt64)">
            <summary>
            Sets the values for attribute <c>'filterRes'</c>.
            </summary>
            <param name="filterResX">The X component of attribute <c>'filterRes'</c>.</param>
            <param name="filterResY">The Y component of attribute <c>'filterRes'</c>. </param>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterPrimitiveStandardAttributes">
            <summary>
            This is <see langword="abstract"/> class for filter primitive attributes that are available for all filter primitives:
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterPrimitiveStandardAttributes.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterPrimitiveStandardAttributes.X">
            <summary>
            The minimum x coordinate for the subregion which restricts calculation and rendering of the given filter primitive. 
            </summary>
            <value>
            <para>x = <c>length-percentage</c> </para>
            The initial value is <c>0%</c>.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterPrimitiveStandardAttributes.Y">
            <summary>
            The minimum y coordinate for the subregion which restricts calculation and rendering of the given filter primitive.
            </summary>
            <value>
            <para>y = <c>length-percentage</c> </para>
            The initial value is <c>0%</c>.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterPrimitiveStandardAttributes.Width">
            <summary>
            The width of the subregion which restricts calculation and rendering of the given filter primitive.
            </summary>
            <value>
            <para>width = <c>length-percentage</c> </para>
            <para>A negative or zero value disables the effect of the given filter primitive (i.e., the 
            result is a transparent black image).</para>
            The initial value is <c>100%</c>.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterPrimitiveStandardAttributes.Height">
            <summary>
            The height of the subregion which restricts calculation and rendering of the given filter primitive.
            </summary>
            <value>
            <para>height = <c>length-percentage</c> </para>
            <para>A negative or zero value must disable the effect of the given filter primitive (i.e., the 
            result is a transparent black image).</para>
            The initial value is <c>100%</c>.
            </value>
            <remarks>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFilterPrimitiveStandardAttributes.Result">
            <summary>
            This is an <c>custom-ident</c> and an assigned name for this filter primitive. 
            </summary>
            <value>
            <para>result = <c>filter-primitive-reference</c> </para>
            </value>
            <remarks>
            <para>
            If supplied, then graphics that result from processing this filter primitive can be referenced by an <c>in</c> 
            attribute on a subsequent filter primitive within the same filter element.
            </para>
            <para>
            If no value is provided, the output will only be available for re-use as the implicit input into the 
            next filter primitive if that filter primitive provides no value for its in attribute.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMetadataElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMarkerElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMarkerElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Marker"/>
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgMarkerElement.SetOrientToAuto">
            <summary>
             Sets the value of attribute orient to 'auto'.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgMarkerElement.SetOrientToAngle(SharpVectors.Dom.Svg.ISvgAngle)">
            <summary>
             Sets the value of attribute orient to the given angle.
            </summary>
            <param name="angle"> The angle value to use for attribute orient.</param>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMarkerElement.RefX">
            <summary>
            Corresponds to attribute refX on the given 'marker' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMarkerElement.RefY">
            <summary>
            Corresponds to attribute refY on the given 'marker' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMarkerElement.MarkerUnits">
            <summary>
            Corresponds to attribute markerUnits on the given 'marker' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMarkerElement.MarkerWidth">
            <summary>
            Corresponds to attribute markerWidth on the given 'marker' element
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMarkerElement.MarkerHeight">
            <summary>
            Corresponds to attribute markerHeight on the given 'marker' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMarkerElement.OrientType">
            <summary>
            Corresponds to attribute orient on the given 'marker' element. One of the Marker Orientation Types defined above.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMarkerElement.OrientAngle">
            <summary>
            Corresponds to attribute orient on the given 'marker' element. If markerUnits is SVG_MARKER_ORIENT_ANGLE, the angle value for attribute orient; otherwise, it will be set to zero.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathHandler">
            <summary>
            This interface must be implemented and then registred as the handler of a <c>PathParser</c> 
            instance in order to be notified of parsing events.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.StartPath">
            <summary>
            Invoked when the path starts. </summary>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.EndPath">
            <summary>
            Invoked when the path ends. </summary>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.MovetoRel(System.Single,System.Single)">
            <summary>
            Invoked when a relative moveto command has been parsed.
            <para>Command : <b>m</b>
            </para>
            </summary>
            <param name="x"> the relative x coordinate for the end point </param>
            <param name="y"> the relative y coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.MovetoAbs(System.Single,System.Single)">
            <summary>
            Invoked when an absolute moveto command has been parsed.
            <para>Command : <b>M</b>
            </para>
            </summary>
            <param name="x"> the absolute x coordinate for the end point </param>
            <param name="y"> the absolute y coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.ClosePath">
            <summary>
            Invoked when a closepath has been parsed.
            <para>Command : <b>z</b> | <b>Z</b>
            </para>
            </summary>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.LinetoRel(System.Single,System.Single)">
            <summary>
            Invoked when a relative line command has been parsed.
            <para>Command : <b>l</b>
            </para>
            </summary>
            <param name="x"> the relative x coordinates for the end point </param>
            <param name="y"> the relative y coordinates for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.LinetoAbs(System.Single,System.Single)">
            <summary>
            Invoked when an absolute line command has been parsed.
            <para>Command : <b>L</b>
            </para>
            </summary>
            <param name="x"> the absolute x coordinate for the end point </param>
            <param name="y"> the absolute y coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.LinetoHorizontalRel(System.Single)">
            <summary>
            Invoked when an horizontal relative line command has been parsed.
            <para>Command : <b>h</b>
            </para>
            </summary>
            <param name="x"> the relative X coordinate of the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.LinetoHorizontalAbs(System.Single)">
            <summary>
            Invoked when an horizontal absolute line command has been parsed.
            <para>Command : <b>H</b>
            </para>
            </summary>
            <param name="x"> the absolute X coordinate of the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.LinetoVerticalRel(System.Single)">
            <summary>
            Invoked when a vertical relative line command has been parsed.
            <para>Command : <b>v</b>
            </para>
            </summary>
            <param name="y"> the relative Y coordinate of the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.LinetoVerticalAbs(System.Single)">
            <summary>
            Invoked when a vertical absolute line command has been parsed.
            <para>Command : <b>V</b>
            </para>
            </summary>
            <param name="y"> the absolute Y coordinate of the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.CurvetoCubicRel(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Invoked when a relative cubic bezier curve command has been parsed.
            <para>Command : <b>c</b>
            </para>
            </summary>
            <param name="x1"> the relative x coordinate for the first control point </param>
            <param name="y1"> the relative y coordinate for the first control point </param>
            <param name="x2"> the relative x coordinate for the second control point </param>
            <param name="y2"> the relative y coordinate for the second control point </param>
            <param name="x"> the relative x coordinate for the end point </param>
            <param name="y"> the relative y coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.CurvetoCubicAbs(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Invoked when an absolute cubic bezier curve command has been parsed.
            <para>Command : <b>C</b>
            </para>
            </summary>
            <param name="x1"> the absolute x coordinate for the first control point </param>
            <param name="y1"> the absolute y coordinate for the first control point </param>
            <param name="x2"> the absolute x coordinate for the second control point </param>
            <param name="y2"> the absolute y coordinate for the second control point </param>
            <param name="x"> the absolute x coordinate for the end point </param>
            <param name="y"> the absolute y coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.CurvetoCubicSmoothRel(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Invoked when a relative smooth cubic bezier curve command has
            been parsed. The first control point is assumed to be the
            reflection of the second control point on the previous command
            relative to the current point.
            <para>Command : <b>s</b>
            </para>
            </summary>
            <param name="x2"> the relative x coordinate for the second control point </param>
            <param name="y2"> the relative y coordinate for the second control point </param>
            <param name="x"> the relative x coordinate for the end point </param>
            <param name="y"> the relative y coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.CurvetoCubicSmoothAbs(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Invoked when an absolute smooth cubic bezier curve command has
            been parsed. The first control point is assumed to be the
            reflection of the second control point on the previous command
            relative to the current point.
            <para>Command : <b>S</b>
            </para>
            </summary>
            <param name="x2"> the absolute x coordinate for the second control point </param>
            <param name="y2"> the absolute y coordinate for the second control point </param>
            <param name="x"> the absolute x coordinate for the end point </param>
            <param name="y"> the absolute y coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.CurvetoQuadraticRel(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Invoked when a relative quadratic bezier curve command has been parsed.
            <para>Command : <b>q</b>
            </para>
            </summary>
            <param name="x1"> the relative x coordinate for the control point </param>
            <param name="y1"> the relative y coordinate for the control point </param>
            <param name="x"> the relative x coordinate for the end point </param>
            <param name="y"> the relative x coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.CurvetoQuadraticAbs(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Invoked when an absolute quadratic bezier curve command has been parsed.
            <para>Command : <b>Q</b>
            </para>
            </summary>
            <param name="x1"> the absolute x coordinate for the control point </param>
            <param name="y1"> the absolute y coordinate for the control point </param>
            <param name="x"> the absolute x coordinate for the end point </param>
            <param name="y"> the absolute x coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.CurvetoQuadraticSmoothRel(System.Single,System.Single)">
            <summary>
            Invoked when a relative smooth quadratic bezier curve command
            has been parsed. The control point is assumed to be the
            reflection of the control point on the previous command
            relative to the current point.
            <para>Command : <b>t</b>
            </para>
            </summary>
            <param name="x"> the relative x coordinate for the end point </param>
            <param name="y"> the relative y coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.CurvetoQuadraticSmoothAbs(System.Single,System.Single)">
            <summary>
            Invoked when an absolute smooth quadratic bezier curve command
            has been parsed. The control point is assumed to be the
            reflection of the control point on the previous command
            relative to the current point.
            <para>Command : <b>T</b>
            </para>
            </summary>
            <param name="x"> the absolute x coordinate for the end point </param>
            <param name="y"> the absolute y coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.ArcRel(System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Single)">
            <summary>
            Invoked when a relative elliptical arc command has been parsed. 
            <para>Command : <b>a</b>
            </para>
            </summary>
            <param name="rx"> the X axis radius for the ellipse </param>
            <param name="ry"> the Y axis radius for the ellipse </param>
            <param name="xAxisRotation"> the rotation angle in degrees for the ellipse's
                                 X-axis relative to the X-axis </param>
            <param name="largeArcFlag"> the value of the large-arc-flag </param>
            <param name="sweepFlag"> the value of the sweep-flag </param>
            <param name="x"> the relative x coordinate for the end point </param>
            <param name="y"> the relative y coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPathHandler.ArcAbs(System.Single,System.Single,System.Single,System.Boolean,System.Boolean,System.Single,System.Single)">
            <summary>
            Invoked when an absolute elliptical arc command has been parsed.
            <para>Command : <b>A</b>
            </para>
            </summary>
            <param name="rx"> the X axis radius for the ellipse </param>
            <param name="ry"> the Y axis radius for the ellipse </param>
            <param name="xAxisRotation"> the rotation angle in degrees for the ellipse's
                                 X-axis relative to the X-axis </param>
            <param name="largeArcFlag"> the value of the large-arc-flag </param>
            <param name="sweepFlag"> the value of the sweep-flag </param>
            <param name="x"> the absolute x coordinate for the end point </param>
            <param name="y"> the absolute y coordinate for the end point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the path </exception>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPointsHandler">
            <summary>
            This interface must be implemented and then registred as the handler of a <c>PointsParser</c> 
            instance in order to be notified of parsing events.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPointsHandler.StartPoints">
            <summary>
            Invoked when the points attribute starts. </summary>
            <exception cref="T:System.FormatException"> if an error occured while processing the points </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPointsHandler.Point(System.Single,System.Single)">
            <summary>
            Invoked when a point has been parsed. </summary>
            <param name="x"> the x coordinate of the point </param>
            <param name="y"> the y coordinate of the point </param>
            <exception cref="T:System.FormatException"> if an error occured while processing the points </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgPointsHandler.EndPoints">
            <summary>
            Invoked when the points attribute ends. </summary>
            <exception cref="T:System.FormatException"> if an error occured while processing the points </exception>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgNumberParser">
            <summary>
            This class represents a parser with support for numbers.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgNumberParser._pow10">
            <summary>
            Array of powers of ten. Using double instead of float gives a tiny bit more precision.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgNumberParser.ParseFloat">
            <summary>
            Parses the content of the buffer and converts it to a float.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgNumberParser.BuildFloat(System.Int32,System.Int32)">
            <summary>
            Computes a float from mantissa and exponent.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgParser">
            <summary>
            This class is the superclass of all parsers. It provides localization and error handling methods.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgParser._reader">
            <summary>
            The normalizing reader.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgParser._current">
            <summary>
            The current character.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgParser.Current">
            <summary>
            Returns the current character value.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgParser.FormatMessage(System.String,System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgParser.Parse(System.String)">
            <summary>
            Parses the given string.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgParser.DoParse">
            <summary>
            Method responsible for actually parsing data after AbstractParser
            has initialized itself.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgParser.ReportError(System.String,System.Object[])">
            <summary>
            Signals an error to the error handler. </summary>
            <param name="key"> The message key in the resource bundle. </param>
            <param name="args"> The message arguments. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgParser.ReportCharacterExpectedError(System.Char,System.Int32)">
            <summary>
            simple api to call often reported error.
            Just a wrapper for reportError().
            </summary>
            <param name="expectedChar"> what caller expected </param>
            <param name="currentChar"> what caller found </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgParser.ReportUnexpectedCharacterError(System.Int32)">
            <summary>
            simple api to call often reported error.
            Just a wrapper for reportError().
            </summary>
            <param name="currentChar"> what the caller found and didnt expect </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgParser.CreateErrorMessage(System.String,System.Object[])">
            <summary>
            Returns a localized error message. </summary>
            <param name="key"> The message key in the resource bundle. </param>
            <param name="args"> The message arguments. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgParser.SkipSpaces">
            <summary>
            Skips the whitespaces in the current reader.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgParser.SkipCommaSpaces">
            <summary>
            Skips the whitespaces and an optional comma.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathParser">
            <summary>
            This class implements an event-based parser for the SVG path's <c>d</c> attribute values.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgPathParser._pathHandler">
            <summary>
            The path handler used to report parse events.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.#ctor(SharpVectors.Dom.Svg.ISvgPathHandler)">
            <summary>
            Creates a new PathParser.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPathParser.Handler">
            <summary>
            Allows an application to register a path handler.
            <para>
            If the application does not register a handler, all events reported by the parser will be silently ignored.
            </para>
            <para>
            Applications may register a new or different handler in the middle of a parse, and the parser must begin 
            using the new handler immediately.
            </para> 
            </summary>
            <value> The transform list handler. </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.Parsem">
            <summary>
            Parses a 'm' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.ParseM">
            <summary>
            Parses a 'M' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.Parsel">
            <summary>
            Parses a 'l' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.ParseL">
            <summary>
            Parses a 'L' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.Parseh">
            <summary>
            Parses a 'h' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.ParseH">
            <summary>
            Parses a 'H' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.Parsev">
            <summary>
            Parses a 'v' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.ParseV">
            <summary>
            Parses a 'V' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.Parsec">
            <summary>
            Parses a 'c' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.ParseC">
            <summary>
            Parses a 'C' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.Parseq">
            <summary>
            Parses a 'q' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.ParseQ">
            <summary>
            Parses a 'Q' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.Parses">
            <summary>
            Parses a 's' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.ParseS">
            <summary>
            Parses a 'S' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.Parset">
            <summary>
            Parses a 't' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.ParseT">
            <summary>
            Parses a 'T' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.Parsea">
            <summary>
            Parses a 'a' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.ParseA">
            <summary>
            Parses a 'A' command.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.SkipSubPath">
            <summary>
            Skips a sub-path.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPathParser.SkipCommaSpaces2">
            <summary>
            Skips the whitespaces and an optional comma. </summary>
            <returns> true if comma was skipped. </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPointsParser">
            <summary>
            This class implements an event-based parser for the SVG points
            attribute values (used with polyline and polygon elements).
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgPointsParser._pointsHandler">
            <summary>
            The points handler used to report parse events.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgPointsParser._isERead">
            <summary>
            Whether the last character was a 'e' or 'E'.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointsParser.#ctor(SharpVectors.Dom.Svg.ISvgPointsHandler)">
            <summary>
            Creates a new PointsParser.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPointsParser.Handler">
            <summary>
            Gets or sets an application <see cref="T:SharpVectors.Dom.Svg.ISvgPointsHandler"/> implementation to register a points handler.
            </summary>
            <value>The transform list handler.</value>
            <remarks>
            <para>
            If the application does not register a handler, all events reported by the parser will be silently ignored.
            </para>
            <para>Applications may register a new or different handler in the middle of a parse, and the parser must 
            begin using the new handler immediately.</para> 
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointsParser.DoParse">
            <summary>
            Parses the current stream.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgStringReader">
            <summary>
            This class represents a <see cref="T:SharpVectors.Dom.Svg.SvgTextReader"/> which handles strings.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgStringReader._inputText">
            <summary>
            The characters.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgStringReader._textLength">
            <summary>
            The length of the string.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgStringReader._nextIndex">
            <summary>
            The index of the next character.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgStringReader._line">
            <summary>
            The current line in the stream.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgStringReader._column">
            <summary>
            The current column in the stream.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgStringReader.#ctor(System.String)">
            <summary>
            Creates a new StringNormalizingReader. </summary>
            <param name="input"> The string to read. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgStringReader.Read">
            <summary>
            Read a single character.  This method will block until a character is available, an I/O error occurs, 
            or the end of the stream is reached.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgStringReader.Line">
            <summary>
            Returns the current line in the stream.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgStringReader.Column">
            <summary>
            Returns the current column in the stream.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgStringReader.Close">
            <summary>
            Close the stream.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTextReader">
            <summary>
            This class represents a reader which normalizes the line break: <c>\n</c>, <c>\r</c>, <c>\r\n</c> are replaced 
            by <c>\n</c>. The methods of this reader are not synchronized. The input is buffered.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTextReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Read characters into a portion of an array. </summary>
            <param name="cbuf">  Destination buffer </param>
            <param name="off">   Offset at which to start writing characters </param>
            <param name="len">   Maximum number of characters to read </param>
            <returns> The number of characters read, or -1 if the end of the
            stream has been reached </returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTextReader.Line">
            <summary>
            Gets the current line in the stream.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTextReader.Column">
            <summary>
            Gets the current column in the stream.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPathElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Shape"/>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathSegArcAbs">
            <summary>
            Summary description for SvgPathSegLinetoAbs.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathSegArcRel">
            <summary>
            Summary description for SvgPathSegLinetoAbs.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathSegClosePath">
            <summary>
            Summary description for SvgPathSegClosePath.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathSegCurvetoCubicRel">
            <summary>
            Summary description for SvgPathSegCurvetoCubicRel.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathSegCurvetoCubicSmoothRel">
            <summary>
            Summary description for SvgPathSegCurvetoCubicSmoothAbs.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticAbs">
            <summary>
            Summary description for SvgPathSegCurvetoCubicAbs.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticRel">
            <summary>
            Summary description for SvgPathSegCurvetoCubicAbs.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothAbs">
            <summary>
            The SvgPathSegCurvetoQuadraticSmoothAbs interface corresponds to an "absolute smooth quadratic curveto" (T) path data command. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothAbs.X">
            <summary>
            The absolute X coordinate for the end point of this path segment. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothAbs.Y">
            <summary>
            The absolute Y coordinate for the end point of this path segment. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothRel">
            <summary>
            The SvgPathSegCurvetoQuadraticSmoothRel interface corresponds to an "relative smooth quadratic curveto" (t) path data command. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothRel.X">
            <summary>
            The absolute X coordinate for the end point of this path segment. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPathSegCurvetoQuadraticSmoothRel.Y">
            <summary>
            The absolute Y coordinate for the end point of this path segment. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathSegMoveto">
            <summary>
            Summary description for SvgMoveToSeg.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPathSegMovetoRel">
            <summary>
            The SvgPathSegMovetoRel interface corresponds to an "relative moveto" (m) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgScriptElement">
            <summary>
            The ISvgScriptElement interface corresponds to the 'script' element. 
            </summary>
            <remarks>
            <para>A 'script' element is equivalent to the 'script' element in HTML and thus is the place for scripts.</para>
            <para>Any functions defined within any 'script' element have a 'global' scope across the entire current document.</para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgScriptElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgScriptElement.Type">
            <summary>
            Gets or sets a value corresponding to the attribute 'type' on the given 'script' element.
            </summary>
            <value>A string specifying the script type.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgScriptElement.CrossOrigin">
            <summary>
            Gets or sets a value corresponding to the attribute 'crossorigin' on the given 'script' element.
            </summary>
            <value>An enumeration specifying the CORS (Cross-Origin Resource Sharing) setting attributes. 
            Possible values are <c>anonymous</c>, <c>use-credentials</c> and empty string.</value>
            <remarks>This is introduced in <c>SVG 2</c>.</remarks>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes"/>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgCircleElement">
            <summary>
            The ISvgCircleElement interface corresponds to the 'circle' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgCircleElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Shape"/>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgEllipseElement">
            <summary>
            The SvgEllipseElement class corresponds to the 'ellipse' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgEllipseElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Shape"/>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgLineElement">
            <summary>
            The SVGLineElement interface corresponds to the 'line' element.  
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgLineElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Shape"/>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPolyElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Shape"/>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPolygonElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPolylineElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgRectElement">
            <summary>
            The SVGRectElement interface corresponds to the 'rect' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Shape"/>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAltGlyphDefElement">
            <summary>
            This implements the <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement"/> interface corresponds to the 'altGlyphDef' element.
            </summary>
            <remarks>
            *Content model:* Either
            <list type="bullet">
            <item><term>one or more 'glyphRef' elements, or</term>
            <description>In the simplest case, an 'altGlyphDef' contains one or more 'glyphRef' elements. 
            Each 'glyphRef' element references a single glyph within a particular font.
            </description>
            </item>
            <item><term>one or more 'altGlyphItem' elements.</term>
            <description>In the more complex case, an 'altGlyphDef' contains one or more 'altGlyphItem' elements. 
            Each 'altGlyphItem' represents a candidate set of substitute glyphs. Each 'altGlyphItem' contains 
            one or more 'glyphRef' elements. Each 'glyphRef' element references a single glyph within a particular font. 
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgAltGlyphDefElement.#ctor(System.String,System.String,System.String,SharpVectors.Dom.Svg.SvgDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgAltGlyphDefElement"/> class with the specified parameters.
            </summary>
            <param name="prefix"></param>
            <param name="localname"></param>
            <param name="ns"></param>
            <param name="doc"></param>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAltGlyphDefElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAltGlyphDefElement.IsSimple">
            <summary>
            Gets a value indicating whether this is a simple content model.
            </summary>
            <value>
            Returns <see langword="true"/> if this element defines a simple content model that contains only 'glyphRef'
            elements, otherwise returns <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAltGlyphDefElement.GlyphRef">
            <summary>
            Gets the first child element with the name 'glyphRef'.
            </summary>
            <value>
            The first <see cref="T:SharpVectors.Dom.Svg.SvgGlyphRefElement"/> if matched. It returns a <see langword="null"/> if there is no match.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgAltGlyphDefElement.GetGlyphRef(System.String)">
            <summary>
            Gets the <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> with the specified name or ID.
            </summary>
            <param name="name">The name or ID of the required <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/>.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> specifying the 'glyphRef' element of the specifiied name or ID.
            <para>
            This will always return <see langword="null"/>, if the <see cref="P:SharpVectors.Dom.Svg.SvgAltGlyphDefElement.IsSimple"/> is <see langword="false"/>.
            </para>
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgAltGlyphDefElement.GetGlyphItem(System.String)">
            <summary>
            Gets the <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement"/> with the specified name or ID.
            </summary>
            <param name="name">The name or ID of the required <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement"/>.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement"/> specifying the 'altGlyphItem' element of the specifiied name or ID.
            <para>
            This will always return <see langword="null"/>, if the <see cref="P:SharpVectors.Dom.Svg.SvgAltGlyphDefElement.IsSimple"/> is <see langword="true"/>.
            </para>
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAltGlyphElement">
            <summary>
            The ISvgAltGlyphElement interface corresponds to the 'altGlyph' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAltGlyphElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAltGlyphElement.GlyphRef">
            <summary>
            Corresponds to attribute 'glyphRef attribute' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAltGlyphElement.Format">
            <summary>
            Corresponds to attribute 'format' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAltGlyphItemElement">
            <summary>
            This implements the <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement"/> interface corresponds to the 'altGlyphItem' element.
            </summary>
            <remarks>
            <para>*Content model:* One or more 'glyphRef' elements.</para>
            <para>The 'altGlyphItem' element defines a candidate set of possible glyph substitutions. 
            The first 'altGlyphItem' element whose referenced glyphs are all available is chosen. 
            Its glyphs are rendered instead of the character(s) that are inside of the referencing 'altGlyph' element.</para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgAltGlyphItemElement.#ctor(System.String,System.String,System.String,SharpVectors.Dom.Svg.SvgDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgAltGlyphItemElement"/> class with the specified parameters.
            </summary>
            <param name="prefix"></param>
            <param name="localname"></param>
            <param name="ns"></param>
            <param name="doc"></param>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgAltGlyphItemElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgAltGlyphItemElement.GetGlyphRef(System.String)">
            <summary>
            Gets the <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> with the specified name or ID.
            </summary>
            <param name="name">The name or ID of the required <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/>.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> specifying the 'glyphRef' element of the specifiied name or ID.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFontElement">
            <summary>
            The SvgFontElement interface corresponds to the 'font' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontElement.HorizAdvX">
            <summary>
            Gets or sets the default horizontal advance after rendering a glyph in horizontal orientation.  
            </summary>
            <remarks>
            Glyph widths are required to be non-negative, even if the glyph is typically rendered 
            right-to-left, as in Hebrew and Arabic scripts.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontElement.HorizOriginX">
            <summary>
            Gets or sets X-coordinate in the font coordinate system of the origin of a glyph 
            to be used when drawing horizontally oriented text
            </summary>
            <remarks>
            <para>Note that the origin applies to all glyphs in the font.</para>
            <para>If the attribute is not specified, the effect is as if a value of '0' were specified.</para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontElement.HorizOriginY">
            <summary>
            Gets or sets the Y-coordinate in the font coordinate system of the origin of a glyph to be 
            used when drawing horizontally oriented text. 
            </summary>
            <remarks>
            <para>Note that the origin applies to all glyphs in the font.</para>
            <para>If the attribute is not specified, the effect is as if a value of '0' were specified.</para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontElement.VertAdvY">
            <summary>
            Gets or sets the 
            </summary>
            <remarks>
            <para>
            </para>
            <para>
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontElement.VertOriginX">
            <summary>
            Gets or sets the default X-coordinate in the font coordinate system of the origin of a glyph 
            to be used when drawing vertically oriented text. 
            </summary>
            <remarks>
            If the attribute is not specified, the effect is as if the attribute were set to half of the 
            effective value of attribute ‘horiz-adv-x’.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontElement.VertOriginY">
            <summary>
            Gets or sets the default Y-coordinate in the font coordinate system of the origin of a 
            glyph to be used when drawing vertically oriented text. 
            </summary>
            <remarks>
            If the attribute is not specified, the effect is as if the attribute were set to the 
            position specified by the font's ‘ascent’ attribute.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontElement.UnicodeRange">
            <summary>
            
            </summary>
            <value></value>
            <remarks>
            This is an extension attribute for externally defined fonts with its unicode-range in 'defs' tag.
            The unicode-range value is lost in the current processing method.
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFontFaceElement">
            <summary>
            The SvgFontFaceElement interface corresponds to the 'font-face' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.Alphabetic">
            <summary>
            
            </summary>
            <value></value>
            <remarks>attribute name = "alphabetic" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.Ascent">
            <summary>
            
            </summary>
            <value></value>
            <remarks>attribute name = "ascent" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.AscentHeight">
            <summary>
            
            </summary>
            <value></value>
            <remarks>attribute name = "ascent-height" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.Descent">
            <summary>
            
            </summary>
            <value></value>
            <remarks>attribute name = "descent" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.FontFamily">
            <summary>
            Indicates which font family is to be used to render the text.
            </summary>
            <value></value>
            <remarks>attribute name = "font-family" {string}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.FontSize">
            <summary>
            Refers to the size of the font from baseline to baseline when multiple 
            lines of text are set solid in a multiline layout environment.
            </summary>
            <value></value>
            <remarks>attribute name = "font-size" {string}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.FontStyle">
            <summary>
            Refers to the style of the font.
            </summary>
            <value></value>
            <remarks>attribute name = "font-style" {string}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.FontVariant">
            <summary>
            Refers to the varient of the font.
            </summary>
            <value></value>
            <remarks>attribute name = "font-variant" {string}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.FontWeight">
            <summary>
            Refers to the boldness of the font.
            </summary>
            <value></value>
            <remarks>attribute name = "font-weight" {string}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.FontStretch">
            <summary>
            
            </summary>
            <value></value>
            <remarks>attribute name = "font-stretch" {string}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.Panose1">
            <summary>
            
            </summary>
            <value></value>
            <remarks>attribute name = "panose-1" {string}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.UnicodeRange">
            <summary>
            
            </summary>
            <value></value>
            <remarks>attribute name = "unicode-range" {{urange} [, {urange}]*></remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.UnitsPerEm">
            <summary>
            
            </summary>
            <value></value>
            <remarks>attribute name = "units-per-em" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.XHeight">
            <summary>
            
            </summary>
            <value></value>
            <remarks>attribute name = "x-height" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.CapHeight">
            <summary>
            Gets the distance from the baseline to the top of an English lowercase letter for a typeface. 
            The distance excludes ascenders.
            </summary>
            <value>
            A <see cref="T:System.Single"/> that indicates the distance from the baseline to the top of an
            English lowercase letter (excluding ascenders), expressed as a fraction of the font em size.
            </value>
            <remarks>attribute name = "cap-height" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.StrikethroughPosition">
            <summary>
            Gets a value that indicates the distance from the baseline to the strikethrough for the typeface.
            </summary>
            <value>A <see cref="T:System.Single"/> that indicates the strikethrough position, measured from the baseline and expressed 
            as a fraction of the font em size.</value>
            <remarks>attribute name = "strikethrough-position" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.StrikethroughThickness">
            <summary>
            Gets a value that indicates the thickness of the strikethrough relative to the font em size.
            </summary>
            <value>A <see cref="T:System.Single"/> that indicates the strikethrough thickness, expressed as a fraction 
            of the font em size.</value>
            <remarks>attribute name = "strikethrough-thickness" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.UnderlinePosition">
            <summary>
            Gets a value that indicates the distance of the underline from the baseline for the typeface.
            </summary>
            <value>A <see cref="T:System.Single"/> that indicates the underline position, measured from the baseline 
            and expressed as a fraction of the font em size.</value>
            <remarks>attribute name = "underline-position" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.UnderlineThickness">
            <summary>
            Gets a value that indicates the thickness of the underline relative to the font em size for the typeface.
            </summary>
            <value>A <see cref="T:System.Single"/> that indicates the underline thickness, expressed as a fraction 
            of the font em size.</value>
            <remarks>attribute name = "underline-thickness" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.OverlinePosition">
            <summary>
            Gets a value that indicates the distance of the overline from the baseline for the typeface.
            </summary>
            <value>A <see cref="T:System.Single"/> that indicates the overline position, measured from the baseline 
            and expressed as a fraction of the font em size.</value>
            <remarks>attribute name = "overline-position" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceElement.OverlineThickness">
            <summary>
            Gets a value that indicates the thickness of the overline relative to the font em size for the typeface.
            </summary>
            <value>A <see cref="T:System.Single"/> that indicates the overline thickness, expressed as a fraction 
            of the font em size.</value>
            <remarks>attribute name = "overline-thickness" {number}</remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFontFaceFormatElement">
            <summary>
            The <see cref="T:SharpVectors.Dom.Svg.ISvgFontFaceFormatElement"/> interface corresponds to the <c>font-face-format'</c>' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceFormatElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFontFaceNameElement">
            <summary>
            The SvgFontFaceNameElement interface corresponds to the 'font-face-name' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceNameElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFontFaceSrcElement">
            <summary>
            The SvgFontFaceSrcElement interface corresponds to the 'font-face-src' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceSrcElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFontFaceUriElement">
            <summary>
            The SvgFontFaceUriElement interface corresponds to the 'font-face-uri' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgFontFaceUriElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgGlyphElement">
            <summary>
            The SvgGlyphElement interface corresponds to the 'glyph' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGlyphElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGlyphElement.PathData">
            <summary>
            Gets a <see cref="T:SharpVectors.Dom.Svg.ISvgPathSegList"/> of path data.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGlyphElement.D">
            <summary>
            Gets or sets.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgGlyphRefElement">
            <summary>
            The ISvgGlyphRefElement interface corresponds to the 'glyphRef' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGlyphRefElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGlyphRefElement.GlyphRef">
            <summary>
            Corresponds to attribute 'glyphRef attribute' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGlyphRefElement.Format">
            <summary>
            Corresponds to attribute 'format' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGlyphRefElement.X">
            <summary>
            Corresponds to attribute 'x' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGlyphRefElement.Y">
            <summary>
            Corresponds to attribute 'y' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGlyphRefElement.Dx">
            <summary>
            Corresponds to attribute 'dx' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgGlyphRefElement.Dy">
            <summary>
            Corresponds to attribute 'dy' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgHKernElement">
            <summary>
            The SvgHKernElement interface corresponds to the 'hkern' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgHKernElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgKernElement">
            <summary>
            The SvgKernElement is the base interface corresponds to the 'vkern' and 'hkern' elements. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgKernElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgMissingGlyphElement">
            <summary>
            The SvgMissingGlyphElement interface corresponds to the 'missing-glyph' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgMissingGlyphElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTextAreaElement">
            <summary>
            Summary description for SvgTextAreaElement.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTextBaseElement">
            <summary>
            Summary description for SvgTextElement.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTextContentElement">
            <summary>
            Summary description for SvgTextContentElement.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTextContentElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            This will always return <see cref="F:SharpVectors.Dom.Svg.SvgRenderingHint.Text"/>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTextElement">
            <summary>
            Summary description for SvgTextElement.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTextPathElement">
            <summary>
            The implementation of the ISvgTextPathElement interface corresponds to the 'textPath' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTextPositioningElement">
            <summary>
            The SvgTextPositioningElement interface is inherited by text-related interfaces: 
            SvgTextElement, SvgTSpanElement, SvgTRefElement and SvgAltGlyphElement. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTRefElement">
            <summary>
            Summary description for SvgTRefElement.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTSpanElement">
            <summary>
            The SvgTSpanElement interface corresponds to the 'tspan' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgVKernElement">
            <summary>
            The SvgVKernElement interface corresponds to the 'vkern' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgVKernElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Resources.Root">
            <summary>
            Marks resources root
            </summary>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.BitReader">
            <summary>Bit reading helpers.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.BitReader.Capacity">
            <summary>
            Input byte buffer, consist of a ring-buffer and a "slack" region where bytes from the start of
            the ring-buffer are copied.
            </summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.BitReader._endOfStreamReached">
            <summary>Input stream is finished.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.BitReader._accumulator">
            <summary>Pre-fetched bits.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.BitReader._bitOffset">
            <summary>Current bit-reading position in accumulator.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.BitReader._intOffset">
            <summary>Offset of next item in intBuffer.</summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BitReader.ReadMoreInput(SharpVectors.Compressions.Brotli.BitReader)">
            <summary>Fills up the input buffer.</summary>
            <remarks>
            Fills up the input buffer.
            <para> No-op if there are at least 36 bytes present after current position.</para>
            <para> After encountering the end of the input stream, 64 additional zero bytes are copied to the buffer.</para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BitReader.FillBitWindow(SharpVectors.Compressions.Brotli.BitReader)">
            <summary>Advances the Read buffer by 5 bytes to make room for reading next 24 bits.</summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BitReader.ReadBits(SharpVectors.Compressions.Brotli.BitReader,System.Int32)">
            <summary>Reads the specified number of bits from Read Buffer.</summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BitReader.Init(SharpVectors.Compressions.Brotli.BitReader,System.IO.Stream)">
            <summary>Initialize bit reader.</summary>
            <remarks>
            Initialize bit reader.
            <para> Initialisation turns bit reader to a ready state. Also a number of bytes is prefetched to
            accumulator. Because of that this method may block until enough data could be read from input.</para>
            </remarks>
            <param name="br">BitReader POJO</param>
            <param name="input">data source</param>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BitReader.Close(SharpVectors.Compressions.Brotli.BitReader)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.BrotliDecode">
            <summary>API for Brotli decompression.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.BrotliDecode.FixedTable">
            <summary>Static Huffman code for the code length code lengths.</summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliDecode.DecodeVarLenUnsignedByte(SharpVectors.Compressions.Brotli.BitReader)">
            <summary>Decodes a number in the range [0..255], by reading 1 - 11 bits.</summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliDecode.ReadSymbol(System.Int32[],System.Int32,SharpVectors.Compressions.Brotli.BitReader)">
            <summary>Decodes the next Huffman code from bit-stream.</summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliDecode.ReadMetablockInfo(SharpVectors.Compressions.Brotli.BrotliState)">
            <summary>Reads next metablock header.</summary>
            <param name="state">decoding state</param>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliDecode.Decompress(SharpVectors.Compressions.Brotli.BrotliState)">
            <summary>Actual decompress implementation.</summary>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.BrotliInputStream">
            <summary>
            A <see cref="T:System.IO.Stream"/> decorator that decompresses brotli data.
            <para> Not thread-safe.</para>
            </summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.BrotliInputStream._buffer">
            <summary>Internal buffer used for efficient byte-by-byte reading.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.BrotliInputStream._remainingBufferBytes">
            <summary>Number of decoded but still unused bytes in internal buffer.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.BrotliInputStream._bufferOffset">
            <summary>Next unused byte offset.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.BrotliInputStream._state">
            <summary>Decoder state.</summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> wrapper that decompresses brotli data.
            <para> For byte-by-byte reading (<see cref="M:SharpVectors.Compressions.Brotli.BrotliInputStream.ReadByte"/>) internal buffer with
            <see cref="F:SharpVectors.Compressions.Brotli.BrotliInputStream.DefaultInternalBufferSize"/> size is allocated and used.</para>
            <para> Will block the thread until first kilobyte of data of source is available.</para>
            </summary>
            <param name="source">underlying data source</param>
            <exception cref="T:System.IO.IOException">in case of corrupted data or source stream problems</exception>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> wrapper that decompresses brotli data.
            <para> For byte-by-byte reading (<see cref="M:SharpVectors.Compressions.Brotli.BrotliInputStream.ReadByte"/>) internal buffer of specified size is
            allocated and used.</para>
            <para> Will block the thread until first kilobyte of data of source is available.</para>
            </summary>
            <param name="source">compressed data source</param>
            <param name="byteReadBufferSize">size of internal buffer used in case of byte-by-byte reading</param>
            <exception cref="T:System.IO.IOException">in case of corrupted data or source stream problems</exception>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliInputStream.#ctor(System.IO.Stream,System.Int32,System.Byte[])">
            <summary>
            Creates a <see cref="T:System.IO.Stream"/> wrapper that decompresses brotli data.
            <para> For byte-by-byte reading (<see cref="M:SharpVectors.Compressions.Brotli.BrotliInputStream.ReadByte"/>) internal buffer of specified size is
            allocated and used.</para>
            <para> Will block the thread until first kilobyte of data of source is available.</para>
            </summary>
            <param name="source">compressed data source</param>
            <param name="byteReadBufferSize">size of internal buffer used in case of byte-by-byte reading</param>
            <param name="customDictionary">custom dictionary data; <see langword="null"/> if not used</param>
            <exception cref="T:System.IO.IOException">in case of corrupted data or source stream problems</exception>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliInputStream.Close">
            <summary><inheritDoc/></summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliInputStream.ReadByte">
            <summary><inheritDoc/></summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary><inheritDoc/></summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:SharpVectors.Compressions.Brotli.BrotliInputStream.CanRead">
            <summary><inheritDoc/></summary>
        </member>
        <member name="P:SharpVectors.Compressions.Brotli.BrotliInputStream.CanSeek">
            <summary><inheritDoc/></summary>
        </member>
        <member name="P:SharpVectors.Compressions.Brotli.BrotliInputStream.Length">
            <summary><inheritDoc/></summary>
        </member>
        <member name="P:SharpVectors.Compressions.Brotli.BrotliInputStream.Position">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliInputStream.SetLength(System.Int64)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="P:SharpVectors.Compressions.Brotli.BrotliInputStream.CanWrite">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary><inheritDoc/></summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliInputStream.Flush">
            <summary><inheritDoc/></summary>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.BrotliRuntimeException">
            <summary>Unchecked exception used internally.</summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliState.SetInput(SharpVectors.Compressions.Brotli.BrotliState,System.IO.Stream)">
            <summary>Associate input with decoder state.</summary>
            <param name="state">uninitialized state without associated input</param>
            <param name="input">compressed data source</param>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.BrotliState.Close(SharpVectors.Compressions.Brotli.BrotliState)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.BrotliTransform">
            <summary>Transformations on dictionary words.</summary>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.Context">
            <summary>Common context lookup table for all context modes.</summary>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.Dictionary">
            <summary>Collection of static dictionary words.</summary>
            <remarks>
            Collection of static dictionary words.
            <para>Dictionary content is loaded from binary resource when <see cref="M:SharpVectors.Compressions.Brotli.Dictionary.GetData"/> is executed for the
            first time. Consequently, it saves memory and CPU in case dictionary is not required.
            </para>
            <para>One possible drawback is that multiple threads that need dictionary data may be blocked (only
            once in each classworld). To avoid this, it is enough to call <see cref="M:SharpVectors.Compressions.Brotli.Dictionary.GetData"/> proactively.
            </para>
            </remarks>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.Dictionary.DataHolder0">
            <summary>"Initialization-on-demand holder idiom" implementation.</summary>
            <remarks>
            "Initialization-on-demand holder idiom" implementation.
            <para>This static class definition is not initialized until the JVM determines that it must be
            executed (when the static method <see cref="M:SharpVectors.Compressions.Brotli.Dictionary.DataHolder0.GetData"/> is invoked).
            </para>
            </remarks>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.Huffman">
            <summary>Utilities for building Huffman decoding tables.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.Huffman.HuffmanMaxTableSize">
            <summary>
            Maximum possible Huffman table size for an alphabet size of 704, max code length 15 and root
            table bits 8.
            </summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.Huffman.GetNextKey(System.Int32,System.Int32)">
            <summary>Returns reverse(reverse(key, len) + 1, len).</summary>
            <remarks>
            Returns reverse(reverse(key, len) + 1, len).
            <para> reverse(key, len) is the bit-wise reversal of the len least significant bits of key.</para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.Huffman.ReplicateValue(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Stores <paramref name="item"/> in <c>table[0], table[step], table[2 * step] .., table[end]</c>.
            <para> Assumes that end is an integer multiple of step.</para>
            </summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.Huffman.NextTableBitSize(System.Int32[],System.Int32,System.Int32)">
            <param name="count">histogram of bit lengths for the remaining symbols,</param>
            <param name="len">code length of the next processed symbol.</param>
            <returns>table width of the next 2nd level table.</returns>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.Huffman.BuildHuffmanTable(System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32)">
            <summary>Builds Huffman lookup table assuming code lengths are in symbol order.</summary>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.HuffmanTreeGroup">
            <summary>Contains a collection of huffman trees with the same alphabet size.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.HuffmanTreeGroup.alphabetSize">
            <summary>The maximal alphabet size in this group.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.HuffmanTreeGroup.codes">
            <summary>Storage for Huffman lookup tables.</summary>
        </member>
        <member name="F:SharpVectors.Compressions.Brotli.HuffmanTreeGroup.trees">
            <summary>
            Offsets of distinct lookup tables in <see cref="F:SharpVectors.Compressions.Brotli.HuffmanTreeGroup.codes"/> storage.
            </summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.HuffmanTreeGroup.Init(SharpVectors.Compressions.Brotli.HuffmanTreeGroup,System.Int32,System.Int32)">
            <summary>Initializes the Huffman tree group.</summary>
            <param name="group">POJO to be initialised</param>
            <param name="alphabetSize">the maximal alphabet size in this group</param>
            <param name="n">number of Huffman codes</param>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.HuffmanTreeGroup.Decode(SharpVectors.Compressions.Brotli.HuffmanTreeGroup,SharpVectors.Compressions.Brotli.BitReader)">
            <summary>Decodes Huffman trees from input stream and constructs lookup tables.</summary>
            <param name="group">target POJO</param>
            <param name="br">data source</param>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.IntReader">
            <summary>Byte-to-int conversion magic.</summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.IntReader.Convert(SharpVectors.Compressions.Brotli.IntReader,System.Int32)">
            <summary>Translates bytes to ints.</summary>
            <remarks>
            Translates bytes to ints.
            NB: intLen == 4 * byteSize!
            NB: intLen should be less or equal to intBuffer length.
            </remarks>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.Prefix">
            <summary>Lookup tables to map prefix codes to value ranges.</summary>
            <remarks>
            Lookup tables to map prefix codes to value ranges.
            <para> This is used during decoding of the block lengths, literal insertion lengths and copy lengths.</para>
            <para> Range represents values: [offset, offset + 2 ^ n_bits)</para>
            </remarks>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.RunningState">
            <summary>Enumeration of decoding state-machine.</summary>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.Utils">
            <summary>A set of utility methods.</summary>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.Utils.FillWithZeroes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fills byte array with zeroes.</summary>
            <remarks>
            Fills byte array with zeroes.
            <para> Current implementation uses <see cref="!:Array.Copy(object, int, object, int, int)"/>, 
            so it should be used for length not less than 16.</para>
            </remarks>
            <param name="dest">array to fill with zeroes</param>
            <param name="offset">the first byte to fill</param>
            <param name="length">number of bytes to change</param>
        </member>
        <member name="M:SharpVectors.Compressions.Brotli.Utils.FillWithZeroes(System.Int32[],System.Int32,System.Int32)">
            <summary>Fills int array with zeroes.</summary>
            <remarks>
            Fills int array with zeroes.
            <para> Current implementation uses <see cref="!:Array.Copy(object, int, object, int, int)"/>, 
            so it should be used for length not less than 16.</para>
            </remarks>
            <param name="dest">array to fill with zeroes</param>
            <param name="offset">the first item to fill</param>
            <param name="length">number of item to change</param>
        </member>
        <member name="T:SharpVectors.Compressions.Brotli.WordTransformType">
            <summary>Enumeration of all possible word transformations.</summary>
            <remarks>
            Enumeration of all possible word transformations.
            <para>There are two simple types of transforms: omit X first/last symbols, two character-case
            transforms and the identity transform.</para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Compressions.ZLib.ZLibStream.#ctor(System.IO.Stream,SharpVectors.Compressions.ZLib.ZLibCompressionLevel)">
            <summary>
            Inicializa una nueva instancia de la clase ZLibStream usando la secuencia y nivel de compresión especificados.
            </summary>
            <param name="stream">Secuencia que se va a comprimir</param>
            <param name="compressionLevel">Nivel de compresión</param>
        </member>
        <member name="M:SharpVectors.Compressions.ZLib.ZLibStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
            <summary>
            Inicializa una nueva instancia de la clase ZLibStream usando la secuencia y modo de compresión especificados.
            </summary>
            <param name="stream">Secuencia que se va a comprimir o descomprimir</param>
            <param name="compressionMode">Modo de compresión</param>
        </member>
        <member name="M:SharpVectors.Compressions.ZLib.ZLibStream.#ctor(System.IO.Stream,SharpVectors.Compressions.ZLib.ZLibCompressionLevel,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase ZLibStream usando la secuencia y nivel de compresión especificados y, opcionalmente, deja la secuencia abierta.
            </summary>
            <param name="stream">Secuencia que se va a comprimir</param>
            <param name="compressionLevel">Nivel de compresión</param>
            <param name="leaveOpen">Indica si se debe de dejar la secuencia abierta después de comprimir la secuencia</param>
        </member>
        <member name="M:SharpVectors.Compressions.ZLib.ZLibStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase ZLibStream usando la secuencia y modo de compresión especificados y, opcionalmente, deja la secuencia abierta.
            </summary>
            <param name="stream">Secuencia que se va a comprimir o descomprimir</param>
            <param name="compressionMode">Modo de compresión</param>
            <param name="leaveOpen">Indica si se debe de dejar la secuencia abierta después de comprimir o descomprimir la secuencia</param>
        </member>
        <member name="M:SharpVectors.Compressions.ZLib.ZLibStream.IsZLibStream(System.IO.Stream)">
            <summary>
            Check if the stream is in ZLib format
            </summary>
            <param name="stream">Stream to check</param>
            <returns>Returns <see langword="true"/> in case the stream is in ZLib format, 
            otherwise returns <see langword="true"/> or error.</returns>
        </member>
        <member name="M:SharpVectors.Compressions.ZLib.ZLibStream.ReadCRC">
            <summary>
            Read the last 4 bytes of the stream as it is where is the CRC
            </summary>
        </member>
        <member name="M:SharpVectors.Compressions.ZLib.ZLibStream.InitializeStream">
            <summary>
            Initialize the stream
            </summary>
        </member>
        <member name="M:SharpVectors.Compressions.ZLib.ZLibStream.InitializeZLibHeader">
            <summary>
            Initialize the stream header in ZLib format
            </summary>
        </member>
        <member name="T:SharpVectors.IoC.ISvgRegisteredType">
            <summary>
            IRegisteredType is return by Container.Register and allows further configuration for the registration
            </summary>
        </member>
        <member name="M:SharpVectors.IoC.ISvgRegisteredType.AsSingleton">
            <summary>
            Make registered type a singleton
            </summary>
        </member>
        <member name="M:SharpVectors.IoC.ISvgRegisteredType.PerScope">
            <summary>
            Make registered type a per-scope type (single instance within a Scope)
            </summary>
        </member>
        <member name="T:SharpVectors.IoC.ISvgScope">
            <summary>
            Represents a scope in which per-scope objects are instantiated a single time
            </summary>
        </member>
        <member name="T:SharpVectors.IoC.SvgContainer">
            <summary>
            Inversion of control container handles dependency injection for registered types
            </summary>
        </member>
        <member name="M:SharpVectors.IoC.SvgContainer.#ctor">
            <summary>
            Creates a new instance of IoC Container
            </summary>
        </member>
        <member name="M:SharpVectors.IoC.SvgContainer.Register(System.Type,System.Func{System.Object})">
            <summary>
            Registers a factory function which will be called to resolve the specified interface
            </summary>
            <param name="anInterface">Interface to register</param>
            <param name="factory">Factory function</param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.IoC.SvgContainer.Register(System.Type,System.Type)">
            <summary>
            Registers an implementation type for the specified interface
            </summary>
            <param name="anInterface">Interface to register</param>
            <param name="implementation">Implementing type</param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.IoC.SvgContainer.GetService(System.Type)">
            <summary>
            Returns the object registered for the given type
            </summary>
            <param name="type">Type as registered with the container</param>
            <returns>Instance of the registered type</returns>
        </member>
        <member name="M:SharpVectors.IoC.SvgContainer.HasService(System.Type)">
            <summary>
            Returns a value indicating whether the object type is registered or not.
            </summary>
            <param name="type">Type as registered with the container</param>
            <returns>Returns <see langword="true"/> if the specified type is registered, otherwise; return <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.IoC.SvgContainer.CreateScope">
            <summary>
            Creates a new scope
            </summary>
            <returns>Scope object</returns>
        </member>
        <member name="M:SharpVectors.IoC.SvgContainer.Dispose">
            <summary>
            Disposes any <see cref="T:System.IDisposable"/> objects owned by this container.
            </summary>
        </member>
        <member name="T:SharpVectors.IoC.SvgIoCContainerExtensions">
            <summary>
            Extension methods for Container
            </summary>
        </member>
        <member name="M:SharpVectors.IoC.SvgIoCContainerExtensions.Register``1(SharpVectors.IoC.SvgContainer,System.Type)">
            <summary>
            Registers an implementation type for the specified interface
            </summary>
            <typeparam name="T">Interface to register</typeparam>
            <param name="container">This container instance</param>
            <param name="type">Implementing type</param>
            <returns>IRegisteredType object</returns>
        </member>
        <member name="M:SharpVectors.IoC.SvgIoCContainerExtensions.Register``2(SharpVectors.IoC.SvgContainer)">
            <summary>
            Registers an implementation type for the specified interface
            </summary>
            <typeparam name="TInterface">Interface to register</typeparam>
            <typeparam name="TImplementation">Implementing type</typeparam>
            <param name="container">This container instance</param>
            <returns>IRegisteredType object</returns>
        </member>
        <member name="M:SharpVectors.IoC.SvgIoCContainerExtensions.Register``1(SharpVectors.IoC.SvgContainer,System.Func{``0})">
            <summary>
            Registers a factory function which will be called to resolve the specified interface
            </summary>
            <typeparam name="T">Interface to register</typeparam>
            <param name="container">This container instance</param>
            <param name="factory">Factory method</param>
            <returns>IRegisteredType object</returns>
        </member>
        <member name="M:SharpVectors.IoC.SvgIoCContainerExtensions.Register``1(SharpVectors.IoC.SvgContainer)">
            <summary>
            Registers a type
            </summary>
            <param name="container">This container instance</param>
            <typeparam name="T">Type to register</typeparam>
            <returns>IRegisteredType object</returns>
        </member>
        <member name="M:SharpVectors.IoC.SvgIoCContainerExtensions.Resolve``1(SharpVectors.IoC.ISvgScope)">
            <summary>
            Returns an implementation of the specified interface
            </summary>
            <typeparam name="T">Interface type</typeparam>
            <param name="scope">This scope instance</param>
            <returns>Object implementing the interface</returns>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimationElement">
            <summary>
            Implementation wrapper for IJsSvgAnimationElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimateElement">
            <summary>
            Implementation wrapper for IJsSvgAnimateElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgSetElement">
            <summary>
            Implementation wrapper for IJsSvgSetElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimateMotionElement">
            <summary>
            Implementation wrapper for IJsSvgAnimateMotionElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgMPathElement">
            <summary>
            Implementation wrapper for IJsSvgMPathElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimateColorElement">
            <summary>
            Implementation wrapper for IJsSvgAnimateColorElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimateTransformElement">
            <summary>
            Implementation wrapper for IJsSvgAnimateTransformElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedBoolean">
            <summary>
            Implementation wrapper for IJsSvgAnimatedBoolean
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedString">
            <summary>
            Implementation wrapper for IJsSvgAnimatedString
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgStringList">
            <summary>
            Implementation wrapper for IJsSvgStringList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedEnumeration">
            <summary>
            Implementation wrapper for IJsSvgAnimatedEnumeration
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedInteger">
            <summary>
            Implementation wrapper for IJsSvgAnimatedInteger
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgNumber">
            <summary>
            Implementation wrapper for IJsSvgNumber
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedNumber">
            <summary>
            Implementation wrapper for IJsSvgAnimatedNumber
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgNumberList">
            <summary>
            Implementation wrapper for IJsSvgNumberList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedNumberList">
            <summary>
            Implementation wrapper for IJsSvgAnimatedNumberList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgLength">
            <summary>
            Implementation wrapper for IJsSvgLength
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedLength">
            <summary>
            Implementation wrapper for IJsSvgAnimatedLength
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgLengthList">
            <summary>
            Implementation wrapper for IJsSvgLengthList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedLengthList">
            <summary>
            Implementation wrapper for IJsSvgAnimatedLengthList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAngle">
            <summary>
            Implementation wrapper for IJsSvgAngle
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedAngle">
            <summary>
            Implementation wrapper for IJsSvgAnimatedAngle
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgColor">
            <summary>
            Implementation wrapper for IJsSvgColor
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgIccColor">
            <summary>
            Implementation wrapper for IJsSvgIccColor
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgRect">
            <summary>
            Implementation wrapper for IJsSvgRect
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedRect">
            <summary>
            Implementation wrapper for IJsSvgAnimatedRect
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgUnitTypes">
            <summary>
            Implementation wrapper for IJsSvgUnitTypes
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgRenderingIntent">
            <summary>
            Implementation wrapper for IJsSvgRenderingIntent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPoint">
            <summary>
            Implementation wrapper for IJsSvgPoint
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPointList">
            <summary>
            Implementation wrapper for IJsSvgPointList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgMatrix">
            <summary>
            Implementation wrapper for IJsSvgMatrix
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgTransform">
            <summary>
            Implementation wrapper for IJsSvgTransform
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgTransformList">
            <summary>
            Implementation wrapper for IJsSvgTransformList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedTransformList">
            <summary>
            Implementation wrapper for IJsSvgAnimatedTransformList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPreserveAspectRatio">
            <summary>
            Implementation wrapper for IJsSvgPreserveAspectRatio
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedPreserveAspectRatio">
            <summary>
            Implementation wrapper for IJsSvgAnimatedPreserveAspectRatio
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedPathData">
            <summary>
            Implementation wrapper for IJsSvgAnimatedPathData
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAnimatedPoints">
            <summary>
            Implementation wrapper for IJsSvgAnimatedPoints
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssRuleList">
            <summary>
            Implementation wrapper for IJsCssRuleList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssRule">
            <summary>
            Implementation wrapper for IJsCssRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssStyleRule">
            <summary>
            Implementation wrapper for IJsCssStyleRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssMediaRule">
            <summary>
            Implementation wrapper for IJsCssMediaRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssFontFaceRule">
            <summary>
            Implementation wrapper for IJsCssFontFaceRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssPageRule">
            <summary>
            Implementation wrapper for IJsCssPageRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssImportRule">
            <summary>
            Implementation wrapper for IJsCssImportRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssCharsetRule">
            <summary>
            Implementation wrapper for IJsCssCharsetRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssUnknownRule">
            <summary>
            Implementation wrapper for IJsCssUnknownRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssStyleDeclaration">
            <summary>
            Implementation wrapper for IJsCssStyleDeclaration
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssValue">
            <summary>
            Implementation wrapper for IJsCssValue
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssPrimitiveValue">
            <summary>
            Implementation wrapper for IJsCssPrimitiveValue
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssValueList">
            <summary>
            Implementation wrapper for IJsCssValueList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsRgbColor">
            <summary>
            Implementation wrapper for IJsRgbColor
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsRect">
            <summary>
            Implementation wrapper for IJsRect
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCounter">
            <summary>
            Implementation wrapper for IJsCounter
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsElementCssInlineStyle">
            <summary>
            Implementation wrapper for IJsElementCssInlineStyle
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCssStyleSheet">
            <summary>
            Implementation wrapper for IJsCssStyleSheet
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsViewCss">
            <summary>
            Implementation wrapper for IJsViewCss
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsDocumentCss">
            <summary>
            Implementation wrapper for IJsDocumentCss
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsDomImplementationCss">
            <summary>
            Implementation wrapper for IJsDomImplementationCss
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsDomTimeStamp">
            <summary>
            IJsDomTimeStamp
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsDomImplementation">
            <summary>
            Implementation wrapper for IJsDomImplementation
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsNode">
            <summary>
            Implementation wrapper for IJsNode
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsNodeList">
            <summary>
            Implementation wrapper for IJsNodeList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsNamedNodeMap">
            <summary>
            Implementation wrapper for IJsNamedNodeMap
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCharacterData">
            <summary>
            Implementation wrapper for IJsCharacterData
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsAttr">
            <summary>
            Implementation wrapper for IJsAttr
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsElement">
            <summary>
            Implementation wrapper for IJsElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsText">
            <summary>
            Implementation wrapper for IJsText
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsComment">
            <summary>
            Implementation wrapper for IJsComment
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsCDataSection">
            <summary>
            Implementation wrapper for IJsCDataSection
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsDocumentType">
            <summary>
            Implementation wrapper for IJsDocumentType
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsNotation">
            <summary>
            Implementation wrapper for IJsNotation
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsEntity">
            <summary>
            Implementation wrapper for IJsEntity
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsEntityReference">
            <summary>
            Implementation wrapper for IJsEntityReference
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsProcessingInstruction">
            <summary>
            Implementation wrapper for IJsProcessingInstruction
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsDocumentFragment">
            <summary>
            Implementation wrapper for IJsDocumentFragment
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsDocument">
            <summary>
            Implementation wrapper for IJsDocument
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsEventTarget">
            <summary>
            Implementation wrapper for IJsEventTarget
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsEventListener">
            <summary>
            Implementation wrapper for IJsEventListener
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsEvent">
            <summary>
            Implementation wrapper for IJsEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsDocumentEvent">
            <summary>
            Implementation wrapper for IJsDocumentEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsUiEvent">
            <summary>
            Implementation wrapper for IJsUiEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsMouseEvent">
            <summary>
            Implementation wrapper for IJsMouseEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsMutationEvent">
            <summary>
            Implementation wrapper for IJsMutationEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgClipPathElement">
            <summary>
            Implementation wrapper for IJsSvgClipPathElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgMaskElement">
            <summary>
            Implementation wrapper for IJsSvgMaskElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFilterElement">
            <summary>
            Implementation wrapper for IJsSvgFilterElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFilterPrimitiveStandardAttributes">
            <summary>
            Implementation wrapper for IJsSvgFilterPrimitiveStandardAttributes
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEBlendElement">
            <summary>
            Implementation wrapper for IJsSvgFEBlendElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEColorMatrixElement">
            <summary>
            Implementation wrapper for IJsSvgFEColorMatrixElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEComponentTransferElement">
            <summary>
            Implementation wrapper for IJsSvgFEComponentTransferElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgComponentTransferFunctionElement">
            <summary>
            Implementation wrapper for IJsSvgComponentTransferFunctionElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEFuncRElement">
            <summary>
            Implementation wrapper for IJsSvgFEFuncRElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEFuncGElement">
            <summary>
            Implementation wrapper for IJsSvgFEFuncGElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEFuncBElement">
            <summary>
            Implementation wrapper for IJsSvgFEFuncBElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEFuncAElement">
            <summary>
            Implementation wrapper for IJsSvgFEFuncAElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFECompositeElement">
            <summary>
            Implementation wrapper for IJsSvgFECompositeElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEConvolveMatrixElement">
            <summary>
            Implementation wrapper for IJsSvgFEConvolveMatrixElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEDiffuseLightingElement">
            <summary>
            Implementation wrapper for IJsSvgFEDiffuseLightingElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEDistantLightElement">
            <summary>
            Implementation wrapper for IJsSvgFEDistantLightElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEPointLightElement">
            <summary>
            Implementation wrapper for IJsSvgFEPointLightElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFESpotLightElement">
            <summary>
            Implementation wrapper for IJsSvgFESpotLightElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEDisplacementMapElement">
            <summary>
            Implementation wrapper for IJsSvgFEDisplacementMapElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEFloodElement">
            <summary>
            Implementation wrapper for IJsSvgFEFloodElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEGaussianBlurElement">
            <summary>
            Implementation wrapper for IJsSvgFEGaussianBlurElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEImageElement">
            <summary>
            Implementation wrapper for IJsSvgFEImageElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEMergeElement">
            <summary>
            Implementation wrapper for IJsSvgFEMergeElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEMergeNodeElement">
            <summary>
            Implementation wrapper for IJsSvgFEMergeNodeElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEMorphologyElement">
            <summary>
            Implementation wrapper for IJsSvgFEMorphologyElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFEOffsetElement">
            <summary>
            Implementation wrapper for IJsSvgFEOffsetElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFESpecularLightingElement">
            <summary>
            Implementation wrapper for IJsSvgFESpecularLightingElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFETileElement">
            <summary>
            Implementation wrapper for IJsSvgFETileElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFETurbulenceElement">
            <summary>
            Implementation wrapper for IJsSvgFETurbulenceElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsGetSvgDocument">
            <summary>
            Implementation wrapper for IJsGetSvgDocument
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgCursorElement">
            <summary>
            Implementation wrapper for IJsSvgCursorElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgViewElement">
            <summary>
            Implementation wrapper for IJsSvgViewElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgEvent">
            <summary>
            Implementation wrapper for IJsSvgEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgZoomEvent">
            <summary>
            Implementation wrapper for IJsSvgZoomEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgDefinitionSrcElement">
            <summary>
            Implementation wrapper for IJsSvgDefinitionSrcElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgMetadataElement">
            <summary>
            Implementation wrapper for IJsSvgMetadataElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgForeignObjectElement">
            <summary>
            Implementation wrapper for IJsSvgForeignObjectElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgElementInstance">
            <summary>
            Implementation wrapper for IJsSvgElementInstance
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgElementInstanceList">
            <summary>
            Implementation wrapper for IJsSvgElementInstanceList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgColorProfileElement">
            <summary>
            Implementation wrapper for IJsSvgColorProfileElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgColorProfileRule">
            <summary>
            Implementation wrapper for IJsSvgColorProfileRule
            </summary>
        </member>
        <member name="M:SharpVectors.Scripting.JsObject.CreateWrapper``1(System.Object,SharpVectors.Scripting.ISvgScriptEngine)">
            <summary>
            Creates a new scriptable wrapper for the specified object. Use this function instead
            of calling the JsObject constructor.
            </summary>
            <param name="wrappableObject">The object to wrap. It's type will be used as a key
            in a lookup for creating the correct wrappable type.</param>
            <returns>A new scriptable object that has been created with a type corresponding
            to the wrappableObject's type.</returns>
        </member>
        <member name="M:SharpVectors.Scripting.JsObject.RemoveWrapper(System.Object,SharpVectors.Scripting.ISvgScriptEngine)">
            <summary>
            Removes the wrapper and base object key value pair. This function is called by the JsObject destructor.
            </summary>
            <param name="wrappableObject">The key object that was wrapped, to be removed.</param>
        </member>
        <member name="M:SharpVectors.Scripting.JsObject.InitializeWrapperTypes">
            <summary>
            Builds the wrapper type table for static lookups
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsObject`1">
            <summary>
            Base class for all wrappers
            </summary>
        </member>
        <member name="M:SharpVectors.Scripting.JsObject`1.#ctor">
            <summary>
            Base constructor, if used you must assign the baseObject after the call.
            This constructor should only be called internally. Higher order classes should construct
            new wrappers using the CreateWrapper function to allow for type lookups.
            </summary>
        </member>
        <member name="M:SharpVectors.Scripting.JsObject`1.#ctor(`0,SharpVectors.Scripting.ISvgScriptEngine)">
            <summary>
            Base constructor, accepts the baseObject that will be wrapped with all inherited calls. 
            This constructor should only be called internally. Higher order classes should construct
            new wrappers using the CreateWrapper function to allow for type lookups.
            </summary>
            <param name="baseObject">The object to wrap with a scriptable object.</param>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSeg">
            <summary>
            Implementation wrapper for IJsSvgPathSeg
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSeg`1">
            <summary>
            Implementation wrapper for IJsSvgPathSeg
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegClosePath">
            <summary>
            Implementation wrapper for IJsSvgPathSegClosePath
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegMovetoAbs">
            <summary>
            Implementation wrapper for IJsSvgPathSegMovetoAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegMovetoRel">
            <summary>
            Implementation wrapper for IJsSvgPathSegMovetoRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegLinetoAbs">
            <summary>
            Implementation wrapper for IJsSvgPathSegLinetoAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegLinetoRel">
            <summary>
            Implementation wrapper for IJsSvgPathSegLinetoRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegCurvetoCubicAbs">
            <summary>
            Implementation wrapper for IJsSvgPathSegCurvetoCubicAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegCurvetoCubicRel">
            <summary>
            Implementation wrapper for IJsSvgPathSegCurvetoCubicRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegCurvetoQuadraticAbs">
            <summary>
            Implementation wrapper for IJsSvgPathSegCurvetoQuadraticAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegCurvetoQuadraticRel">
            <summary>
            Implementation wrapper for IJsSvgPathSegCurvetoQuadraticRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegArcAbs">
            <summary>
            Implementation wrapper for IJsSvgPathSegArcAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegArcRel">
            <summary>
            Implementation wrapper for IJsSvgPathSegArcRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegLinetoHorizontalAbs">
            <summary>
            Implementation wrapper for IJsSvgPathSegLinetoHorizontalAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegLinetoHorizontalRel">
            <summary>
            Implementation wrapper for IJsSvgPathSegLinetoHorizontalRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegLinetoVerticalAbs">
            <summary>
            Implementation wrapper for IJsSvgPathSegLinetoVerticalAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegLinetoVerticalRel">
            <summary>
            Implementation wrapper for IJsSvgPathSegLinetoVerticalRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegCurvetoCubicSmoothAbs">
            <summary>
            Implementation wrapper for IJsSvgPathSegCurvetoCubicSmoothAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegCurvetoCubicSmoothRel">
            <summary>
            Implementation wrapper for IJsSvgPathSegCurvetoCubicSmoothRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegCurvetoQuadraticSmoothAbs">
            <summary>
            Implementation wrapper for IJsSvgPathSegCurvetoQuadraticSmoothAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegCurvetoQuadraticSmoothRel">
            <summary>
            Implementation wrapper for IJsSvgPathSegCurvetoQuadraticSmoothRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathSegList">
            <summary>
            Implementation wrapper for IJsSvgPathSegList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPathElement">
            <summary>
            Implementation wrapper for IJsSvgPathElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgRectElement">
            <summary>
            Implementation wrapper for IJsSvgRectElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgCircleElement">
            <summary>
            Implementation wrapper for IJsSvgCircleElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgEllipseElement">
            <summary>
            Implementation wrapper for IJsSvgEllipseElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgLineElement">
            <summary>
            Implementation wrapper for IJsSvgLineElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPolylineElement">
            <summary>
            Implementation wrapper for IJsSvgPolylineElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPolygonElement">
            <summary>
            Implementation wrapper for IJsSvgPolygonElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsTimeEvent">
            <summary>
            Implementation wrapper for IJsTimeEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsStyleSheet">
            <summary>
            Implementation wrapper for IJsStyleSheet
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsStyleSheetList">
            <summary>
            Implementation wrapper for IJsStyleSheetList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsMediaList">
            <summary>
            Implementation wrapper for IJsMediaList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsLinkStyle">
            <summary>
            Implementation wrapper for IJsLinkStyle
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsDocumentStyle">
            <summary>
            Implementation wrapper for IJsDocumentStyle
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgElement">
            <summary>
            Implementation wrapper for IJsSvgElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgStylable">
            <summary>
            Implementation wrapper for IJsSvgStylable
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgLocatable">
            <summary>
            Implementation wrapper for IJsSvgLocatable
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgTransformable">
            <summary>
            Implementation wrapper for IJsSvgTransformable
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgTests">
            <summary>
            Implementation wrapper for IJsSvgTests
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgLangSpace">
            <summary>
            Implementation wrapper for IJsSvgLangSpace
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgExternalResourcesRequired">
            <summary>
            Implementation wrapper for IJsSvgExternalResourcesRequired
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFitToViewBox">
            <summary>
            Implementation wrapper for IJsSvgFitToViewBox
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgZoomAndPan">
            <summary>
            Implementation wrapper for IJsSvgZoomAndPan
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgViewSpec">
            <summary>
            Implementation wrapper for IJsSvgViewSpec
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgUriReference">
            <summary>
            Implementation wrapper for IJsSvgUriReference
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgCssRule">
            <summary>
            Implementation wrapper for IJsSvgCssRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgDocument">
            <summary>
            Implementation wrapper for IJsSvgDocument
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgSvgElement">
            <summary>
            Implementation wrapper for IJsSvgSvgElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgGElement">
            <summary>
            Implementation wrapper for IJsSvgGElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgDefsElement">
            <summary>
            Implementation wrapper for IJsSvgDefsElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgDescElement">
            <summary>
            Implementation wrapper for IJsSvgDescElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgTitleElement">
            <summary>
            Implementation wrapper for IJsSvgTitleElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgSymbolElement">
            <summary>
            Implementation wrapper for IJsSvgSymbolElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgUseElement">
            <summary>
            Implementation wrapper for IJsSvgUseElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgImageElement">
            <summary>
            Implementation wrapper for IJsSvgImageElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgSwitchElement">
            <summary>
            Implementation wrapper for IJsSvgSwitchElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgStyleElement">
            <summary>
            Implementation wrapper for IJsSvgStyleElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPaint">
            <summary>
            Implementation wrapper for IJsSvgPaint
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgMarkerElement">
            <summary>
            Implementation wrapper for IJsSvgMarkerElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgGradientElement">
            <summary>
            Implementation wrapper for IJsSvgGradientElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgLinearGradientElement">
            <summary>
            Implementation wrapper for IJsSvgLinearGradientElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgRadialGradientElement">
            <summary>
            Implementation wrapper for IJsSvgRadialGradientElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgStopElement">
            <summary>
            Implementation wrapper for IJsSvgStopElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgPatternElement">
            <summary>
            Implementation wrapper for IJsSvgPatternElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAElement">
            <summary>
            Implementation wrapper for IJsSvgAElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgScriptElement">
            <summary>
            Implementation wrapper for IJsSvgScriptElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgTextContentElement">
            <summary>
            Implementation wrapper for IJsSvgTextContentElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgTextPositioningElement">
            <summary>
            Implementation wrapper for IJsSvgTextPositioningElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgTextElement">
            <summary>
            Implementation wrapper for IJsSvgTextElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgTSpanElement">
            <summary>
            Implementation wrapper for IJsSvgTSpanElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgTRefElement">
            <summary>
            Implementation wrapper for IJsSvgTRefElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgTextPathElement">
            <summary>
            Implementation wrapper for IJsSvgTextPathElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAltGlyphElement">
            <summary>
            Implementation wrapper for IJsSvgAltGlyphElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAltGlyphDefElement">
            <summary>
            Implementation wrapper for IJsSvgAltGlyphDefElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgAltGlyphItemElement">
            <summary>
            Implementation wrapper for IJsSvgAltGlyphItemElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgGlyphRefElement">
            <summary>
            Implementation wrapper for IJsSvgGlyphRefElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFontElement">
            <summary>
            Implementation wrapper for IJsSvgFontElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgGlyphElement">
            <summary>
            Implementation wrapper for IJsSvgGlyphElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgMissingGlyphElement">
            <summary>
            Implementation wrapper for IJsSvgMissingGlyphElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgHKernElement">
            <summary>
            Implementation wrapper for IJsSvgHKernElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgVKernElement">
            <summary>
            Implementation wrapper for IJsSvgVKernElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFontFaceElement">
            <summary>
            Implementation wrapper for IJsSvgFontFaceElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFontFaceSrcElement">
            <summary>
            Implementation wrapper for IJsSvgFontFaceSrcElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFontFaceUriElement">
            <summary>
            Implementation wrapper for IJsSvgFontFaceUriElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFontFaceFormatElement">
            <summary>
            Implementation wrapper for IJsSvgFontFaceFormatElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgFontFaceNameElement">
            <summary>
            Implementation wrapper for IJsSvgFontFaceNameElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsAbstractView">
            <summary>
            Implementation wrapper for IJsAbstractView
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsDocumentView">
            <summary>
            Implementation wrapper for IJsDocumentView
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.JsSvgWindow">
            <summary>
            Implementation wrapper for IJsSvgWindow
            </summary>
        </member>
        <member name="T:SharpVectors.Woffs.WoffBuffer">
            <summary>
            A memory buffer with support for Big-Endian based data types conversions (bytes to/from integers). 
            </summary>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.Read(System.IO.Stream,System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Reads a number of characters from the current source Stream and 
            writes the data to the target array at the specified index.
            </summary>
            <param name="sourceStream">
            The source Stream to read from.
            </param>
            <param name="target">
            Contains the array of characteres read from the source Stream.
            </param>
            <param name="start">
            The starting index of the target array.
            </param>
            <param name="count">
            The maximum number of characters to read from the source Stream.
            </param>
            <returns>
            The number of characters read. The number will be less 
            than or equal to count depending on the data available 
            in the source Stream. Returns -1 if the end of the stream 
            is reached.
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.Read(System.IO.TextReader,System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Reads a number of characters from the current source TextReader 
            and writes the data to the target array at the specified index.
            </summary>
            <param name="sourceTextReader">
            The source TextReader to read from
            </param>
            <param name="target">
            Contains the array of characteres read from the source TextReader.
            </param>
            <param name="start">
            The starting index of the target array.
            </param>
            <param name="count">
            The maximum number of characters to read from the 
            source TextReader.
            </param>
            <returns>
            The number of characters read. The number will be less than or 
            equal to count depending on the data available in the source 
            TextReader. Returns -1 if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadUIntBase128(System.IO.Stream,System.UInt32@)">
            <summary>
            <c>UIntBase128</c> is a different variable length encoding of unsigned integers, 
            suitable for values up to <c>2^32 - 1</c>.
            </summary>
            <param name="stream">The font stream.</param>
            <param name="result">The <c>UIntBase128</c> encoded number</param>
            <returns></returns>
            <remarks>
            <para>
            A <c>UIntBase128</c>  encoded number is a sequence of bytes for which the most significant bit is set 
            for all but the last byte, and clear for the last byte. The number itself is base <c>128</c> 
            encoded in the lower 7 bits of each byte. 
            </para>
            <para>
            Thus, a decoding procedure for a <c>UIntBase128</c> is: 
            </para>
            <para>
            start with value = 0. Consume a byte, setting value = old value times 128 + (byte bitwise-and 127). 
            Repeat last step until the most significant bit of byte is false.
            </para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.Read255UInt16(System.IO.Stream)">
            <summary>
            Read a <c>255UInt16</c>, which is a variable-length encoding of an unsigned integer in the range 
            <c>0</c> to <c>65535</c> inclusive.
            </summary>
            <returns>A variable-length encoding of an unsigned short.</returns>
            <remarks>
            This data type is intended to be used as intermediate representation of various font values, 
            which are typically expressed as UInt16 but represent relatively small values.
            </remarks>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.Skip(System.IO.Stream,System.Int32)">
            <summary>
            Try to skip bytes in the input stream and return the actual 
            number of bytes skipped.
            </summary>
            <param name="stream">
            Input stream that will be used to skip the bytes.
            </param>
            <param name="skipBytes">
            Number of bytes to be skipped.
            </param>
            <returns>
            Actual number of bytes skipped.
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.Skip(System.IO.StreamReader,System.Int64)">
            <summary>Skips a given number of characters into a given Stream.</summary>
            <param name="stream">The number of caracters to skip.</param>
            <param name="number">The stream in which the skips are done.</param>
            <returns>The number of characters skipped.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.WriteBytes(System.String,System.IO.Stream)">
            <summary>
            Writes the data to the specified file stream
            </summary>
            <param name="data">Data to write</param>
            <param name="fileStream">File to write to</param>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.WriteChars(System.String,System.IO.Stream)">
            <summary>
            Writes the received string to the file stream
            </summary>
            <param name="data">String of information to write</param>
            <param name="fileStream">File to write to</param>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadInt16LE(System.Byte[],System.Int32)">
            <summary>Reads a little endian small integer.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the int resides.</param>
            <returns>The int read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadInt16BE(System.Byte[],System.Int32)">
            <summary>Reads a big endian small integer.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the int resides.</param>
            <returns>The int read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadUInt16LE(System.Byte[],System.Int32)">
            <summary>Reads a little endian small integer.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the int resides.</param>
            <returns>The int read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadUInt16BE(System.Byte[],System.Int32)">
            <summary>Reads a big endian small integer.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the int resides.</param>
            <returns>The int read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadInt32LE(System.Byte[],System.Int32)">
            <summary>Reads a little endian integer.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the int resides.</param>
            <returns>The int read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadInt32BE(System.Byte[],System.Int32)">
            <summary>Reads a big endian integer.</summary>
            <param name="b">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the int resides.</param>
            <returns>The int read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadUInt32LE(System.Byte[],System.Int32)">
            <summary>Reads a little endian integer.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the int resides.</param>
            <returns>The int read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadUInt32BE(System.Byte[],System.Int32)">
            <summary>Reads a big endian integer.</summary>
            <param name="b">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the int resides.</param>
            <returns>The int read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadInt64LE(System.Byte[],System.Int32)">
            <summary>Reads a little endian 8 byte integer.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the long resides.</param>
            <returns>The long read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadInt64BE(System.Byte[],System.Int32)">
            <summary>Reads a little endian 8 byte integer.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the long resides.</param>
            <returns>The long read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadUInt64LE(System.Byte[],System.Int32)">
            <summary>Reads a little endian 8 byte integer.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the long resides.</param>
            <returns>The long read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadUInt64BE(System.Byte[],System.Int32)">
            <summary>Reads a little endian 8 byte integer.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the long resides.</param>
            <returns>The long read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadSingleLE(System.Byte[],System.Int32)">
            <summary>Reads a little endian float.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the float resides.</param>
            <returns>The float read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadSingleBE(System.Byte[],System.Int32)">
            <summary>Reads a big endian float.</summary>
            <param name="buffer">The raw data buffer</param>
            <param name="offset">The offset into the buffer where the float resides</param>
            <returns>The float read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadDoubleLE(System.Byte[],System.Int32)">
            <summary>Reads a little endian double.</summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the double resides.</param>
            <returns>The double read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.ReadDoubleBE(System.Byte[],System.Int32)">
            <summary>
            Reads a big endian double.
            </summary>
            <param name="buffer">The raw data buffer.</param>
            <param name="offset">The offset into the buffer where the double resides.</param>
            <returns>The double read from the buffer at the offset location.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.WriteInt16LE(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given short to the given buffer at the given location
            in big endian format.
            </summary>
            <param name="buffer">
            the data buffer.
            </param>
            <param name="offset">
            the offset into the buffer where writing should occur.
            </param>
            <param name="value">
            the short to write.
            </param>
            <returns> 
            the number of bytes written.
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.WriteInt16BE(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given short to the given buffer at the given location
            in big endian format.
            </summary>
            <param name="buffer">
            the data buffer.
            </param>
            <param name="offset">
            the offset into the buffer where writing should occur.
            </param>
            <param name="value">
            the short to write.
            </param>
            <returns> 
            the number of bytes written.
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.WriteInt32LE(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given integer to the given buffer at the given location
            in little endian format.
            </summary>
            <param name="buffer">
            the data buffer
            </param>
            <param name="offset">
            the offset into the buffer where writing should occur
            </param>
            <param name="value">
            the integer to write
            </param>
            <returns> 
            the number of bytes written.
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.WriteInt32BE(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given integer to the given buffer at the given location
            in big endian format.
            </summary>
            <param name="buffer">
            the data buffer.
            </param>
            <param name="offset">
            the offset into the buffer where writing should occur.
            </param>
            <param name="value">
            the integer to write.
            </param>
            <returns> 
            the number of bytes written.
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.WriteInt64LE(System.Byte[],System.Int32,System.Int64)">
            <summary>
            Writes the given long to the given buffer at the given location
            in little endian format.
            </summary>
            <param name="buffer">
            the data buffer
            </param>
            <param name="offset">
            the offset into the buffer where writing should occur
            </param>
            <param name="value">
            the long to write
            </param>
            <returns> 
            the number of bytes written
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.WriteInt64BE(System.Byte[],System.Int32,System.Int64)">
            <summary>
            Writes the given long to the given buffer at the given location
            in big endian format.
            </summary>
            <param name="buffer">
            the data buffer
            </param>
            <param name="offset">
            the offset into the buffer where writing should occur.
            </param>
            <param name="value">
            the long to write.
            </param>
            <returns> 
            the number of bytes written.
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.WriteDoubleLE(System.Byte[],System.Int32,System.Double)">
            <summary>
            Writes the given double to the given buffer at the given location
            in little endian format.
            </summary>
            <param name="buffer">
            the data buffer
            </param>
            <param name="offset">
            the offset into the buffer where writing should occur
            </param>
            <param name="value">
            the double to write
            </param>
            <returns> 
            the number of bytes written
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffBuffer.WriteDoubleBE(System.Byte[],System.Int32,System.Double)">
            <summary>
            Writes the given double to the given buffer at the given location
            in big endian format.
            </summary>
            <param name="buffer">
            the data buffer
            </param>
            <param name="offset">
            the offset into the buffer where writing should occur
            </param>
            <param name="value">
            the double to write
            </param>
            <returns> 
            the number of bytes written
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffDecoder.WriteWoff2Collection(System.IO.Stream)">
            <summary>
            This writes the transformed WOFF2 font collection data to the TTC OpenType.
            </summary>
            <param name="stream"></param>
            <returns></returns>
            <remarks>
            The strategy is to produce a layout similar to the simple layout used in the WOFF2 data structure and
            still confirm to the OpenType format.
            <code>
            <![CDATA[
             +---------------------+
             |      TTC Header     |
             +---------------------+
             | All TTC Directories |
             +---------------------+
             |  All the Table Data |
             +---------------------+
            ]]>
            </code>
            </remarks>
        </member>
        <member name="F:SharpVectors.Woffs.WoffFont.CollectionHeader.TtcTag">
            <summary>
            Font Collection ID string: 'ttcf'
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffFont.CollectionHeader.Version">
            <summary>
            The Version of the TTC Header in the original font.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffFont.CollectionHeader.MajorVersion">
            <summary>
            Major version of the TTC Header.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffFont.CollectionHeader.MinorVersion">
            <summary>
            Minor version of the TTC Header.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffFont.CollectionHeader.NumFonts">
            <summary>
            The number of fonts in the collection.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffFont.CollectionHeader.DsigTag">
            <summary>
            Tag indicating that a DSIG table exists, 0x44534947 ('DSIG') (null if no signature)
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffFont.CollectionHeader.DsigLength">
            <summary>
            The length (in bytes) of the DSIG table (null if no signature)
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffFont.CollectionHeader.DsigOffset">
            <summary>
            The offset (in bytes) of the DSIG table from the beginning of the TTC file (null if no signature)
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffFont.CollectionFontEntry.NumTables">
            <summary>
            The number of tables in this font
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffFont.CollectionFontEntry.Flavor">
            <summary>
            The "sfnt version" of the font
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffFont.CollectionFontEntry.TableIndices">
            <summary>
            The index identifying an entry in the Table Directory for each table in this font 
            (where the index of the first Table Directory entry is zero.)
            </summary>
        </member>
        <member name="M:SharpVectors.Woffs.WoffGlyph.PackPoints(SharpVectors.Woffs.WoffIndexer,System.UInt32,System.UInt32@)">
            <summary>
            This function stores just the point data. Coordinates packing algorithm based on the Google/woff2 sources.
            </summary>
            <param name="writer"></param>
            <param name="pointsCapacity"></param>
            <param name="pointsLength"></param>
            <returns>Returns true on success.</returns>
        </member>
        <member name="T:SharpVectors.Woffs.WoffHeader">
            <summary>
            File header with basic font type and version, along with offsets to metadata and private data blocks.
            </summary>
            <seealso href="https://www.w3.org/TR/WOFF/">WOFF File Format 1.0</seealso>
            <seealso href="https://www.w3.org/TR/WOFF2/">WOFF File Format 2.0</seealso>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._signature">
            <summary>
            The Woff 1 or 2 signature
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._flavor">
            <summary>
            The "sfnt version" of the input font.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._length">
            <summary>
            Total size of the WOFF file.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._numTables">
            <summary>
            Number of entries in directory of font tables.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._reserved">
            <summary>
            Reserved; set to zero.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._totalSfntSize">
            <summary>
            Total size needed for the uncompressed font data, including the sfnt header, 
            directory, and font tables (including padding).
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._totalCompressedSize">
            <summary>
            WOFF2 only: Total length of the compressed data block.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._majorVersion">
            <summary>
            Major version of the WOFF file.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._minorVersion">
            <summary>
            Minor version of the WOFF file.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._metaOffset">
            <summary>
            Offset to metadata block, from beginning of WOFF file.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._metaLength">
            <summary>
            Length of compressed metadata block.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._metaOrigLength">
            <summary>
            Uncompressed size of metadata block.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._privateOffset">
            <summary>
            Offset to private data block, from beginning of WOFF file.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._privateLength">
            <summary>
            Length of private data block.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffHeader._woffVersion">
            <summary>
            The format version of the WOFF file. Possible values are 1 or 2.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.WoffVersion">
            <summary>
            Gets the <c>W3C</c> Specifications Format Version of the WOFF file.
            </summary>
            <value>Possible values are <c>1</c> or <c>2</c>, for the Web Open Font Format 1 (WOFF1) and 2 (WOFF2).</value>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.Signature">
            <summary>
            Gets or set the signature field of the WOFF format header. The value is <c>0x774F4646 or 'wOFF'</c>.
            </summary>
            <value>
            The signature field in the WOFF header must contain the "magic number" <c>0x774F4646</c>. 
            If the field does not contain this value, user agents MUST reject the file as invalid.
            </value>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.Flavor">
            <summary>
            The "sfnt version" of the input font.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.Length">
            <summary>
            Total size of the WOFF file.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.NumTables">
            <summary>
            Number of entries in directory of font tables.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.Reserved">
            <summary>
            Reserved; set to zero.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.TotalSfntSize">
            <summary>
            Total size needed for the uncompressed font data, including the sfnt header, 
            directory, and font tables (including padding).
            </summary>
            <remarks>
            <para>WOFF 2</para>
            <para>
            The <see cref="P:SharpVectors.Woffs.WoffHeader.TotalSfntSize"/> value in the WOFF2 Header is intended to be used for 
            reference purposes only. It may represent the size of the uncompressed input font file, 
            but if the transformed 'glyf' and 'loca' tables are present, the uncompressed size of 
            the reconstructed tables and the total decompressed font size may differ substantially 
            from the original total size specified in the WOFF2 Header.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.MajorVersion">
            <summary>
            Major version of the WOFF file.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.MinorVersion">
            <summary>
            Minor version of the WOFF file.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.MetaOffset">
            <summary>
            Offset to metadata block, from beginning of WOFF file.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.MetaLength">
            <summary>
            Length of compressed metadata block.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.MetaOrigLength">
            <summary>
            Uncompressed size of metadata block.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.PrivateOffset">
            <summary>
            Offset to private data block, from beginning of WOFF file.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffHeader.PrivateLength">
            <summary>
            Length of private data block.
            </summary>
        </member>
        <member name="T:SharpVectors.Woffs.WoffIndexer">
            <summary>
            This is a writer wrapper, providing index access to the buffer (usually a fixed buffer).
            </summary>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Woffs.WoffIndexer"/> class with an expandable
            capacity initialized to zero.
            </summary>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Woffs.WoffIndexer"/> class with a non-resizable
            capacity initialized as specified.
            </summary>
            <param name="capacity">The initial size of the internal array in bytes.</param>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.#ctor(System.Byte[])">
            <summary>
             Initializes a new non-resizable instance of the <see cref="T:SharpVectors.Woffs.WoffIndexer"/> class
             based on the specified byte array.
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create the current stream.</param>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new non-resizable instance of the <see cref="T:SharpVectors.Woffs.WoffIndexer"/> class
            based on the specified region (index) of a byte array.
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream.</param>
            <param name="index">The index into buffer at which the stream begins.</param>
            <param name="count">The length of the stream in bytes.</param>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffIndexer.Offset">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
            <value>The current position within the stream.</value>
        </member>
        <member name="P:SharpVectors.Woffs.WoffIndexer.Length">
            <summary>
             Gets the length of the stream in bytes.
            </summary>
            <value>The length of the stream in bytes.</value>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.GetBuffer">
            <summary>
            Returns the array of unsigned bytes from which this stream was created.
            </summary>
            <returns>
            The byte array from which this stream was created, or the underlying array if
            a byte array was not provided to the System.IO.MemoryStream constructor during
            construction of the current instance.
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.WriteInt64(System.Int64,System.UInt32@)">
            <summary>
            Writes an eight-byte signed integer to the current stream and advances the stream
            position by eight bytes.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.WriteUInt64(System.UInt64,System.UInt32@)">
            <summary>
            Writes an eight-byte unsigned integer to the current stream and advances the
            stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte unsigned integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.WriteInt32(System.Int32,System.UInt32@)">
            <summary>
            Writes a four-byte signed integer to the current stream and advances the stream
            position by four bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.WriteUInt32(System.UInt32,System.UInt32@)">
            <summary>
            Writes a four-byte unsigned integer to the current stream and advances the stream
            position by four bytes.
            </summary>
            <param name="value">The four-byte unsigned integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.WriteInt16(System.Int16,System.UInt32@)">
            <summary>
            Writes a two-byte signed integer to the current stream and advances the stream
            position by two bytes.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.WriteInt16(System.Int32,System.UInt32@)">
            <summary>
            Writes a two-byte signed integer to the current stream and advances the stream
            position by two bytes.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.WriteUInt16(System.UInt16,System.UInt32@)">
            <summary>
            Writes a two-byte unsigned integer to the current stream and advances the stream
            position by two bytes.
            </summary>
            <param name="value">The two-byte unsigned integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.Write(System.SByte,System.UInt32@)">
            <summary>
            Writes a signed byte to the current stream and advances the stream position by one byte.
            </summary>
            <param name="value">The signed byte to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.Write(System.SByte[],System.UInt32@)">
            <summary>
            Writes a signed byte array to the underlying stream.
            </summary>
            <param name="buffer">A signed byte array containing the data to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.Write(System.SByte[],System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Writes a region of a signed byte array to the current stream.
            </summary>
            <param name="buffer">A signed byte array containing the data to write.</param>
            <param name="index">The starting point in buffer at which to begin writing.</param>
            <param name="count">The number of signed bytes to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.Write(System.Byte,System.UInt32@)">
            <summary>
            Writes an unsigned byte to the current stream and advances the stream position by one byte.
            </summary>
            <param name="value">The unsigned byte to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.Write(System.Byte[],System.UInt32@)">
            <summary>
            Writes a byte array to the underlying stream.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffIndexer.Write(System.Byte[],System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Writes a region of a byte array to the current stream.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <param name="index">The starting point in buffer at which to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="F:SharpVectors.Woffs.WoffMetadata._offset">
            <summary>
            Offset to metadata block, from beginning of WOFF file.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffMetadata._length">
            <summary>
            Length of compressed metadata block.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffMetadata._origLength">
            <summary>
            Uncompressed size of metadata block.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffPrivateData._offset">
            <summary>
            Offset to private data block, from beginning of WOFF file.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffPrivateData._length">
            <summary>
            Length of private data block.
            </summary>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.#ctor(SharpVectors.Woffs.WoffBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Woffs.WoffReader"/> class with the specified bytes stream.
            </summary>
            <param name="buffer">A object containing the bytes stream.</param>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Woffs.WoffReader"/> class with the specified bytes stream.
            </summary>
            <param name="buffer">A object containing the bytes stream.</param>
        </member>
        <member name="P:SharpVectors.Woffs.WoffReader.Offset">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value>The current position within the stream.</value>
        </member>
        <member name="P:SharpVectors.Woffs.WoffReader.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value>A signed integer value representing the length of the stream in bytes.</value>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.ReadByte">
            <summary>
             Reads a unsigned byte from this stream and advances the current position of the
             stream by one byte.
            </summary>
            <returns>A unsigned byte read from the current stream.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.ReadSByte">
            <summary>
             Reads a signed byte from this stream and advances the current position of the
             stream by one byte.
            </summary>
            <returns>A signed byte read from the current stream.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.ReadInt16">
            <summary>
             Reads a 2-byte signed integer from the current stream and advances the current
             position of the stream by two bytes.
            </summary>
            <returns>A 2-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.ReadUInt16">
            <summary>
             Reads a 2-byte unsigned integer from the current stream using little-endian encoding
             and advances the position of the stream by two bytes.
            </summary>
            <returns>A 2-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.ReadInt32">
            <summary>
             Reads a 4-byte signed integer from the current stream and advances the current
             position of the stream by four bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.ReadUInt32">
            <summary>
             Reads a 4-byte unsigned integer from the current stream and advances the position
             of the stream by four bytes.
            </summary>
            <returns>A 4-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.ReadInt64">
            <summary>
             Reads an 8-byte signed integer from the current stream and advances the current
             position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.ReadUInt64">
            <summary>
             Reads an 8-byte unsigned integer from the current stream and advances the position
             of the stream by eight bytes.
            </summary>
            <returns> An 8-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.ReadUIntBase128(System.UInt32@)">
            <summary>
            <c>UIntBase128</c> is a different variable length encoding of unsigned integers, 
            suitable for values up to <c>2^32 - 1</c>.
            </summary>
            <param name="stream">The font stream.</param>
            <param name="result">The <c>UIntBase128</c> encoded number</param>
            <returns></returns>
            <remarks>
            <para>
            A <c>UIntBase128</c>  encoded number is a sequence of bytes for which the most significant bit is set 
            for all but the last byte, and clear for the last byte. The number itself is base <c>128</c> 
            encoded in the lower 7 bits of each byte. 
            </para>
            <para>
            Thus, a decoding procedure for a <c>UIntBase128</c> is: 
            </para>
            <para>
            start with value = 0. Consume a byte, setting value = old value times 128 + (byte bitwise-and 127). 
            Repeat last step until the most significant bit of byte is false.
            </para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Woffs.WoffReader.Read255UInt16">
            <summary>
            Read a <c>255UInt16</c>, which is a variable-length encoding of an unsigned integer in the range 
            <c>0</c> to <c>65535</c> inclusive.
            </summary>
            <returns>A variable-length encoding of an unsigned short.</returns>
            <remarks>
            This data type is intended to be used as intermediate representation of various font values, 
            which are typically expressed as UInt16 but represent relatively small values.
            </remarks>
        </member>
        <member name="F:SharpVectors.Woffs.WoffTable._checksum">
            <summary>
            Checksum of the uncompressed table.
            </summary>
        </member>
        <member name="M:SharpVectors.Woffs.WoffTable.CalcChecksum">
            <summary>Calculate checksum for all except for 'head'</summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffTableDirectory._woffIndex">
            <summary>
            Index of the font directory in the WOFF store order.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffTableDirectory._woffVersion">
            <summary>
            The format version of the WOFF file. Possible values are 1 or 2.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffTableDirectory._flags">
            <summary>
            WOFF2: The table type and flags
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffTableDirectory._tag">
            <summary>
            4-byte sfnt table identifier.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffTableDirectory._offset">
            <summary>
            Offset to the data, from beginning of WOFF file.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffTableDirectory._compLength">
            <summary>
            Length of the compressed data, excluding padding.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffTableDirectory._origLength">
            <summary>
            Length of the uncompressed table, excluding padding.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffTableDirectory._transformLength">
            <summary>
            WOFF2: The transformed length (if applicable)
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffTableDirectory._origChecksum">
            <summary>
            Checksum of the uncompressed table.
            </summary>
        </member>
        <member name="F:SharpVectors.Woffs.WoffTableDirectory._padding">
            <summary>
            The padding to the next block.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffTableDirectory.WoffVersion">
            <summary>
            Gets the <c>W3C</c> Specifications Format Version of the WOFF file.
            </summary>
            <value>Possible values are <c>1</c> or <c>2</c>, for the Web Open Font Format 1 (WOFF1) and 2 (WOFF2).</value>
        </member>
        <member name="P:SharpVectors.Woffs.WoffTableDirectory.Tag">
            <summary>
            4-byte sfnt table identifier.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffTableDirectory.Offset">
            <summary>
            Offset to the data, from beginning of WOFF file.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffTableDirectory.CompLength">
            <summary>
            Length of the compressed data, excluding padding.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffTableDirectory.OrigLength">
            <summary>
            Length of the uncompressed table, excluding padding.
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffTableDirectory.OrigChecksum">
            <summary>
            Checksum of the uncompressed table.
            </summary>
        </member>
        <member name="T:SharpVectors.Woffs.WoffTableGlyf.FieldOffsets">
            <summary>
            Offsets to specific elements in the underlying data, relative to the start of the table. 
            </summary>
        </member>
        <member name="T:SharpVectors.Woffs.WoffTableHead.FieldOffsets">
            <summary>
            Offsets to specific elements in the underlying data, relative to the start of the table. 
            </summary>
        </member>
        <member name="T:SharpVectors.Woffs.WoffTableHhea">
            <summary>
            hhea — Horizontal Header Table.
            </summary>
            <remarks>
            <para>The following parameters maybe affected due updates in <see cref="T:SharpVectors.Woffs.WoffTableHmtx"/> table.</para>
            <list type="bullet">
            <item>
            <term>advanceWidthMax - UFWORD</term>
            <description>Maximum advance width value in 'hmtx' table.</description>
            </item>
            <item>
            <term>minLeftSideBearing - FWORD</term>
            <description>Minimum left sidebearing value in 'hmtx' table for glyphs with contours (empty glyphs should be ignored).</description>
            </item>
            <item>
            <term>minRightSideBearing - FWORD</term>
            <description>Minimum right sidebearing value; calculated as <c>Min(aw - (lsb + xMax - xMin))</c> 
            for glyphs with contours (empty glyphs should be ignored).</description>
            </item>
            <item>
            <term>xMaxExtent - FWORD</term>
            <description>Max(lsb + (xMax - xMin)).</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:SharpVectors.Woffs.WoffTableHhea.FieldOffsets">
            <summary>
            Offsets to specific elements in the underlying data, relative to the start of the table. 
            </summary>
        </member>
        <member name="T:SharpVectors.Woffs.WoffTableHmtx.FieldOffsets">
            <summary>
            Offsets to specific elements in the underlying data, relative to the start of the table. 
            </summary>
        </member>
        <member name="T:SharpVectors.Woffs.WoffTableLoca.FieldOffsets">
            <summary>
            Offsets to specific elements in the underlying data, relative to the start of the table. 
            </summary>
        </member>
        <member name="T:SharpVectors.Woffs.WoffTableMaxp.FieldOffsets">
            <summary>
            Offsets to specific elements in the underlying data, relative to the start of the table. 
            </summary>
        </member>
        <member name="T:SharpVectors.Woffs.WoffTableName.FieldOffsets">
            <summary>
            Offsets to specific elements in the underlying data, relative to the start of the table. 
            </summary>
        </member>
        <member name="T:SharpVectors.Woffs.WoffTriplet">
            <summary>
            A class defining the Triplet Encoding used for simple glyph encoding in Compact Table Format (CTF).
            </summary>
            <remarks>
            <para>A simple glyph defines all the contours and points that are used to create the glyph outline.</para>
            <para>Each point is presented in a {dx, dy, on/off-curve} triplet that is stored with the variable 
            length encoding consuming 2 to 5 bytes per triplet.</para>
            <para>
            This class represents the data formats of <c>flags[]</c>, <c>(xCoordinate, yCoordinates)[]</c> of the simple glyph data.
            </para>
            <para>The coordinate values of simple glyph outline points are calculated as follows:</para>
            <code>
                Xcoord[i] = (short)((Xsign)*(xCoordinate[i] + DeltaX[index]);
                Ycoord[i] = (short)((Ysign)*(xCoordinate[i] + DeltaY[index]);
            </code>
            <para>Here is some pseudo-code illustrating how to read in the data:</para>
            <code>
            <![CDATA[
            for i = 0 to (glyph.numberOfPoints - 1)
            {
                bitflags = flags[i]
                isOnCurvePoint = ((bitflags & 0x80) == 0)
                index = (bitflags & 0x7F)
                xIsNegative = coordEncoding[index].xIsNegative
                yIsNegative = coordEncoding[index].yIsNegative;
            
                // subtract one from byteCount since one byte is for the flags
                byteCount = coordEncoding[index].byteCount - 1
            
                data = 0
                for j = 0 to (byteCount - 1)
                {
                    data <<= 8
                    ultmp = glyfData.getNextUInt8()
                    data |= ultmp
                }
            
                ultmp = data >> ((byteCount * 8) - coordEncoding[index].xBits)
                ultmp &= ((1L << coordEncoding[index].xBits) - 1)
                dx = ultmp
            
                ultmp = data >> ((byteCount * 8) - coordEncoding[index].xBits - coordEncoding[index].yBits)
                ultmp &= ((1L << coordEncoding[index].yBits) - 1)
                dy = ultmp
            
                dx += coordEncoding[index].deltaX
                dy += coordEncoding[index].deltaY
            
                if (xIsNegative)
                    dx = -dx
            
                if (yIsNegative)
                    dy = -dy
            
                x = (x + dx)
                y = (y + dy)
            }
            ]]>
            </code>
            </remarks>
            <seealso href="https://www.w3.org/TR/WOFF2/#glyf_table_format">5.1. Transformed glyf table format</seealso>.
            <seealso href="https://www.w3.org/Submission/2008/SUBM-MTX-20080305/#CTF">5.6. The 'glyf' Table Translation</seealso>.
        </member>
        <member name="T:SharpVectors.Woffs.WoffUtils">
            <summary>
            
            </summary>
            <remarks>
            <para>Data types</para>
            <para>UInt32 32-bit (4-byte) unsigned integer in big-endian format</para>
            <para>UInt16 16-bit (2-byte) unsigned integer in big-endian format</para>
            </remarks>
        </member>
        <member name="F:SharpVectors.Woffs.WoffUtils.PaddingSize">
            <summary>
            The byte boundary.
            </summary>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Woffs.WoffWriter"/> class with an expandable
            capacity initialized to zero.
            </summary>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Woffs.WoffWriter"/> class with a non-resizable
            capacity initialized as specified.
            </summary>
            <param name="capacity">The initial size of the internal array in bytes.</param>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Woffs.WoffWriter"/> class with a non-resizable
            capacity initialized as specified.
            </summary>
            <param name="capacity">The initial size of the internal array in bytes.</param>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.#ctor(System.Byte[])">
            <summary>
             Initializes a new non-resizable instance of the <see cref="T:SharpVectors.Woffs.WoffWriter"/> class
             based on the specified byte array.
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create the current stream.</param>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new non-resizable instance of the <see cref="T:SharpVectors.Woffs.WoffWriter"/> class
            based on the specified region (index) of a byte array.
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream.</param>
            <param name="index">The index into buffer at which the stream begins.</param>
            <param name="count">The length of the stream in bytes.</param>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpVectors.Woffs.WoffWriter.Offset">
            <summary>
            Gets or sets the current position within the stream.
            </summary>
            <value>The current position within the stream.</value>
        </member>
        <member name="P:SharpVectors.Woffs.WoffWriter.Length">
            <summary>
             Gets the length of the stream in bytes.
            </summary>
            <value>The length of the stream in bytes.</value>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.GetBuffer">
            <summary>
            Returns the array of unsigned bytes from which this stream was created.
            </summary>
            <returns>
            The byte array from which this stream was created, or the underlying array if
            a byte array was not provided to the System.IO.MemoryStream constructor during
            construction of the current instance.
            </returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.WriteInt16(System.Int16)">
            <summary>
            Writes a two-byte signed integer to the current stream and advances the stream
            position by two bytes.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.WriteUInt16(System.UInt16)">
            <summary>
            Writes a two-byte unsigned integer to the current stream and advances the stream
            position by two bytes.
            </summary>
            <param name="value">The two-byte unsigned integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.WriteInt16(System.Int32)">
            <summary>
            Writes a two-byte signed integer to the current stream and advances the stream
            position by two bytes.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.WriteInt32(System.Int32)">
            <summary>
            Writes a four-byte signed integer to the current stream and advances the stream
            position by four bytes.
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.WriteUInt32(System.UInt32)">
            <summary>
            Writes a four-byte unsigned integer to the current stream and advances the stream
            position by four bytes.
            </summary>
            <param name="value">The four-byte unsigned integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.WriteInt64(System.Int64)">
            <summary>
            Writes an eight-byte signed integer to the current stream and advances the stream
            position by eight bytes.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.WriteUInt64(System.UInt64)">
            <summary>
            Writes an eight-byte unsigned integer to the current stream and advances the
            stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte unsigned integer to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.Write(System.SByte)">
            <summary>
            Writes a signed byte to the current stream and advances the stream position by one byte.
            </summary>
            <param name="value">The signed byte to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.Write(System.SByte[])">
            <summary>
            Writes a signed byte array to the underlying stream.
            </summary>
            <param name="buffer">A signed byte array containing the data to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.Write(System.SByte[],System.Int32,System.Int32)">
            <summary>
            Writes a region of a signed byte array to the current stream.
            </summary>
            <param name="buffer">A signed byte array containing the data to write.</param>
            <param name="index">The starting point in buffer at which to begin writing.</param>
            <param name="count">The number of signed bytes to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.Write(System.Byte)">
            <summary>
            Writes an unsigned byte to the current stream and advances the stream position by one byte.
            </summary>
            <param name="value">The unsigned byte to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array to the underlying stream.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Woffs.WoffWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a region of a byte array to the current stream.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <param name="index">The starting point in buffer at which to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
            <returns>Returns <see langword="true"/> if successful; otherwise, returns <see langword="false"/>.</returns>
        </member>
    </members>
</doc>
