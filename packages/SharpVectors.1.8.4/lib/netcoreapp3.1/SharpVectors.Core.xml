<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpVectors.Core</name>
    </assembly>
    <members>
        <member name="T:SharpVectors.Dom.CssConstants">
            <summary>
            This interface defines constants for CSS.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.CssPrimitiveType">
            <summary>
            The <c>CssPrimitiveType</c> enumeration contains the list of possible primitive value types in CSS. 
            This class is an extension of the CSS spec. The CSS spec has a list of constants instead of an enum class.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Unknown">
            <summary>
            The value is not a recognized CSS2 value. The value can only be obtained by using the cssText attribute.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Number">
            <summary>
            The value is a simple number. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Percentage">
            <summary>
            The value is a percentage. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Ems">
            <summary>
            The value is a length (ems). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Exs">
            <summary>
            The value is a length (exs). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Px">
            <summary>
            The value is a length (px). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Cm">
            <summary>
            The value is a length (cm). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Mm">
            <summary>
            The value is a length (mm). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.In">
            <summary>
            The value is a length (in). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Pt">
            <summary>
            The value is a length (pt). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Pc">
            <summary>
            The value is a length (pc). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Deg">
            <summary>
            The value is an angle (deg). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Rad">
            <summary>
            The value is an angle (rad). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Grad">
            <summary>
            The value is an angle (grad). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Ms">
            <summary>
            The value is a time (ms). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.S">
            <summary>
            The value is a time (s). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Hz">
            <summary>
            The value is a frequency (Hz). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.KHz">
            <summary>
            The value is a frequency (kHz). The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Dimension">
            <summary>
            The value is a number with an unknown dimension. The value can be obtained by using the getFloatValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.String">
            <summary>
            The value is a STRING. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Uri">
            <summary>
            The value is a URI. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Ident">
            <summary>
            The value is an identifier. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Attr">
            <summary>
            The value is a attribute function. The value can be obtained by using the getStringValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Counter">
            <summary>
            The value is a counter or counters function. The value can be obtained by using the getCounterValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Rect">
            <summary>
            The value is a rect function. The value can be obtained by using the getRectValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.RgbColor">
            <summary>
            The value is a RGB color. The value can be obtained by using the getRGBColorValue method.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssPrimitiveType.Vars">
            <summary>
            The value is a var() or custom properties.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.CssRuleType">
            <summary>
            The <c>CssRuleType</c> Enum contains the possible Rule Type Values. This is an extension of the CSS specification.
            The spec contains only a list of contstant in the <see cref="T:SharpVectors.Dom.Css.ICssRule"/> interface. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.UnknownRule">
            <summary>
            The rule is a CSSUnknownRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.StyleRule">
            <summary>
            The rule is a CSSStyleRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.CharsetRule">
            <summary>
            The rule is a CSSCharsetRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.ImportRule">
            <summary>
            The rule is a CSSImportRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.MediaRule">
            <summary>
            The rule is a CSSMediaRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.FontFaceRule">
            <summary>
            The rule is a CSSFontFaceRule.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssRuleType.PageRule">
            <summary>
            The rule is a CSSPageRule.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.CssValueType">
            <summary>
            The <c>CssValueType</c> Enum contains the possible CSS Value Types. This is an extension to the 
            CSS specification. The specification has a list of constants defined within the <see cref="T:SharpVectors.Dom.Css.ICssValue"/> Interface 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.Inherit">
            <summary>
            The value is inherited and the cssText contains "inherit".
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.PrimitiveValue">
            <summary>
            The value is a primitive value and an instance of the <see cref="T:SharpVectors.Dom.Css.ICssPrimitiveValue"/> interface can be 
            obtained by using binding-specific casting methods on this instance of the <see cref="T:SharpVectors.Dom.Css.ICssValue"/> interface.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.ValueList">
            <summary>
            The value is a <see cref="T:SharpVectors.Dom.Css.ICssValue"/> list and an instance of the <see cref="T:SharpVectors.Dom.Css.ICssValueList"/> interface 
            can be obtained by using binding-specific casting methods on this instance of the <see cref="T:SharpVectors.Dom.Css.ICssValue"/> interface.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Css.CssValueType.Custom">
            <summary>
            The value is a custom value.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssCharsetRule">
            <summary>
            The <c>ICssCharsetRule</c> interface represents a <c>@charset</c> rule in a CSS style sheet. The value of the 
            encoding attribute does not affect the encoding of text data in the DOM objects; this encoding is 
            always UTF-16. After a stylesheet is loaded, the value of the encoding attribute is the value found in the 
            <c>@charset</c> rule. If there was no <c>@charset</c> in the original document, then no <c>ICssCharsetRule</c> is created. 
            The value of the encoding attribute may also be used as a hint for the 
            encoding used on serialization of the style sheet. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCharsetRule.Encoding">
            <summary>
            The encoding information used in this <c>@charset</c> rule.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>SYNTAX_ERR</c>: Raised if the specified encoding value has a syntax error and is unparsable.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>NO_MODIFICATION_ALLOWED_ERR</c>: Raised if this encoding rule is readonly.
            </exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssColor">
            <summary>
            The RGB-Color interface is used to represent any RGB color value. This interface reflects the 
            values in the underlying style property. Hence, modifications made to the 
            <see cref="T:SharpVectors.Dom.Css.ICssPrimitiveValue"/> objects modify the style property. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Name">
            <summary>
            Gets the name of the color, if available.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Alpha">
            <summary>
            This attribute is used for the alpha value of the RGBA color
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Red">
            <summary>
            This attribute is used for the red value of the RGB color
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Green">
            <summary>
            This attribute is used for the green value of the RGB color.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.Blue">
            <summary>
            This attribute is used for the blue value of the RGB color
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.HasAlpha">
            <summary>
            Gets a value which indicates whether the color value has alpha value or not.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.IsSystemColor">
            <summary>
            Gets a value which indicates whether the color is system-defined color.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssColor.IsVarColor">
            <summary>
            Gets a value which indicates whether the color is defined by custom properties.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssCounter">
            <summary>
            The Counter interface is used to represent any counter or counters function value. 
            This interface reflects the values in the underlying style property.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCounter.Separator">
            <summary>
            This attribute is used for the separator of the nested counters.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCounter.ListStyle">
            <summary>
            This attribute is used for the style of the list.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssCounter.Identifier">
            <summary>
            This attribute is used for the identifier of the counter.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssFontFaceRule">
            <summary>
            The <c>ICssFontFaceRule</c> interface represents a <c>@font-face </c>rule in a CSS style sheet. 
            The <c>@font-face</c> rule is used to hold a set of font descriptions. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssFontFaceRule.Style">
            <summary>
            The declaration-block of this rule.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssImportRule">
            <summary>
            The <c>ICssImportRule</c> interface represents a <c>@import</c> rule within a CSS style sheet. 
            The <c>@import</c> rule is used to import style rules from other style sheets. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssImportRule.StyleSheet">
            <summary>
            The style sheet referred to by this rule, if it has been loaded. The value of this attribute 
            is null if the style sheet has not yet been loaded or if it will not be loaded (e.g. if the 
            style sheet is for a media type not supported by the user agent).
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssImportRule.Media">
            <summary>
            A list of media types for which this style sheet may be used.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssImportRule.Href">
            <summary>
            The location of the style sheet to be imported. The attribute will not contain the 
            <c>"url(...)"</c> specifier around the URI.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssMediaRule">
            <summary>
            The <c>ICssMediaRule</c> interface represents a <c>@media</c> rule in a CSS style sheet. 
            A <c>@media</c> rule can be used to delimit style rules for specific media types
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssMediaRule.DeleteRule(System.UInt64)">
            <summary>
            Used to delete a rule from the media block.
            </summary>
            <param name="index">The index within the media block's rule collection of the rule to remove.</param>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>INDEX_SIZE_ERR</c>: Raised if the specified index does not correspond to a rule in the media rule list.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>NO_MODIFICATION_ALLOWED_ERR</c>: Raised if this media rule is readonly
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssMediaRule.InsertRule(System.String,System.UInt64)">
            <summary>
            Used to insert a new rule into the media block.
            </summary>
            <param name="rule">The parsable text representing the rule. For rule sets this contains both 
            the selector and the style declaration. For at-rules, this specifies both the at-identifier 
            and the rule content.
            </param>
            <param name="index">The index within the media block's rule collection of the rule before which 
            to insert the specified rule. If the specified index is equal to the length of the media blocks's 
            rule collection, the rule will be added to the end of the media block.
            </param>
            <returns>The index within the media block's rule collection of the newly inserted rule</returns>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssMediaRule.CssRules">
            <summary>
            A list of all CSS rules contained within the media block.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssMediaRule.Media">
            <summary>
            A list of media types for this rule
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssPageRule">
            <summary>
            The <c>ICssPageRule</c> interface represents a <c>@page</c> rule within a CSS style sheet. 
            The <c>@page</c> rule is used to specify the dimensions, orientation, margins, etc. of a page box for paged media. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssPageRule.Style">
            <summary>
            The declaration-block of this rule.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssPageRule.SelectorText">
            <summary>
            The parsable textual representation of the page selector for the rule.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>SYNTAX_ERR</c>: Raised if the specified CSS string value has a syntax error and is unparsable.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>NO_MODIFICATION_ALLOWED_ERR</c>: Raised if this rule is readonly.
            </exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssPrimitiveValue">
            <summary>
            The <c>ICssPrimitiveValue</c> interface represents a single CSS value. 
            </summary>
            <remarks>
            This interface may be used to determine the value of a specific style property currently set in a block 
            or to set a specific style property explicitly within the block. An instance of this interface might be 
            obtained from the <see cref="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyCssValue(System.String)"/> method of the <see cref="T:SharpVectors.Dom.Css.ICssStyleDeclaration"/> interface. 
            A <see cref="T:SharpVectors.Dom.Css.ICssPrimitiveValue"/> object only occurs in a context of a CSS property. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssPrimitiveValue.PrimitiveType">
            <summary>
            The type of the value as defined by the constants specified above.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.SetFloatValue(SharpVectors.Dom.Css.CssPrimitiveType,System.Double)">
            <summary>
            A method to set the float value with a specified unit. If the property attached with this value cannot 
            accept the specified unit or the float value, the value will be unchanged and a <see cref="T:SharpVectors.Dom.DomException"/> 
            will be raised.
            </summary>
            <param name="unitType">A unit code as defined above. The unit code can only be a float unit type 
            (i.e. <c>NUMBER</c>, <c>PERCENTAGE</c>, <c>EMS</c>, <c>EXS</c>, <c>PX</c>, <c>CM</c>, <c>MM</c>, <c>IN</c>, 
            <c>PT</c>, <c>PC</c>, <c>DEG</c>, <c>RAD</c>, <c>GRAD</c>, <c>MS</c>, <c>S</c>, <c>HZ</c>, <c>KHZ</c>, <c>DIMENSION</c>).
            </param>
            <param name="floatValue">The new float value.</param>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>INVALID_ACCESS_ERR:</c> Raised if the attached property doesn't support the float value or the unit type.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this property is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetFloatValue(SharpVectors.Dom.Css.CssPrimitiveType)">
            <summary>
            This method is used to get a float value in a specified unit. If this CSS value doesn't contain a float value 
            or can't be converted into the specified unit, a <see cref="T:SharpVectors.Dom.DomException"/> is raised.
            </summary>
            <param name="unitType">A unit code to get the float value. The unit code can only be a float unit type 
            (i.e. <c>NUMBER</c>, <c>PERCENTAGE</c>, <c>EMS</c>, <c>EXS</c>, <c>PX</c>, <c>CM</c>, <c>MM</c>, <c>IN</c>, 
            <c>PT</c>, <c>PC</c>, <c>DEG</c>, <c>RAD</c>, <c>GRAD</c>, <c>MS</c>, <c>S</c>, <c>HZ</c>, <c>KHZ</c>, <c>DIMENSION</c>).</param>
            <returns>The float value in the specified unit.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>INVALID_ACCESS_ERR:</c> Raised if the CSS value doesn't contain a float value or if the float value 
            can't be converted into the specified unit.
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.SetStringValue(SharpVectors.Dom.Css.CssPrimitiveType,System.String)">
            <summary>
            A method to set the string value with the specified unit. If the property attached to this value can't accept the 
            specified unit or the string value, the value will be unchanged and a <see cref="T:SharpVectors.Dom.DomException"/> will be raised.
            </summary>
            <param name="stringType">A string code as defined above. The string code can only be a string unit type 
            (i.e. <c>STRING</c>, <c>URI</c>, <c>IDENT</c>, and <c>ATTR</c>).</param>
            <param name="stringValue">The new string value.</param>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>INVALID_ACCESS_ERR:</c> Raised if the CSS value doesn't contain a string value or if the string 
            value can't be converted into the specified unit.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this property is readonly.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetStringValue">
            <summary>
            This method is used to get the string value. If the CSS value doesn't contain a string value, 
            a <see cref="T:SharpVectors.Dom.DomException"/> is raised. 
            <para>
            Note: Some properties (like 'font-family' or 'voice-family') convert a whitespace separated list of idents to a string.
            </para>
            </summary>
            <returns>The string value in the current unit. The current primitiveType can only be a string 
            unit type (i.e. <c>STRING</c>, <c>URI</c>, <c>IDENT</c>, and <c>ATTR</c>).</returns>
            <exception cref="T:SharpVectors.Dom.DomException"><c>INVALID_ACCESS_ERR:</c> Raised if the CSS value doesn't contain a string value.</exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetCounterValue">
            <summary>
            This method is used to get the <see cref="T:SharpVectors.Dom.Css.ICssCounter"/> value. If this CSS value doesn't contain a counter value, 
            a <see cref="T:SharpVectors.Dom.DomException"/> is raised. Modification to the corresponding style property can 
            be achieved using the <see cref="T:SharpVectors.Dom.Css.ICssCounter"/> interface
            </summary>
            <returns>The Counter value</returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>INVALID_ACCESS_ERR:</c> Raised if the CSS value doesn't contain a Counter value (e.g. this is not <c>COUNTER</c>).
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetRectValue">
            <summary>
            This method is used to get the <see cref="T:SharpVectors.Dom.Css.ICssRect"/> value. If this CSS value doesn't contain a rect value, 
            a <see cref="T:SharpVectors.Dom.DomException"/> is raised. Modification to the corresponding style property 
            can be achieved using the <see cref="T:SharpVectors.Dom.Css.ICssRect"/> interface.
            </summary>
            <returns>The Rect value</returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>INVALID_ACCESS_ERR:</c> Raised if the CSS value doesn't contain a Rect value. (e.g. this is not <c>RECT</c>).
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssPrimitiveValue.GetRgbColorValue">
            <summary>
            This method is used to get the RGB color. If this CSS value doesn't contain a RGB color value, 
            a <see cref="T:SharpVectors.Dom.DomException"/> is raised. Modification to the corresponding style property can be achieved 
            using the <see cref="T:SharpVectors.Dom.Css.ICssColor"/> interface.
            </summary>
            <returns>the RGB color value.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>INVALID_ACCESS_ERR:</c> Raised if the attached property can't return a RGB color value (e.g. this is not <c>RGBCOLOR</c>).
            </exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssRect">
            <summary>
            The <c>ICssRect</c> interface is used to represent any rect value. This interface reflects the values 
            in the underlying style property. Hence, modifications made to the <see cref="T:SharpVectors.Dom.Css.ICssPrimitiveValue"/>
            objects modify the style property. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Left">
            <summary>
            This attribute is used for the left of the rect.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Bottom">
            <summary>
            This attribute is used for the bottom of the rect.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Right">
            <summary>
            This attribute is used for the right of the rect.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRect.Top">
            <summary>
            This attribute is used for the top of the rect.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssRule">
            <summary>
            The <c>ICssRule</c> interface is the abstract base interface for any type of CSS statement. 
            This includes both rule sets and at-rules. An implementation is expected to preserve all rules 
            specified in a CSS style sheet, even if the rule is not recognized by the parser. 
            Unrecognized rules are represented using the <see cref="T:SharpVectors.Dom.Css.ICssUnknownRule"/> interface. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.ParentStyleSheet">
            <summary>
            The type of the rule, as defined above. The expectation is that binding-specific casting methods 
            can be used to cast down from an instance of the <see cref="T:SharpVectors.Dom.Css.ICssRule"/> interface to the specific derived 
            interface implied by the type.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.ParentRule">
            <summary>
            The style sheet that contains this rule.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.Type">
            <summary>
            If this rule is contained inside another rule (e.g. a style rule inside an <c>@media</c> block), this is the 
            containing rule. If this rule is not nested inside any other rules, this returns null
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRule.CssText">
            <summary>
            The parsable textual representation of the rule. This reflects the current state of the rule and not its initial value.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"><c>SYNTAX_ERR:</c> Raised if the specified CSS string value has a syntax 
            error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException"><c>INVALID_MODIFICATION_ERR:</c> Raised if the specified CSS string value 
            represents a different type of rule than the current one.</exception>
            <exception cref="T:SharpVectors.Dom.DomException"><c>HIERARCHY_REQUEST_ERR:</c> Raised if the rule cannot be inserted at this 
            point in the style sheet.</exception>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if the rule is readonly.</exception>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssRuleList">
            <summary>
            The <c>ICssRuleList</c> interface provides the abstraction of an 
            ordered collection of CSS rules. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRuleList.Length">
            <summary>
            The number of CSS rules in the list. The range of valid child rule indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRuleList.Item(System.UInt64)">
            <summary>
            Used to retrieve a CSS rule by ordinal index. The order in this collection represents the 
            order of the rules in the CSS style sheet. If index is greater than or equal to the number 
            of rules in the list, this returns null.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssRuleList.HasFontRule">
            <summary>
            Gets a value specifying whether the contents of this list includes a font rule.
            <para>This is an implementation extension, not CSS specification.</para>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssStyleDeclaration">
            <summary>
            The <c>ICssStyleDeclaration</c> interface represents a single CSS declaration block. 
            </summary>
            <remarks>
            This interface may be used to determine the style properties currently set in a block or to set 
            style properties explicitly within the block. 
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.SetProperty(System.String,System.String,System.String)">
            <summary>
            Used to set a property value and priority within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <param name="value">The new value of the property.</param>
            <param name="priority">The new priority of the property (e.g. "important").</param>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>SYNTAX_ERR:</c> Raised if the specified value has a syntax error and is unparsable.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this declaration is readonly or the property is readonly.
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyPriority(System.String)">
            <summary>
            Used to retrieve the priority of a CSS property (e.g. the "important" qualifier) if the property has 
            been explicitly set in this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>A string representing the priority (e.g. "important") if one exists. 
            The empty string if none exists.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.RemoveProperty(System.String)">
            <summary>
            Used to remove a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. 
            Returns the empty string if the property has not been set or the property name does not correspond 
            to a known CSS property.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this declaration is readonly or the property is readonly.
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyCssValue(System.String)">
            <summary>
            Used to retrieve the object representation of the value of a CSS property if it has been explicitly 
            set within this declaration block. This method returns null if the property is a shorthand property. 
            Shorthand property values can only be accessed and modified as strings, using the <see cref="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyValue(System.String)"/> 
            and <see cref="M:SharpVectors.Dom.Css.ICssStyleDeclaration.SetProperty(System.String,System.String,System.String)"/> methods.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. 
            Returns null if the property has not been set.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyValue(System.String)">
            <summary>
            Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyName">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. 
            Returns the empty string if the property has not been set.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleDeclaration.GetPropertyValue(System.String[])">
            <summary>
            Used to retrieve the value of a CSS property if it has been explicitly set within this declaration block.
            </summary>
            <param name="propertyNames">The name of the CSS property. See the CSS property index.</param>
            <returns>Returns the value of the property if it has been explicitly set for this declaration block. 
            Returns the empty string if the property has not been set.</returns>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.ParentRule">
            <summary>
            The CSS rule that contains this declaration block or null if this <see cref="T:SharpVectors.Dom.Css.ICssStyleDeclaration"/> is 
            not attached to a <see cref="T:SharpVectors.Dom.Css.ICssRule"/>.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.Length">
            <summary>
            The number of properties that have been explicitly set in this declaration block. 
            The range of valid indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.CssText">
            <summary>
            The parsable textual representation of the declaration block (excluding the surrounding curly braces). 
            Setting this attribute will result in the parsing of the new value and resetting of all the properties 
            in the declaration block including the removal or addition of properties.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>SYNTAX_ERR:</c> Raised if the specified CSS string value has a syntax error and is unparsable.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this declaration is readonly or a property is readonly.
            </exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleDeclaration.Item(System.UInt64)">
            <summary>
            Used to retrieve the properties that have been explicitly set in this declaration block. 
            The order of the properties retrieved using this method does not have to be the order in which 
            they were set. This method can be used to iterate over all properties in this declaration block.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssStyleRule">
            <summary>
            The <c>ICssStyleRule</c> interface represents a single rule set in a CSS style sheet. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleRule.SelectorText">
            <summary>
            The textual representation of the selector for the rule set. The implementation may have stripped 
            out insignificant whitespace while parsing the selector.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>SYNTAX_ERR:</c> Raised if the specified CSS string value has a syntax error and is unparsable.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this rule is readonly.
            </exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleRule.Style">
            <summary>
            The declaration-block of this rule set.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssStyleSheet">
            <summary>
            The <c>ICssStyleSheet</c> interface is a concrete interface used to represent a CSS style sheet 
            i.e., a style sheet whose content type is <c>text/css</c>. 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleSheet.DeleteRule(System.UInt64)">
            <summary>
            Used to delete a rule from the style sheet.
            </summary>
            <param name="index">The index within the style sheet's rule list of the rule to remove.</param>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>INDEX_SIZE_ERR:</c> Raised if the specified index does not correspond to a rule in the style sheet's rule list.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this style sheet is readonly.
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssStyleSheet.InsertRule(System.String,System.UInt64)">
            <summary>
            Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
            </summary>
            <param name="rule">The parsable text representing the rule. For rule sets this contains both the selector 
            and the style declaration. For at-rules, this specifies both the at-identifier and the rule content.</param>
            <param name="index">The index within the style sheet's rule list of the rule before which to insert 
            the specified rule. If the specified index is equal to the length of the style sheet's rule collection, 
            the rule will be added to the end of the style sheet.</param>
            <returns>The index within the style sheet's rule collection of the newly inserted rule.</returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>HIERARCHY_REQUEST_ERR:</c> Raised if the rule cannot be inserted at the specified index 
            e.g. if an <c>@import</c> rule is inserted after a standard rule set or other at-rule.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>INDEX_SIZE_ERR:</c> Raised if the specified index does not correspond to a rule in the style sheet's rule list.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this style sheet is readonly.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>SYNTAX_ERR:</c> Raised if the specified rule has a syntax error and is unparsable.
            </exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleSheet.CssRules">
            <summary>
            The list of all CSS rules contained within the style sheet. This includes both rule sets and at-rules.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssStyleSheet.OwnerRule">
            <summary>
            If this style sheet comes from an <c>@import</c> rule, the ownerRule attribute will 
            contain the <see cref="T:SharpVectors.Dom.Css.ICssImportRule"/>. 
            </summary>
            <remarks>
            In that case, the <see cref="P:SharpVectors.Dom.Stylesheets.IStyleSheet.OwnerNode"/> attribute in the <see cref="T:SharpVectors.Dom.Stylesheets.IStyleSheet"/> interface 
            will be <see langword="null"/>. If the style sheet comes from an element or a processing instruction, 
            the <c>OwnerRule</c> attribute will be <see langword="null"/> and the <see cref="P:SharpVectors.Dom.Stylesheets.IStyleSheet.OwnerNode"/> 
            attribute will contain the node.
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssUnknownRule">
            <summary>
            The <c>ICssUnknownRule</c> interface represents an at-rule not supported by this user agent. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssValue">
            <summary>
            The <c>ICssValue</c> interface represents the current computed value of a CSS property.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValue.CssText">
            <summary>
            A string representation of the current value.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>SYNTAX_ERR:</c> Raised if the specified CSS string value has a syntax error 
            (according to the attached property) or is unparsable.
            </exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>INVALID_MODIFICATION_ERR:</c> Raised if the specified CSS string value represents a 
            different type of values than the values allowed by the CSS property.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">
            <c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this value is readonly.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValue.CssValueType">
            <summary>
            An enumeration code defining the type of the value.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValue.IsAbsolute">
            <summary>
            Gets a value specifiying whether this CSS value an absolute or variable.
            <para>This is an implementation extension, not part of the CSS specification.</para>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssValueList">
            <summary>
            The <c>ICssValueList</c> interface provides the abstraction of an ordered collection of CSS values.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValueList.Length">
            <summary>
            The number of CSS Values in the list. The range of valid values of the indices is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Css.ICssValueList.Item(System.UInt64)">
            <summary>
            Used to retrieve a <see cref="T:SharpVectors.Dom.Css.ICssValue"/> by ordinal index. The order in this collection represents the 
            order of the values in the CSS style property. If index is greater than or equal to the number 
            of values in the list, this returns null.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.ICssView">
            <summary>
            This interface represents a CSS view. The <see cref="M:SharpVectors.Dom.Css.ICssView.GetComputedStyle(System.Xml.XmlElement,System.String)"/> method provides a read only access 
            to the computed values of an element. 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.ICssView.GetComputedStyle(System.Xml.XmlElement,System.String)">
            <summary>
            This method is used to get the computed style as it is defined in [CSS2].
            </summary>
            <param name="elt">The element whose style is to be computed. This parameter cannot be null.</param>
            <param name="pseudoElt">The pseudo-element or null if none</param>
        </member>
        <member name="T:SharpVectors.Dom.Css.IDocumentCss">
            <summary>
            This interface represents a document with a CSS view.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Css.IDocumentCss.GetOverrideStyle(System.Xml.XmlElement,System.String)">
            <summary>
            This method is used to retrieve the override style declaration for a specified element 
            and a specified pseudo-element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Css.IDomImplementationCss">
            <summary>
            This interface allows the DOM user to create a <see cref="T:SharpVectors.Dom.Css.ICssStyleSheet"/> outside the context of a document. 
            There is no way to associate the new <see cref="T:SharpVectors.Dom.Css.ICssStyleSheet"/> with a document in DOM Level 2. 
            </summary>
            <remarks>
            This interface should inherit from <see cref="T:SharpVectors.Dom.IDomImplementation"/> but System.Xml does not have 
            this interface, just a class. You can not inherit from a class in an interface.
            </remarks>	
        </member>
        <member name="M:SharpVectors.Dom.Css.IDomImplementationCss.CreateCssStyleSheet(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:SharpVectors.Dom.Css.ICssStyleSheet"/>.
            </summary>
            <param name="title">The advisory title. See also the Style Sheet Interfaces section.</param>
            <param name="media">The comma-separated list of media associated with the new style sheet. 
            See also the Style Sheet Interfaces section.</param>
            <returns>A new CSS style sheet.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Css.IElementCssInlineStyle">
            <summary>
            Inline style information attached to elements is exposed through the style attribute. 
            </summary>
            <remarks>
            This represents the contents of the STYLE attribute for HTML elements (or elements in other 
            schemas or DTDs which use the STYLE attribute in the same way). The expectation is that an 
            instance of the <see cref="T:SharpVectors.Dom.Css.IElementCssInlineStyle"/> interface can be obtained by using binding-specific casting 
            methods on an instance of the Element interface when the element supports inline CSS style informations. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Css.IElementCssInlineStyle.Style">
            <summary>
            The style attribute
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.AttrChangeType">
            <summary>
            An integer indicating in which way the attribute was changed.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.None">
            <summary>
            No attribute was modified, added nor removed.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.Modification">
            <summary>
            The attribute was modified in place.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.Addition">
            <summary>
            The attribute was just added.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.AttrChangeType.Removal">
            <summary>
            The attribute was just removed.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventListener">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> delegate is the
            primary way for handling events.
            </summary>
            <remarks>
            <para>
            Users register their event listener on an <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>. The users should also
            remove their <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> from its <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> 
            after they have completed using the listener.
            </para>
            <para>
            Copying a <see cref="T:SharpVectors.Dom.INode">INode</see> does not copy the event listeners attached to it. Event listeners 
            must be attached to the newly created <see cref="T:SharpVectors.Dom.INode">INode</see> afterwards if so desired.
            </para>
            </remarks>
            <paramref name="e">
            The <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> contains contextual information
            about the <see href="https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event">event</see>.
            </paramref>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventException">
            <summary>
            Event operations may throw an
            <see cref="T:SharpVectors.Dom.Events.EventException">EventException</see> as specified in their
            method descriptions.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.EventException.#ctor(SharpVectors.Dom.Events.EventExceptionCode)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Events.EventException"/> class with event exception code.
            </summary>
            <param name="code">
            An instance of <see cref="T:SharpVectors.Dom.Events.EventExceptionCode"/> defining the event exception code.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.EventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Events.EventException"/> class with serialized data.
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.
            </param>
        </member>
        <member name="P:SharpVectors.Dom.Events.EventException.Code">
            <summary>
            An integer indicating the type of error generated.
            </summary>
            <value>
            An enumeration of the type <see cref="T:SharpVectors.Dom.Events.EventExceptionCode"/> specifying the type of error generated.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventPhase">
            <summary>
            An integer indicating which phase of the event flow is being processed
            as defined in
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventPhase.CapturingPhase">
            <summary>
            (DOM Level 2)
            The current event phase is the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">capture phase</see>.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventPhase.AtTarget">
            <summary>
            (DOM Level 2)
            The current event is in the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">target phase</see>,
            i.e. it is being evaluated at the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event target</see>.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventPhase.BubblingPhase">
            <summary>
            (DOM Level 2)
            The current event phase is the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-bubbling-phase">bubbling phase</see>.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.ICustomEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see> interface gives access
            to the attributes
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see> and
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see>.
            </summary>
            <remarks>
            <para>
            It is intended
            to be used by the DOM Events implementation to access the underlying
            current target and event phase while dispatching a custom
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> in the tree; it is also intended to be
            implemented, and not used, by DOM applications.
            </para>
            <para>
            The methods contained in this interface are not intended to be used by
            a DOM application, especially during the dispatch on the Event object.
            Changing the current target or the current phase may conduct into
            unpredictable results of the event flow. The DOM Events implementation
            should ensure that both methods return the appropriate current target
            and phase before invoking each event listener on the current target to
            protect DOM applications from malicious event listeners.
            </para>
            <para>
            Note: If this interface is supported by the event object,
            <see cref="P:SharpVectors.Dom.Events.IEvent.IsCustom">IEvent.IsCustom</see> must return <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.ICustomEvent.IsPropagationStopped">
            <summary>
            This method will return <c>true</c> if the method
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopPropagation">IEvent.StopPropagation</see> has been called
            for this event, <c>false</c> in any other cases. 
            </summary>
            <value>
            <c>true</c> if the event propagation has been stopped in the
            current group.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Events.ICustomEvent.IsImmediatePropagationStopped">
            <summary>
            The
            <see cref="P:SharpVectors.Dom.Events.ICustomEvent.IsImmediatePropagationStopped">IsImmediatePropagationStopped</see>
            method is used by the DOM Events implementation to know if the
            method
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopImmediatePropagation">IEvent.StopImmediatePropagation</see>
            has been called for this event. It returns <c>true</c> if the
            method has been called, <c>false</c> otherwise. 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.ICustomEvent.SetDispatchState(SharpVectors.Dom.Events.IEventTarget,System.UInt16)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.ICustomEvent.SetDispatchState(SharpVectors.Dom.Events.IEventTarget,System.UInt16)">SetDispatchState</see> method is
            used by the DOM Events implementation to set the values of
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see> and
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see>.
            </summary>
            <remarks>
            It also reset the states of
            <see cref="P:SharpVectors.Dom.Events.ICustomEvent.IsPropagationStopped">IsPropagationStopped</see> and
            <see cref="P:SharpVectors.Dom.Events.ICustomEvent.IsImmediatePropagationStopped">IsImmediatePropagationStopped</see>.
            </remarks>
            <param name="target">
            Specifies the new value for the
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see>
            attribute.
            </param>
            <param name="phase">
            Specifies the new value for the
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see> attribute.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IDocumentEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface provides a mechanism by which the user 
            can create an <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> object of a type supported by the implementation. 
            It is expected that the <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface will be implemented 
            on the same object which implements the <see cref="T:SharpVectors.Dom.IDocument">IDocument</see> interface in an implementation
            which supports the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> model.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">CreateEvent</see> method is used in
            creating <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>s when it is either
            inconvenient or unnecessary for the user to create an
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> themselves.
            </summary>
            <remarks>
            <para>
            In cases where the implementation provided
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> is insufficient, users may supply
            their own <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> implementations for use
            with the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method. However, the DOM implementation needs access to the
            attributes
            <see cref="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">IEvent.CurrentTarget</see> and
            <see cref="P:SharpVectors.Dom.Events.IEvent.EventPhase">IEvent.EventPhase</see> to propagate
            appropriately the event in the DOM tree. Therefore users'
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> implementations might need to
            support the <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see> interface
            for that effect.
            </para>
            <para>
            Note: For backward compatibility reason, <c>"UIEvents"</c>,
            <c>"MouseEvents"</c>, <c>"MutationEvents"</c>, and
            <c>"HTMLEvents"</c> feature names are valid values for the
            parameter <c>eventType</c> and represent respectively the
            interfaces <c>"UIEvent"</c>, <c>"MouseEvent"</c>,
            <c>"MutationEvent"</c>, and <c>"Event"</c>.
            </para>
            </remarks>
            <param name="eventType">
            The <c>eventType</c> parameter specifies the name of the DOM
            Events interface to be supported by the created event object, e.g.
            <c>"Event"</c>, <c>"MouseEvent"</c>, <c>"MutationEvent"</c> ...
            If the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> is to be dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method the appropriate event init method must be called after
            creation in order to initialize the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            values.  As an example, a user wishing to synthesize some kind of
            <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> would call
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            with the parameter <c>"UIEvent"</c>. The
            <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">IUiEvent.InitUiEventNs</see>
            method could then be called on the newly created
            <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> object to set the specific
            type of user interface event to be dispatched,
            {<c>"http://www.w3.org/2001/xml-events"</c>,
            <c>"DOMActivate"</c>} for example, and set its context
            information, e.g.
            <see cref="P:SharpVectors.Dom.Events.IUiEvent.Detail">IUiEvent.Detail</see> in this example.
            </param>
            <returns>
            The newly created event object.
            </returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            NOT_SUPPORTED_ERR: Raised if the implementation does not support
            the <see cref="T:SharpVectors.Dom.Events.IEvent">Event</see> interface requested.
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Events.IDocumentEvent.CanDispatch(System.String,System.String)">
            <summary>
            Test if the implementation can generate events of a specified type.
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see> of the
            event.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> of the
            event.
            </param>
            <returns>
            <c>true</c> if the implementation can generate and dispatch this
            event type, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Events.IEvent">
            <summary>
            The Event interface is used to provide contextual information about an
            event to the listener processing the event.
            </summary>
            <remarks>
            An object which implements the <c>IEvent</c> interface is passed as
            the parameter to an <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>.
            More specific context information is passed to event listeners by
            deriving additional interfaces from <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>
            which contain information directly relating to the type of event
            they represent. These derived interfaces are also implemented by
            the object passed to the event listener.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Type">
            <summary>
            (DOM Level 2)
            The name must be an
            <see href="http://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-NCName">NCName</see>
            as defined in
            [<see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/references.html#Namespaces">XML Namespaces</see>]
            and is case-sensitive.
            </summary>
            <remarks>
            The character ":" (colon) should not be used in this attribute.
            If the attribute <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            is different from <c>null</c>, this attribute represents a
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-localname">local name</see>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Target">
            <summary>
            (DOM Level 2)
            Used to indicate the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event target</see>.
            </summary>
            <remarks>
            This attribute contains the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-node">target node</see>
            when used with the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.CurrentTarget">
            <summary>
            (DOM Level 2)
            Used to indicate the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> whose <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>s 
            are currently being processed.
            </summary>
            <remarks>
            This is particularly useful during the capture and bubbling phases. This attribute could contain the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-node">target node</see>
            or a target ancestor when used with the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.EventPhase">
            <summary>
            (DOM Level 2)
            Used to indicate which phase of event flow is currently being accomplished.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Bubbles">
            <summary>
            (DOM Level 2)
            Used to indicate whether or not an event is a bubbling event.
            </summary>
            <remarks>
            If the event can bubble the value is <c>true</c>, otherwise the value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.Cancelable">
            <summary>
            (DOM Level 2)
            Used to indicate whether or not an event can have its default action prevented.
            </summary>
            <remarks>
            If the default action can be prevented the value is <c>true</c>, otherwise the value is <c>false</c>.
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow-cancelation">Default actions and cancelable events</seealso>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.TimeStamp">
            <summary>
            (DOM Level 2)
            Used to specify the time at which the event was created.
            </summary>
            <remarks>
            Due to the fact that some systems may not provide this information the value of <see cref="P:SharpVectors.Dom.Events.IEvent.TimeStamp">TimeStamp</see> 
            may be not available for all events. When not available, a value of <c>0</c> will be returned. Examples of epoch 
            time are the time of the system start or 0:0:0 UTC 1st January 1970.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">
            <summary>
            (DOM Level 3 Experimental)
            The <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event at creation time, or <c>null</c> if it is unspecified.
            </summary>
            <remarks>
            For events initialized with a DOM Level 2 Events method, such as <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEvent</see>, 
            this is always <c>null</c>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.IsCustom">
            <summary>
            (DOM Level 3 Experimental)
            This method will always return <c>false</c>, unless the event implements the <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see>
            interface.
            </summary>
            <value>
            <c>true</c> if the event implements the <see cref="T:SharpVectors.Dom.Events.ICustomEvent">ICustomEvent</see> interface. <c>false</c> otherwise.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Events.IEvent.IsDefaultPrevented">
            <summary>
            (DOM Level 3 Experimental)
            This method will return true if the method
            <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see> has been called
            for this event, <c>false</c> otherwise.
            </summary>
            <value>
            <c>true</c> if <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see> has been called for this event.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.StopPropagation">
            <summary>
            (DOM Level 2)
            Prevent event listeners of the same group to be triggered.
            </summary>
            <remarks>
            <para>
            This method is used to prevent event listeners of the same group to be triggered but its effect is differed 
            until all event listeners attached on the currentTarget have been triggered. Once it has been called, further 
            calls to that method have no additional effect. 
            </para>
            <para>
            Note: This method does not prevent the default action from being invoked; use preventDefault for that effect.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-propagation-and-groups">
            Event propagation and event groups
            </seealso>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.PreventDefault">
            <summary>
            (DOM Level 2)
            Signify that the event is to be canceled.
            </summary>
            <remarks>
            <para>
            If an event is cancelable, the
            <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see> method is used to
            signify that the event is to be canceled, meaning any default
            action normally taken by the implementation as a result of the
            event will not occur and thus independently of event groups.
            Calling this method for a non-cancelable event has no effect.
            </para>
            <para>
            Note: This method does not stop the event propagation; use
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopPropagation">StopPropagation</see> or
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopImmediatePropagation">StopImmediatePropagation</see>
            for that effect.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow-cancelation">Default actions and cancelable events</seealso>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">
            <summary>
            (DOM Level 2)
            The <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEvent</see> method is used to initialize
            the value of an <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> created through the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> has been dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see> method. If the method is called 
            several times before invoking <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>,
            only the final invocation takes precedence. If called from a subclass of <see cref="T:SharpVectors.Dom.Events.IEvent">Event</see> 
            interface only the values specified in this method are modified, all other attributes are left unchanged. 
            This method sets the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> attribute to <c>eventTypeArg</c>, 
            and <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see> to <c>null</c>. To initialize an event with a 
            local name and namespace URI, use the <see cref="M:SharpVectors.Dom.Events.IEvent.InitEventNs(System.String,System.String,System.Boolean,System.Boolean)">InitEventNs</see> method.
            </remarks>
            <param name="eventTypeArg">Specifies the event type.</param>
            <param name="canBubbleArg">Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.</param>
            <param name="cancelableArg">Specifies whether or not the event's default action can be
            prevented. This parameter overrides the intrinsic cancelable behavior of the event.</param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.InitEventNs(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            (DOM Level 3 Experimental)
            The <see>InitEventNs</see> method is used to initialize the value
            of an <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> created through the
            <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> has been dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times the event has been
            dispatched. If called multiple times the final invocation takes
            precedence. If a call to <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEventNs</see>
            is made after one of the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> derived
            interfaces' init methods has been called, only the values
            specified in the <see cref="M:SharpVectors.Dom.Events.IEvent.InitEvent(System.String,System.Boolean,System.Boolean)">InitEventNs</see> method
            are modified, all other attributes are left unchanged.
            This method sets the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            attribute to <c>eventTypeArg</c>, and
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see> to
            <c>namespaceUriArg</c>.
            </remarks>
            <param name="namespaceUriArg">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if no namespace.
            </param>
            <param name="eventTypeArg">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-localname">local name</see>
            of the event type (see also the description of
            <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>).
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">Specifies whether or not the event's default action can be prevented.</param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEvent.StopImmediatePropagation">
            <summary>
            (DOM Level 3 Experimental)
            Immediately prevent event listeners of the same group to be triggered.
            </summary>
            <remarks>
            <para>
            This method is used to prevent event listeners of the same group to be triggered and, unlike
            <see cref="M:SharpVectors.Dom.Events.IEvent.StopPropagation">StopPropagation</see> its effect is immediate. Once it has been called, 
            further calls to that method have no additional effect.
            </para>
            <para>
            Note: This method does not prevent the default action from being
            invoked; use <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">PreventDefault</see> for
            that effect.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-propagation-and-groups">Event propagation and event groups</seealso>
        </member>
        <member name="T:SharpVectors.Dom.Events.EventExceptionCode">
            <summary>
            An integer indicating the type of error generated.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventExceptionCode.UnspecifiedEventTypeErr">
            <summary>
            If the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> was not specified
            by initializing the event before the method was called.
            Specification of the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> as
            <c>null</c> or an empty string will also trigger this exception.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.EventExceptionCode.DispatchRequestErr">
            <summary>
            If the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see> object is already
            dispatched in the tree.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.IEventListener">
            <summary>
            This interface represents an object that can handle an event dispatched by an <see cref="T:SharpVectors.Dom.Events.IEventTarget"/> object.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventListener.HandleEvent(SharpVectors.Dom.Events.IEvent)">
            <summary>
            A function that is called whenever an event of the specified type occurs.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Events.IEventTarget">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> interface is
            implemented by all the objects which could be
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event targets</see>
            in an implementation which supports the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flows">Event flows</see>.
            </summary>
            <remarks>
            <para>
            The interface allows registration, removal or query of event
            listeners, and dispatch of events to an event target.
            </para>
            <para>
            When used with
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-flow">DOM event flow</see>,
            this interface is implemented by all
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-node">target nodes</see>
            and target ancestors, i.e. all DOM <see cref="T:SharpVectors.Dom.INode">INode</see>s of
            the tree support this interface when the implementation conforms to
            DOM Level 3 Events and, therefore, this interface can be obtained by
            using binding-specific casting methods on an instance of the
            <see cref="T:SharpVectors.Dom.INode">Node</see> interface.
            </para>
            <para>
            Invoking multiple times
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.AddEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">AddEventListener</see> or
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean,System.Object)">AddEventListenerNs</see> on the same
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> with the same parameters
            (<c>namespaceUri</c>, <c>type</c>, <c>listener</c>, and
            <c>useCapture</c>) is considered to be a no-op and thus independently
            of the event group. They do not cause the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> to be called more
            than once and do not cause a change in the triggering order. In order
            to guarantee that an event listener will be added to the event target
            for the specified event group, one needs to invoke
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListener</see> or
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListenerNs</see> first.
            </para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.AddEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">
            <summary>
            This method allows the registration of an event listener in the
            default group and, depending on the <c>useCapture</c> parameter,
            on the capture phase of the DOM event flow or its target and
            bubbling phases. <see href="https://www.w3.org/TR/SVG/interact.html#SVGEvents"/>
            </summary>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> associated
            with the event for which the user is registering. 
            </param>
            <param name="listener">
            The listener parameter takes an object implemented by the user
            which implements the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> interface and
            contains the method to be called when the event occurs.
            </param>
            <param name="useCapture">
            If <c>true</c>, <c>useCapture</c> indicates that the user wishes
            to add the event listener for the
            <see href="https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">capture phase</see>
            only, i.e. this event listener will not be triggered during the
            <see href="https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-phase">target</see>
            and
            <see href="https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-bubbling-phase">bubbling phases</see>.
            If <c>false</c>, the event listener will only be triggered during the target and bubbling phases.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">
            <summary>
            This method allows the removal of event listeners from the default
            group.
            </summary>
            <remarks>
            Calling <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListener(System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListener</see>
            with arguments which do not identify any currently registered
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> on the
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> has no effect. 
            </remarks>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> for which
            the user registered the event listener.
            </param>
            <param name="listener">
            The <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> to be removed.
            </param>
            <param name="useCapture">
            Specifies whether the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> being removed was
            registered for the capture phase or not. If a listener was
            registered twice, once for the capture phase and once for the
            target and bubbling phases, each must be removed separately.
            Removal of an event listener registered for the capture phase does
            not affect the same event listener registered for the target and
            bubbling phases, and vice versa.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">
            <summary>
            This method allows the dispatch of events into the
            implementation's event model.
            </summary>
            <remarks>
            The
            <see href="https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-event-target">event target</see>
            of the event is the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>
            object on which <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">DispatchEvent</see>
            is called.
            </remarks>
            <param name="evt">
            The event to be dispatched.
            </param>
            <returns>
            Indicates whether any of the listeners which handled the event
            called
            <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">IEvent.PreventDefault</see>.
            If <see cref="M:SharpVectors.Dom.Events.IEvent.PreventDefault">IEvent.PreventDefault</see>
            was called the returned value is <c>false</c>, else it is
            <c>true</c>.
            </returns>
            <exception cref="T:SharpVectors.Dom.Events.EventException">
            <para>
            UNSPECIFIED_EVENT_TYPE_ERR: Raised if the Event.type was not
            specified by initializing the event before dispatchEvent was
            called. Specification of the Event.type as null or an empty
            string will also trigger this exception.
            </para>
            <para>
            DISPATCH_REQUEST_ERR: Raised if the Event object is already being
            dispatched in the tree.
            </para>
            <para>
            NOT_SUPPORTED_ERR: Raised if the Event object has not been
            created using DocumentEvent.createEvent or does not support the
            interface CustomEvent.
            </para>
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.AddEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean,System.Object)">
            <summary>
            This method allows the registration of an event listener in a
            specified group or the default group and, depending on the
            <c>useCapture</c> parameter, on the capture phase of the DOM
            event flow or its target and bubbling phases.
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event for which the user is registering.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            associated with the event for which the user is registering.
            </param>
            <param name="listener">
            The <c>listener</c> parameter takes an object implemented by
            the user which implements the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> interface and
            contains the method to be called when the event occurs.
            </param>
            <param name="useCapture">
            If <c>true</c>, <c>useCapture</c> indicates that the user wishes
            to add the event listener for the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-capture-phase">capture phase only</see>,
            i.e. this event listener will not be triggered during the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-target-phase">target</see>
            and
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-bubbling-phase">bubbling phases</see>.
            If <c>false</c>, the event listener will only be triggered
            during the target and bubbling phases.
            </param>
            <param name="evtGroup">
            The object that represents the event group to associate with the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see>. Use <c>null</c> to
            attach the event listener to the default group.
            </param>
            <seealso href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-propagation-and-groups">
            Event propagation and event groups
            </seealso>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">
            <summary>
            This method allows the removal of event listeners from a specified
            group or the default group.
            </summary>
            <remarks>
            Calling
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.RemoveEventListenerNs(System.String,System.String,SharpVectors.Dom.Events.EventListener,System.Boolean)">RemoveEventListenerNs</see> with
            arguments which do not identify any currently registered
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> on the EventTarget
            has no effect.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event for which the user registered the event
            listener.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see> associated
            with the event for which the user registered the event listener.
            </param>
            <param name="listener">
            The <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> parameter
            indicates the <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> to
            be removed.
            </param>
            <param name="useCapture">
            Specifies whether the
            <see cref="T:SharpVectors.Dom.Events.EventListener">EventListener</see> being removed was
            registered for the capture phase or not. If a listener was
            registered twice, once for the capture phase and once for the
            target and bubbling phases, each must be removed separately.
            Removal of an event listener registered for the capture phase
            does not affect the same event listener registered for the target
            and bubbling phases, and vice versa.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(System.String,System.String)">
            <summary>
            This method allows the DOM application to know if an event
            listener, attached to this
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> or one of its
            ancestors, will be triggered by the specified event type during
            the dispatch of the event to this event target or one of its
            descendants.
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            associated with the event.
            </param>
            <returns>
            <c>true</c> if an event listener will be triggered on the
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> with the specified
            event type, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Events.IEventTarget.HasEventListenerNs(System.String,System.String)">
            <summary>
            This method allows the DOM application to know if this
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> contains an event
            listener registered for the specified event type.
            </summary>
            <remarks>
            This is useful for determining at which nodes within a hierarchy
            altered handling of specific event types has been introduced, but
            should not be used to determine whether the specified event type
            triggers an event listener.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see cref="P:SharpVectors.Dom.Events.IEvent.NamespaceUri">IEvent.NamespaceUri</see>
            associated with the event.
            </param>
            <param name="type">
            Specifies the <see cref="P:SharpVectors.Dom.Events.IEvent.Type">IEvent.Type</see>
            associated with the event.
            </param>
            <returns>
            <c>true</c> if an event listener is registered on this
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> for the specified
            event type, <c>false</c> otherwise.
            </returns>
            <seealso cref="M:SharpVectors.Dom.Events.IEventTarget.WillTriggerNs(System.String,System.String)">WillTriggerNs</seealso>
        </member>
        <member name="T:SharpVectors.Dom.Events.IKeyboardEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> interface provides
            specific contextual information associated with keyboard devices.
            </summary>
            <remarks>
            <para>
            Each keyboard event reference a key using an identifier.
            </para>
            <para>
            Each modifier attribute
            (<see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">CtrlKey</see>,
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">ShiftKey</see>,
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">AltKey</see>,
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">MetaKey</see>,
            and <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">AltGraphKey</see>) is activated when the
            key modifier is being pressed down or maintained pressed, i.e. the
            modifier attribute is not in use when the key modifier is being
            released.
            </para>
            <para>
            Note: To create an instance of the
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> interface, use the
            feature string <c>"KeyboardEvent"</c> as the value of the input
            parameter used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyIdentifier">
            <summary>
            Holds the identifier of the key.
            </summary>
            <remarks>
            <para>
            For a list of possible values, refer to
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/keyset.html#KeySet">Key identifiers for keyboard events</see>.
            </para>
            <para>
            Note: Implementations that are unable to identify a key must use the key identifier "Unidentified".
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyLocation">
            <summary>
            Contains an indication of the location of they key on the device.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">
            <summary>
            <c>true</c> if the control (Ctrl) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">
            <summary>
            <c>true</c> if the shift (Shift) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">
            <summary>
            <c>true</c> if the alt (alternative) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">
            <summary>
            <c>true</c> if the meta (Meta) key modifier is activated.
            </summary>
            <remarks>
            Note: The Command key modifier on Macintosh system must be
            represented using this key modifier.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">
            <summary>
            true if the alt-graph (Alt Gr) key modifier is activated. 
            </summary>
            <remarks>
            Note: Some operating systems simulate the alt-graph key modifier
            with the combinaison of alt and ctrl key modifiers.
            Implementations are encouraged to use this modifier instead.
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">InitKeyboardEvent</see> method
            is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times before being
            dispatched if necessary. If called multiple times, the final
            invocation takes precedence. This method has no effect if called
            after the event has been dispatched.
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>.
            </param>
            <param name="keyIdentifierArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyIdentifier">KeyIdentifier</see> attribute.
            </param>
            <param name="keyLocationArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyLocation">KeyLocation</see> attribute.
            </param>
            <param name="ctrlKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">CtrlKey</see> attribute.
            </param>
            <param name="shiftKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">ShiftKey</see> attribute.
            </param>
            <param name="altKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">AltKey</see> attribute.
            </param>
            <param name="metaKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">MetaKey</see> attribute.
            </param>
            <param name="altGraphKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">AltGraphKey</see> attribute.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IKeyboardEvent.InitKeyboardEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String,SharpVectors.Dom.Events.KeyLocationCode,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">InitKeyboardEventNs</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence. This method has no effect if called after the
            event has been dispatched.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or null if the applications wish to
            have no namespace.
            </param>
            <param name="type">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>.
            </param>
            <param name="keyIdentifierArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyIdentifier">KeyIdentifier</see> attribute.
            </param>
            <param name="keyLocationArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.KeyLocation">KeyLocation</see> attribute.
            </param>
            <param name="ctrlKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.CtrlKey">CtrlKey</see> attribute.
            </param>
            <param name="shiftKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.ShiftKey">ShiftKey</see> attribute.
            </param>
            <param name="altKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltKey">AltKey</see> attribute.
            </param>
            <param name="metaKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.MetaKey">MetaKey</see> attribute.
            </param>
            <param name="altGraphKeyArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IKeyboardEvent">IKeyboardEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IKeyboardEvent.AltGraphKey">AltGraphKey</see> attribute.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IMouseEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> interface provides
            specific contextual information associated with Mouse events.
            </summary>
            <remarks>
            <para>
            In the case of nested elements mouse events are always targeted at
            the most deeply nested element. Ancestors of the targeted element
            may use bubbling to obtain notification of mouse events which
            occur within its descendent elements.
            </para>
            <para>
            Note: To create an instance of the MouseEvent interface, use the
            feature string "MouseEvent" as the value of the input parameter
            used with the DocumentEvent.createEvent method.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ScreenX">
            <summary>
            The horizontal coordinate at which the event occurred relative
            to the origin of the screen coordinate system.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ScreenY">
            <summary>
            The vertical coordinate at which the event occurred relative to
            the origin of the screen coordinate system.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ClientX">
            <summary>
            The horizontal coordinate at which the event occurred relative
            to the DOM implementation's client area.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ClientY">
            <summary>
            The vertical coordinate at which the event occurred relative to
            the DOM implementation's client area.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.CtrlKey">
            <summary>
            <c>true</c> if the control (Ctrl) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.ShiftKey">
            <summary>
            <c>true</c> if the shift (Shift) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.AltKey">
            <summary>
            <c>true</c> if the alt (alternative) key modifier is activated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.MetaKey">
            <summary>
            <c>true</c> if the meta (Meta) key modifier is activated. 
            </summary>
            <remarks>
            Note: The Command key modifier on Macintosh system must be represented using this key modifier.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.Button">
            <summary>
            During mouse events caused by the depression or release of a mouse
            button, button is used to indicate which mouse button changed
            state.
            </summary>
            <remarks>
            <c>0</c> indicates the normal (in general on the left or
            the one button on Macintosh mice, used to activate a button or
            select text) button of the mouse. <c>2</c> indicates the contextual
            property (in general on the right, used to display a context menu)
            button of the mouse if present. <c>1</c> indicates the extra (in
            general in the middle and often combined with the mouse wheel)
            button. Some mice may provide or simulate more buttons and values
            higher than <c>2</c> could be used to represent such buttons.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.RelatedTarget">
            <summary>
            Used to identify a secondary EventTarget related to a UI event.
            </summary>
            <remarks>
            Currently this attribute is used with the mouseover event to
            indicate the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> which
            the pointing device exited and with the mouseout event to
            indicate the <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see> which
            the pointing device entered.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMouseEvent.AltGraphKey">
            <summary>
            <c>true</c> if the alt-graph (Alt Gr) key modifier is activated.
            </summary>
            <remarks>
            Note: Some operating systems simulate the alt-graph key modifier
            with the combinaison of alt and ctrl key modifiers.
            Implementations are encouraged to use this modifier instead.
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget)">InitMouseEvent</see> method is used
            to initialize the value of a MouseEvent created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times before being
            dispatched. If called multiple times, the final invocation
            takes precedence. 
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s view.
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse click count.
            </param>
            <param name="screenXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen x
            coordinate.
            </param>
            <param name="screenYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen y
            coordinate.
            </param>
            <param name="clientXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client x
            coordinate.
            </param>
            <param name="clientYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client y
            coordinate.
            </param>
            <param name="ctrlKeyArg">
            Specifies whether or not control key was depressed during
            the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="altKeyArg">
            Specifies whether or not alt key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="shiftKeyArg">
            Specifies whether or not shift key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="metaKeyArg">
            Specifies whether or not meta key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="buttonArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse button.
            </param>
            <param name="relatedTargetArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget,System.Boolean)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMouseEvent.InitMouseEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16,SharpVectors.Dom.Events.IEventTarget,System.Boolean)">InitMouseEventNs</see> method
            is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            interface.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMouseEvent">IMouseEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or null if the application wish to
            have no namespace.
            </param>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s AbstractView.
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse click count.
            </param>
            <param name="screenXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen x
            coordinate.
            </param>
            <param name="screenYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s screen y
            coordinate.
            </param>
            <param name="clientXArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client x
            coordinate.
            </param>
            <param name="clientYArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s client y
            coordinate.
            </param>
            <param name="ctrlKeyArg">
            Specifies whether or not control key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="altKeyArg">
            Specifies whether or not alt key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="shiftKeyArg">
            Specifies whether or not shift key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
            <param name="metaKeyArg">
            Specifies whether or not meta key was depressed during the Event.
            </param>
            <param name="buttonArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s mouse button.
            </param>
            <param name="relatedTargetArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related
            <see cref="T:SharpVectors.Dom.Events.IEventTarget">IEventTarget</see>.
            </param>
            <param name="altGraphKeyArg">
            Specifies whether or not alt graph key was depressed during the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IMutationEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> interface provides specific contextual 
            information associated with Mutation events.
            </summary>
            <remarks>
            Note: To create an instance of the <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> interface, use the
            feature string <c>"MutationEvent"</c> as the value of the input parameter used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see> method.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">RelatedNode</see> is used to identify a secondary node related to a 
            mutation event.
            </summary>
            <remarks>
            For example, if a mutation event is dispatched to a node indicating that its parent
            has changed, the <see cref="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">RelatedNode</see> is the changed parent. If an event 
            is instead dispatched to a subtree indicating a node was changed within it, the 
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">RelatedNode</see> is the changed node. In the case of the
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see> event it indicates the 
            attribute node which was modified, added, or removed.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">PrevValue</see> indicates the previous value
            of the attribute node in
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see>
            events, and of the <see cref="T:SharpVectors.Dom.ICharacterData">ICharacterData</see>
            node in DOMCharacterDataModified events.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">NewValue</see> indicates the new value of the
            attribute node in DOMAttrModified events, and
            of the <see cref="T:SharpVectors.Dom.ICharacterData">ICharacterData</see> node in
            DOMCharacterDataModified events.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">AttrName</see> indicates the name of the
            changed attribute node in a
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see>
            event.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationEvent.AttrChange">
            <summary>
            <c>attrChange</c> indicates the type of change which triggered
            the DOMAttrModified event. The values can be
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Modification">AttrChangeType.Modification</see>,
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Addition">AttrChangeType.Addition</see>,
            or
            <see cref="F:SharpVectors.Dom.Events.AttrChangeType.Removal">AttrChangeType.Removal</see>.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">InitMutationEvent</see> method
            is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times before being
            dispatched if necessary. If called multiple times, the final
            invocation takes precedence.
            </summary>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">PrevValue</see> attribute. This value may
            be <c>null</c>.
            </param>
            <param name="newValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">NewValue</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrNameArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">AttrName</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrChangeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrChange">AttrChange</see> attribute.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMutationEvent.InitMutationEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String,System.String,SharpVectors.Dom.Events.AttrChangeType)">InitMutationEventNs</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationEvent">IMutationEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence.
            </remarks>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or null if the application wish to
            have no namespace.
            </param>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.PrevValue">PrevValue</see> attribute. This value may
            be <c>null</c>.
            </param>
            <param name="newValueArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.NewValue">NewValue</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrNameArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrName">AttrName</see> attribute. This value may be
            <c>null</c>.
            </param>
            <param name="attrChangeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.AttrChange">AttrChange</see> attribute.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IMutationNameEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> interface
            provides specific contextual information associated with Mutation
            name event types.
            </summary>
            <remarks>
            Note: To create an instance of the
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> interface,
            use the feature string <c>"MutationNameEvent"</c> as the value of the
            input parameter used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">CreateEvent</see> method of the
            <see cref="T:SharpVectors.Dom.Events.IDocumentEvent">IDocumentEvent</see> interface.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationNameEvent.PrevNamespaceUri">
            <summary>
            The previous value of the
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">RelatedNode</see>'s namespace URI.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IMutationNameEvent.PrevNodeName">
            <summary>
            The previous value of the
            <see cref="P:SharpVectors.Dom.Events.IMutationEvent.RelatedNode">RelatedNode</see>'s nodeName.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">InitMutationNameEvent</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> created
            using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence.
            </summary>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be prevented.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevNamespaceUri">
            Specifies the previous <see cref="P:SharpVectors.Dom.IXmlNode.NamespaceURI">NamespaceUri</see>
            of the related <see cref="T:SharpVectors.Dom.INode">INode</see>. This value may be
            <c>null</c>.
            </param>
            <param name="prevNodeName">
            Specifies the previous <see cref="P:SharpVectors.Dom.IXmlNode.Name">NodeName</see> of the
            related Node.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">
            <summary>
            The
            <see cref="M:SharpVectors.Dom.Events.IMutationNameEvent.InitMutationNameEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.INode,System.String,System.String)">InitMutationNameEventNs</see>
            method is used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> created
            using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IMutationNameEvent">IMutationNameEvent</see> has been
            dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence. 
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see href="https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if the application
            wish to have no namespace.
            </param>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be prevented.
            </param>
            <param name="relatedNodeArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s related Node.
            </param>
            <param name="prevNamespaceUri">
            Specifies the previous
            <see cref="P:SharpVectors.Dom.IXmlNode.NamespaceURI">NamespaceUri</see> of the related
            Node. This value may be <c>null</c>.
            </param>
            <param name="prevNodeName">
            Specifies the previous <see cref="P:SharpVectors.Dom.IXmlNode.Name">NodeName</see>
            of the related Node.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.ITextEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> interface provides
            specific contextual information associated with Text Events.
            </summary>
            <remarks>
            Note: To create an instance of the
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> interface, use the
            feature string <c>"TextEvent"</c> as the value of the input parameter
            used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.ITextEvent.Data">
            <summary>
            <see cref="P:SharpVectors.Dom.Events.ITextEvent.Data">Data</see> holds the value of the characters
            generated by the character device. This may be a single
            Unicode character or it may be a string.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.ITextEvent.InitTextEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.ITextEvent.InitTextEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">InitTextEvent</see> method is used
            to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence. This method has no effect if called after the event
            has been dispatched.
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">TextEvent</see>'s view.
            </param>
            <param name="dataArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">TextEvent</see>'s data
            attribute.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.ITextEvent.InitTextEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.ITextEvent.InitTextEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.String)">InitTextEventNs</see> method is
            used to initialize the value of a
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence. This method has no effect if called after the event
            has been dispatched. 
            </summary>
            <param name="namespaceUri">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if the applications
            wish to have no namespace.
            </param>
            <param name="type">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevent.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see>'s view.
            </param>
            <param name="dataArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.ITextEvent">ITextEvent</see>'s data
            attribute
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.ITimeEvent">
            <summary>
            This interface, defined in SMIL Animation: Supported interfaces, provides specific 
            contextual information associated with Time events.
            </summary>
            <remarks>
            <para>The different types of events that can occur are:</para>
            <para>
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.ITimeEvent.View">
            <summary>
            The view attribute identifies the <see cref="T:SharpVectors.Dom.Views.IAbstractView"/> from which the event was generated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.ITimeEvent.Detail">
            <summary>
            Specifies some detail information about the Event, depending on the type of the event. 
            For this event type, indicates the repeat number for the animation.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.ITimeEvent.InitTimeEvent(System.String,SharpVectors.Dom.Views.IAbstractView,System.Int64)">
            <summary>
            This method is used to initialize the value of a <see cref="T:SharpVectors.Dom.Events.ITimeEvent"/> created through 
            the <see cref="T:SharpVectors.Dom.Events.IDocumentEvent"/> interface. This method may only be called before the 
            <see cref="T:SharpVectors.Dom.Events.ITimeEvent"/> has been dispatched via the dispatchEvent method, though it may 
            be called multiple times during that phase if necessary. If called multiple times, the 
            final invocation takes precedence.
            </summary>
            <param name="typeArg">Specifies the event type.</param>
            <param name="viewArg">Specifies the event's <see cref="T:SharpVectors.Dom.Views.IAbstractView"/>.</param>
            <param name="detailArg">Specifies the event's detail.</param>
        </member>
        <member name="T:SharpVectors.Dom.Events.IUiEvent">
            <summary>
            The <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> interface provides specific
            contextual information associated with User Interface events.
            </summary>
            <remarks>
            Note: To create an instance of the <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see>
            interface, use the feature string <c>"UIEvent"</c> as the value of the
            input parameter used with the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Events.IUiEvent.View">
            <summary>
            The <see cref="P:SharpVectors.Dom.Events.IUiEvent.View">View</see> attribute identifies the
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see> from which the
            event was generated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Events.IUiEvent.Detail">
            <summary>
            Specifies some detail information about the
            <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>, depending on the type of event.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Events.IUiEvent.InitUiEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">InitUiEvent</see> method is used to
            initialize the value of a <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see>
            created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method.
            </summary>
            <remarks>
            This method may only be called before the
            <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEvent(System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">InitUiEvent</see> has been dispatched via
            the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation takes
            precedence.
            </remarks>
            <param name="typeArg">
            Specifies the event type.
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble. This parameter
            overrides the intrinsic bubbling behavior of the event.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be
            prevented. This parameter overrides the intrinsic cancelable
            behavior of the event.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>.
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s detail.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Events.IUiEvent.InitUiEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">
            <summary>
            The <see cref="M:SharpVectors.Dom.Events.IUiEvent.InitUiEventNs(System.String,System.String,System.Boolean,System.Boolean,SharpVectors.Dom.Views.IAbstractView,System.Int64)">InitUiEventNs</see> method is used
            to initialize the value of a <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see>
            created using the
            <see cref="M:SharpVectors.Dom.Events.IDocumentEvent.CreateEvent(System.String)">IDocumentEvent.CreateEvent</see>
            method. This method may only be called before the
            <see cref="T:SharpVectors.Dom.Events.IUiEvent">IUiEvent</see> has been dispatched via the
            <see cref="M:SharpVectors.Dom.Events.IEventTarget.DispatchEvent(SharpVectors.Dom.Events.IEvent)">IEventTarget.DispatchEvent</see>
            method, though it may be called multiple times during that phase
            if necessary. If called multiple times, the final invocation
            takes precedence. 
            </summary>
            <param name="namespaceURI">
            Specifies the
            <see href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/glossary.html#dt-namespaceURI">namespace URI</see>
            associated with this event, or <c>null</c> if the application wish
            not to use namespaces.
            </param>
            <param name="typeArg">
            Specifies the event type (see also the description of the
            <c>type</c> attribute in the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>
            interface).
            </param>
            <param name="canBubbleArg">
            Specifies whether or not the event can bubble.
            </param>
            <param name="cancelableArg">
            Specifies whether or not the event's default action can be prevented.
            </param>
            <param name="viewArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">Event</see>'s
            <see cref="T:SharpVectors.Dom.Views.IAbstractView">IAbstractView</see>
            </param>
            <param name="detailArg">
            Specifies the <see cref="T:SharpVectors.Dom.Events.IEvent">IEvent</see>'s detail.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.Events.KeyLocationCode">
            <remarks>
            Note: In case a DOM implementation wishes to provide new location
            information, all values above the value of this constant can be
            used for that effect and generic DOM applications should consider
            values above the value of this constant as being equivalent to
            <see cref="F:SharpVectors.Dom.Events.KeyLocationCode.Unknown">Unknown</see>.
            </remarks>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Standard">
            <summary>
            The key activation is not distinguished as the left or right
            version of the key, and did not originate from the numeric
            keypad (or did not originate with a virtual key corresponding to
            the numeric keypad). Example: the 'Q' key on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Left">
            <summary>
            The key activated is in the left key location (there is more than
            one possible location for this key). Example: the left Shift key
            on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Right">
            <summary>
            The key activation is in the right key location (there is more
            than one possible location for this key). Example: the right
            Shift key on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Numpad">
            <summary>
            The key activation originated on the numeric keypad or with a
            virtual key corresponding to the numeric keypad. Example: the
            '1' key on a PC 101 Key US.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Events.KeyLocationCode.Unknown">
            <summary>
            Implementations can use this constant to indicate that the
            location of the key cannot be determined.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IAttribute">
            <summary>
            Summary description for IAttribute.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.ICDataSection">
            <summary>
            Summary description for ICDataSection.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.ICharacterData">
            <summary>
            Provides text manipulation methods that are used by several classes.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.ICharacterData.Data">
            <summary>Contains the data of the node.</summary>
            <value>The data of the node.</value>
        </member>
        <member name="P:SharpVectors.Dom.ICharacterData.Length">
            <summary>Gets the length of the data, in characters.</summary>
            <value>The length, in characters, of the string in the <see cref="P:SharpVectors.Dom.ICharacterData.Data"/>
            property. The length may be zero; that is, <see cref="T:SharpVectors.Dom.ICharacterData"/> nodes can be empty.</value>
        </member>
        <member name="M:SharpVectors.Dom.ICharacterData.AppendData(System.String)">
            <summary>Appends the specified string to the end of the character data of the node.</summary>
            <param name="strData">The string to insert into the existing string.</param>
        </member>
        <member name="M:SharpVectors.Dom.ICharacterData.DeleteData(System.Int32,System.Int32)">
            <summary>Removes a range of characters from the node.</summary>
            <param name="offset">The position within the string to start deleting.</param>
            <param name="count">The number of characters to delete.</param>
        </member>
        <member name="M:SharpVectors.Dom.ICharacterData.InsertData(System.Int32,System.String)">
            <summary>Inserts the specified string at the specified character offset.</summary>
            <param name="offset">The position within the string to insert the supplied string data.</param>
            <param name="strData">The string data that is to be inserted into the existing string.</param>
        </member>
        <member name="M:SharpVectors.Dom.ICharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
            <summary>
            Replaces the specified number of characters starting at the specified offset
            with the specified string.
            </summary>
            <param name="offset">The position within the string to start replacing.</param>
            <param name="count">The number of characters to replace.</param>
            <param name="strData">The new data that replaces the old string data.</param>
        </member>
        <member name="M:SharpVectors.Dom.ICharacterData.Substring(System.Int32,System.Int32)">
            <summary>Retrieves a substring of the full string from the specified range.</summary>
            <param name="offset">
            The position within the string to start retrieving. An offset of zero indicates
            the starting point is at the start of the data.
            </param>
            <param name="count">The number of characters to retrieve.</param>
            <returns>The substring corresponding to the specified range.</returns>
        </member>
        <member name="T:SharpVectors.Dom.IComment">
            <summary>
            Summary description for IComment.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IDocument">
            <summary>
            
            </summary>
            <see cref="T:System.Xml.XmlDocument"/>
        </member>
        <member name="M:SharpVectors.Dom.IDocument.CanAccessExternalResources(System.String)">
            <summary>
            Check if the Document allows access of external resource
            </summary>
            <param name="resourcesUri">the URI to the external resource</param>
            <returns>
            This returns <see langword="true"/> if access of external resource is allowed;
            otherwise, it return <see langword="false"/>.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.IDocumentFragment">
            <summary>
            Represents a lightweight object that is useful for tree insert operations.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.IDocumentType">
            <summary>
            This represents the document type declaration.
            </summary>
            <seealso cref="T:System.Xml.XmlDocumentType"/>
        </member>
        <member name="P:SharpVectors.Dom.IDocumentType.Entities">
            <summary>
            Gets the collection of <see cref="T:System.Xml.XmlEntity"/> nodes declared in the document type declaration.
            </summary>
            <value>
            An <see cref="T:System.Xml.XmlNamedNodeMap"/> containing the <see cref="T:System.Xml.XmlEntity"/> nodes. 
            The returned <see cref="T:System.Xml.XmlNamedNodeMap"/> is read-only.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.IDocumentType.Notations">
            <summary>
             Gets the collection of <see cref="T:System.Xml.XmlNotation"/> nodes present in the document type declaration.
            </summary>
            <value>
             An <see cref="T:System.Xml.XmlNamedNodeMap"/> containing the <see cref="T:System.Xml.XmlNotation"/> nodes. The returned
             <see cref="T:System.Xml.XmlNamedNodeMap"/> is read-only.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.IDocumentType.PublicId">
            <summary>
             Gets the value of the public identifier on the <c>DOCTYPE</c> declaration.
            </summary>
            <value>
             The public identifier on the <c>DOCTYPE</c>. If there is no public identifier, <see langword="null"/>
             is returned.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.IDocumentType.SystemId">
            <summary>
             Gets the value of the system identifier on the <c>DOCTYPE</c> declaration.
            </summary>
            <value>
             The system identifier on the <c>DOCTYPE</c>. If there is no system identifier, <see langword="null"/>
             is returned.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.IDocumentType.InternalSubset">
            <summary>
             Gets the value of the document type definition (DTD) internal subset on the <c>DOCTYPE</c> declaration.
            </summary>
            <value>
             The DTD internal subset on the <c>DOCTYPE</c>. If there is no DTD internal subset, <see cref="F:System.String.Empty"/>
             is returned.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.IDomConfiguration">
            <summary>
            The <see cref="T:SharpVectors.Dom.IDomConfiguration"/> interface represents the configuration of a document 
            and maintains a table of recognized parameters.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/DOMConfiguration">DOMConfiguration</seealso>
        </member>
        <member name="M:SharpVectors.Dom.IDomConfiguration.CanSetParameter(System.String,System.Object)">
            <summary>
            Check if setting a parameter to a specific value is supported.
            </summary>
            <param name="name">The name of the parameter to check.</param>
            <param name="value">An object. If <see langword="null"/>, the returned value is <see langword="true"/>.</param>
            <returns>Returns <see langword="true"/> if the parameter could be successfully set to the specified value, 
            or <see langword="false"/> if the parameter is not recognized or the requested value is not supported. 
            This does not change the current value of the parameter itself.</returns>
        </member>
        <member name="M:SharpVectors.Dom.IDomConfiguration.GetParameter(System.String)">
            <summary>
            Gets the value of the known parameter with the specified name.
            </summary>
            <param name="name">The name of the parameter.</param>
            <returns>The current object associated with the specified parameter or <see langword="null"/> if no object 
            has been associated or if the parameter is not supported.</returns>
        </member>
        <member name="M:SharpVectors.Dom.IDomConfiguration.SetParameter(System.String,System.Object)">
            <summary>
            Sets the name and the value of a parameter. If the name is already set, the value is changed.
            </summary>
            <param name="name">The name of the parameter to set.</param>
            <param name="value">The value or <see langword="null"/> to unset the parameter.</param>
        </member>
        <member name="M:SharpVectors.Dom.IDomConfiguration.GetParameterNames">
            <summary>
            The list of the parameters supported by this <see cref="T:SharpVectors.Dom.IDomConfiguration"/> object.
            </summary>
            <returns>A collection specifying the names of the parameters.</returns>
        </member>
        <member name="T:SharpVectors.Dom.IDomImplementation">
            <summary>
            The <see cref="T:SharpVectors.Dom.IDomImplementation"/> interface provides a number of methods for performing operations 
            that are independent of any particular instance of the document object model.
            </summary>
            <seealso href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
        </member>
        <member name="M:SharpVectors.Dom.IDomImplementation.HasFeature(System.String,System.String)">
            <summary>
            Test if the DOM implementation implements a specific feature. </summary>
            <param name="feature"> name of the feature to test (case-insensitive). The values used by DOM features 
            are defined throughout the DOM Level 2 specifications and listed in the  section. The name must be an XML
            name. To avoid possible conflicts, as a convention, names referring to features defined outside the DOM 
            specification should be made unique by reversing the name of the Internet domain name of the person 
            (or the organization that the person belongs to) who defines the feature, component by component, and using 
            this as a prefix. For instance, the W3C SVG Working Group defines the feature "org.w3c.dom.svg".
            </param>
            <param name="version"> is the version number of the feature to test. In Level 2, the string can be 
            either "2.0" or "1.0". If the version is not specified, supporting any version of the feature causes 
            the method to return <see langword="true"/>. </param>
            <returns> <see langword="true"/> if the feature is implemented in the specified version, 
            <see langword="false"/> otherwise. </returns>
        </member>
        <member name="M:SharpVectors.Dom.IDomImplementation.CreateDocumentType(System.String,System.String,System.String)">
            <summary>
            Creates an empty <see cref="T:SharpVectors.Dom.IDocumentType"/> node. Entity declarations and notations are not made available. 
            </summary>
            <remarks>
            Entity reference expansions and default attribute additions do not occur. It is expected that a 
            future version of the DOM will provide a way for populating a <see cref="T:SharpVectors.Dom.IDocumentType"/>.
            HTML-only DOM implementations do not need to implement this method. 
            </remarks>
            <param name="qualifiedName"> qualified name of the document type to be created. </param>
            <param name="publicId"> external subset public identifier. </param>
            <param name="systemId"> external subset system identifier. </param>
            <returns> A new <see cref="T:SharpVectors.Dom.IDocumentType"/> node with <see cref="P:SharpVectors.Dom.IXmlNode.OwnerDocument"/> 
            set to <see langword="null"/>. </returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            INVALID_CHARACTER_ERR: Raised if the specified qualified name contains an illegal character.
            <para>
            NAMESPACE_ERR: Raised if the <paramref name="qualifiedName"/> is malformed.
            </para>
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.IDomImplementation.CreateDocument(System.String,System.String,SharpVectors.Dom.IDocumentType)">
            <summary>
            Creates an XML <see cref="T:SharpVectors.Dom.IDocument"/> object of the specified type with 
            its document element. HTML-only DOM implementations do not need to 
            implement this method. 
            </summary>
            <param name="namespaceURI"> namespace URI of the document element to create. </param>
            <param name="qualifiedName"> qualified name of the document element to be created. </param>
            <param name="doctype"> type of document to be created or <see langword="null"/>. 
            When <paramref name="doctype"/> is not <see langword="null"/>, its <see cref="P:SharpVectors.Dom.IXmlNode.OwnerDocument"/> 
            attribute is set to the document being created.
            </param>
            <returns> A new <see cref="T:SharpVectors.Dom.IDocument"/> object. </returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            <para>INVALID_CHARACTER_ERR: Raised if the specified qualified name contains an illegal character.
            </para>
            <para>NAMESPACE_ERR: Raised if the <paramref name="qualifiedName"/> is malformed, 
            if the <paramref name="qualifiedName"/> has a prefix and the <paramref name="namespaceURI"/> 
            is <see langword="null"/>, or if the <paramref name="qualifiedName"/> has a prefix that is "xml" and the
            <paramref name="namespaceURI"/> is different from <see href="https://www.w3.org/XML/1998/namespace"/>.
            </para>
            WRONG_DOCUMENT_ERR: Raised if <paramref name="doctype"/> has already been used with a different 
            document or was created from a different implementation.
            </exception>
        </member>
        <member name="T:SharpVectors.Dom.IDomTimeStamp">
            <summary>
            The <c>DOMTimeStamp</c> type represents an absolute or relative number of milliseconds, 
            depending on the specification in which it appears.
            </summary>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/API/DOMTimeStamp"/>
        </member>
        <member name="T:SharpVectors.Dom.IElement">
            <summary>
            The <see cref="T:SharpVectors.Dom.IElement"/> interface represents an element in an HTML or XML document. 
            </summary>
            <remarks>
            Elements may have attributes associated with them; since the <see cref="T:SharpVectors.Dom.IElement"/> interface inherits 
            from <see cref="T:SharpVectors.Dom.INode"/>, the generic <see cref="T:SharpVectors.Dom.INode"/> interface attribute <see cref="T:SharpVectors.Dom.IAttribute"/> may 
            be used to retrieve the set of all attributes for an element. There are 
            methods on the <see cref="T:SharpVectors.Dom.IElement"/> interface to retrieve either an 
            <see cref="T:SharpVectors.Dom.IAttribute"/> object by name or an attribute value by name. In XML, 
            where an attribute value may contain entity references, an 
            <see cref="T:SharpVectors.Dom.IAttribute"/> object should be retrieved to examine the possibly 
            fairly complex sub-tree representing the attribute value. On the other 
            hand, in HTML, where all attributes have simple string values, methods to 
            directly access an attribute value can safely be used as a convenience.In 
            DOM Level 2, the method <see cref="M:SharpVectors.Dom.IXmlNode.Normalize"/> is inherited from the 
            <see cref="T:SharpVectors.Dom.INode"/> interface where it was moved.
            </remarks>
            <seealso href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
        </member>
        <member name="T:SharpVectors.Dom.IElementTimeControl">
            <summary>
            An <c>SMIL</c> animation interface to supports several methods for controlling the behavior of animation.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.BeginElement">
            <summary>
            Creates a begin instance time for the current time. The new instance time is added 
            to the begin instance times list. 
            <para>
            The behavior of this method is equivalent to BeginElementAt(0).
            </para>
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.BeginElementAt(System.Single)">
            <summary>
            Creates a begin instance time for the current time plus the specified offset. 
            The new instance time is added to the begin instance times list.
            </summary>
            <param name="offset">
            The offset from the current document time, in seconds, at which to begin the element.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.EndElement">
            <summary>
            Creates an end instance time for the current time. The new instance time is added 
            to the end instance times list. 
            <para>
            The behavior of this method is equivalent to EndElementAt(0).
            </para>
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.IElementTimeControl.EndElementAt(System.Single)">
            <summary>
            Creates a end instance time for the current time plus the specified offset. 
            The new instance time is added to the end instance times list.
            </summary>
            <param name="offset">
            The offset from the current document time, in seconds, at which to end the element.
            </param>
        </member>
        <member name="T:SharpVectors.Dom.IEntity">
            <summary>
            This interface represents an entity, either parsed or unparsed, in an XML 
            document. Note that this models the entity itself not the entity 
            declaration. <see cref="T:SharpVectors.Dom.IEntity"/> declaration modeling has been left for a 
            later Level of the DOM specification.
            <para>
            Represents an entity declaration, such as <c>&lt;!ENTITY... &gt;</c>.
            </para>
            </summary>
            <remarks>
            <para>The <see cref="P:SharpVectors.Dom.IXmlNode.Name"/> attribute that is inherited from 
            <see cref="T:SharpVectors.Dom.INode"/> contains the name of the entity.
            </para>
            <para>An XML processor may choose to completely expand entities before the 
            structure model is passed to the DOM; in this case there will be no 
            <see cref="T:SharpVectors.Dom.IEntityReference"/> nodes in the document tree.
            </para>
            <para>XML does not mandate that a non-validating XML processor read and 
            process entity declarations made in the external subset or declared in 
            external parameter entities. This means that parsed entities declared in 
            the external subset need not be expanded by some classes of applications, 
            and that the replacement value of the entity may not be available. When 
            the replacement value is available, the corresponding <see cref="T:SharpVectors.Dom.IEntity"/> 
            node's child list represents the structure of that replacement text. 
            Otherwise, the child list is empty.
            </para>
            <para>The DOM Level 2 does not support editing <see cref="T:SharpVectors.Dom.IEntity"/> nodes; if a 
            user wants to make changes to the contents of an <see cref="T:SharpVectors.Dom.IEntity"/>, 
            every related <see cref="T:SharpVectors.Dom.IEntityReference"/> node has to be replaced in the 
            structure model by a clone of the <see cref="T:SharpVectors.Dom.IEntity"/>'s contents, and 
            then the desired changes must be made to each of those clones instead. 
            <see cref="T:SharpVectors.Dom.IEntity"/> nodes and all their descendants are readonly.
            </para>
            <para>An <see cref="T:SharpVectors.Dom.IEntity"/> node does not have any parent. If the entity 
            contains an unbound namespace prefix, the <see cref="P:SharpVectors.Dom.IXmlNode.NamespaceURI"/> of 
            the corresponding node in the <see cref="T:SharpVectors.Dom.IEntity"/> node subtree is 
            <see langword="null"/>. The same is true for <see cref="T:SharpVectors.Dom.IEntityReference"/> 
            nodes that refer to this entity, when they are created using the 
            <see cref="M:SharpVectors.Dom.IDocument.CreateEntityReference(System.String)"/> method of the <see cref="T:SharpVectors.Dom.IDocument"/> 
            interface. The DOM Level 2 does not support any mechanism to resolve 
            namespace prefixes.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
        </member>
        <member name="P:SharpVectors.Dom.IEntity.PublicId">
            <summary>
            Gets the public identifier associated with the entity, if specified. If the 
            public identifier was not specified, this is <see langword="null"/>.
            </summary>
            <value>
            The public identifier on the entity. If there is no public identifier, <see langword="null"/> is returned.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.IEntity.SystemId">
            <summary>
            Gets the value of system identifier associated with the entity declaration, if specified. If the 
            system identifier was not specified, this is <see langword="null"/>.
            </summary>
            <value>
            The system identifier on the entity. If there is no system identifier, <see langword="null"/> is
            returned.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.IEntity.NotationName">
            <summary>
            <para>Gets the name of the optional NDATA attribute on the entity declaration.</para>
            For unparsed entities, the name of the notation for the entity. For 
            parsed entities, this is <see langword="null"/>. 
            </summary>
            <value>
            The name of the NDATA attribute. If there is no NDATA, <see langword="null"/> is returned.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.IEntityReference">
            <summary>
            <see cref="T:SharpVectors.Dom.IEntityReference"/> objects may be inserted into the structure model when an entity reference 
            is in the source document, or when the user wishes to insert an entity reference. 
            </summary>
            <remarks>
            <para>
            Note that character references and references to predefined entities are considered to be expanded by 
            the HTML or XML processor so that characters are represented by their Unicode equivalent rather than 
            by an entity reference. Moreover, the XML processor may completely expand references to entities while 
            building the structure model, instead of providing <see cref="T:SharpVectors.Dom.IEntityReference"/> objects. 
            </para>
            <para>
            If it does provide such objects, then for a given <see cref="T:SharpVectors.Dom.IEntityReference"/> node, it may be that there is no 
            <see cref="T:SharpVectors.Dom.IEntity"/> node representing the referenced entity. If such an <see cref="T:SharpVectors.Dom.IEntity"/> exists, then 
            the subtree of the <see cref="T:SharpVectors.Dom.IEntityReference"/> node is in general a copy of the <see cref="T:SharpVectors.Dom.IEntity"/> node subtree. 
            </para>
            However, this may not be true when an entity contains an unbound namespace prefix. In such a case, because the 
            namespace prefix resolution depends on where the entity reference is, the descendants of the 
            <see cref="T:SharpVectors.Dom.IEntityReference"/> node may be bound to different namespace URIs.
            <para>As for <see cref="T:SharpVectors.Dom.IEntity"/> nodes, <see cref="T:SharpVectors.Dom.IEntityReference"/> nodes and 
            all their descendants are readonly.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
        </member>
        <member name="T:SharpVectors.Dom.INamedNodeMap">
            <summary>
            Represents a collection of nodes that can be accessed by name or index.
            <para>
            Objects implementing the <see cref="T:SharpVectors.Dom.INamedNodeMap"/> interface are used to represent collections of nodes 
            that can be accessed by name. 
            </para>
            </summary>
            <remarks>
            <para>
            Note that <see cref="T:SharpVectors.Dom.INamedNodeMap"/> does not inherit from <see cref="T:SharpVectors.Dom.INodeList"/>; <see cref="T:SharpVectors.Dom.INamedNodeMap"/>s 
            are not maintained in any particular order. Objects contained in an object implementing <see cref="T:SharpVectors.Dom.INamedNodeMap"/> 
            may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents 
            of a <see cref="T:SharpVectors.Dom.INamedNodeMap"/>, and does not imply that the DOM specifies an order to these Nodes. 
            </para>
            <para><see cref="T:SharpVectors.Dom.INamedNodeMap"/> objects in the DOM are live.</para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
            <seealso cref="T:System.Xml.XmlAttributeCollection"/>
        </member>
        <member name="P:SharpVectors.Dom.INamedNodeMap.Count">
            <summary>
            Gets the number of nodes in the <see cref="T:SharpVectors.Dom.INamedNodeMap"/>.
            </summary>
            <value>The number of nodes.</value>
        </member>
        <member name="M:SharpVectors.Dom.INamedNodeMap.GetNamedItem(System.String)">
            <summary>
            Retrieves an <see cref="T:System.Xml.XmlNode"/> specified by name.
            </summary>
            <param name="name">
            The qualified name of the node to retrieve. It is matched against the <see cref="P:System.Xml.XmlNode.Name"/>
            property of the matching node.
            </param>
            <returns>An <see cref="T:System.Xml.XmlNode"/> with the specified name or <see langword="null"/> if a matching node is not found.</returns>
        </member>
        <member name="M:SharpVectors.Dom.INamedNodeMap.GetNamedItem(System.String,System.String)">
            <summary>
            Retrieves a node with the matching <see cref="P:System.Xml.XmlNode.LocalName"/> and <see cref="P:System.Xml.XmlNode.NamespaceURI"/>.
            </summary>
            <param name="localName">The local name of the node to retrieve.</param>
            <param name="namespaceURI">The namespace Uniform Resource Identifier (URI) of the node to retrieve.</param>
            <returns>
            An <see cref="T:System.Xml.XmlNode"/> with the matching local name and namespace URI or <see langword="null"/>
            if a matching node was not found.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.INamedNodeMap.Item(System.Int32)">
            <summary>
            Retrieves the node at the specified index in the <see cref="T:SharpVectors.Dom.INamedNodeMap"/>.
            </summary>
            <param name="index">
            The index position of the node to retrieve from the <see cref="T:SharpVectors.Dom.INamedNodeMap"/>. The index
            is zero-based; therefore, the index of the first node is 0 and the index of the
            last node is <see cref="P:SharpVectors.Dom.INamedNodeMap.Count"/> -1.
            </param>
            <returns>
            The <see cref="T:System.Xml.XmlNode"/> at the specified index. If index is less than 0 or greater
            than or equal to the <see cref="P:SharpVectors.Dom.INamedNodeMap.Count"/> property, <see langword="null"/> is returned.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.INamedNodeMap.RemoveNamedItem(System.String)">
            <summary>
            Removes the node from the <see cref="T:SharpVectors.Dom.INamedNodeMap"/>.
            </summary>
            <param name="name">
            The qualified name of the node to remove. The name is matched against the <see cref="P:System.Xml.XmlNode.Name"/>
            property of the matching node.
            </param>
            <returns>The <see cref="T:System.Xml.XmlNode"/> removed from this <see cref="T:SharpVectors.Dom.INamedNodeMap"/> 
            or <see langword="null"/> if a matching node was not found.</returns>
        </member>
        <member name="M:SharpVectors.Dom.INamedNodeMap.RemoveNamedItem(System.String,System.String)">
            <summary>
            Removes a node with the matching <see cref="P:System.Xml.XmlNode.LocalName"/> and <see cref="P:System.Xml.XmlNode.NamespaceURI"/>.
            </summary>
            <param name="localName">The local name of the node to remove.</param>
            <param name="namespaceURI">The namespace URI of the node to remove.</param>
            <returns>The <see cref="T:System.Xml.XmlNode"/> removed or <see langword="null"/> if a matching node was not found.</returns>
        </member>
        <member name="M:SharpVectors.Dom.INamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
            <summary>
            Adds an <see cref="T:System.Xml.XmlNode"/> using its <see cref="P:System.Xml.XmlNode.Name"/> property
            </summary>
            <param name="node">An <see cref="T:System.Xml.XmlNode"/> to store in the <see cref="T:SharpVectors.Dom.INamedNodeMap"/>. If a node with that name is already
            present in the map, it is replaced by the new one.</param>
            <returns>
            If the node replaces an existing node with the same name, the old node is returned;
            otherwise, <see langword="null"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentException">
            The node was created from a different <see cref="T:System.Xml.XmlDocument"/> than the one that
            created the <see cref="T:SharpVectors.Dom.INamedNodeMap"/>; or the <see cref="T:SharpVectors.Dom.INamedNodeMap"/> is read-only.
            </exception>
        </member>
        <member name="T:SharpVectors.Dom.INode">
            <summary>
            The <see cref="T:SharpVectors.Dom.INode"/> interface is the primary datatype for the entire Document Object Model. 
            It represents a single node in the document tree. 
            </summary>
            <remarks>
            While all objects implementing the <see cref="T:SharpVectors.Dom.INode"/> interface expose methods for dealing with children, 
            not all objects implementing the <see cref="T:SharpVectors.Dom.INode"/> interface may have children. For example, <see cref="T:SharpVectors.Dom.IText"/> 
            nodes may not have children, and adding children to such nodes results in a <see cref="T:SharpVectors.Dom.DomException"/> being raised.
            <para>The attributes <see cref="P:SharpVectors.Dom.IXmlNode.Name"/>, <see cref="P:SharpVectors.Dom.IXmlNode.Value"/> and <see cref="P:SharpVectors.Dom.IXmlNode.Attributes"/> are included 
            as a mechanism to get at node information without casting down to the specific derived interface. 
            In cases where there is no obvious mapping of these attributes for a specific <see cref="P:SharpVectors.Dom.IXmlNode.NodeType"/> 
            (e.g., <see cref="P:SharpVectors.Dom.IXmlNode.Value"/> for an <see cref="T:SharpVectors.Dom.IElement"/> or <see cref="P:SharpVectors.Dom.IXmlNode.Attributes"/> for a <see cref="T:SharpVectors.Dom.IComment"/>), 
            this returns <see langword="null"/>. Note that the specialized interfaces may contain additional and more 
            convenient mechanisms to get and set the relevant information.
            </para>
            </remarks>
            <seealso href="https://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
        </member>
        <member name="T:SharpVectors.Dom.INodeList">
            <summary>
            The <see cref="T:SharpVectors.Dom.INodeList"/> interface provides the abstraction of an ordered 
            collection of nodes, without defining or constraining how this collection 
            is implemented. <see cref="T:SharpVectors.Dom.INodeList"/> objects in the DOM are live.
            <para>The items in the <see cref="T:SharpVectors.Dom.INodeList"/> are accessible via an integral 
            index, starting from <c>0</c>.
            </para>
            </summary>
            <seealso href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
        </member>
        <member name="P:SharpVectors.Dom.INodeList.Item(System.UInt64)">
            <summary>
            Gets the <paramref name="index"/>th item in the collection. If <paramref name="index"/> is greater 
            than or equal to the number of nodes in the list, this returns <see langword="null"/>. 
            </summary>
            <param name="index"> into the collection. </param>
            <returns> The node at the <paramref name="index"/>th position in the 
            <see cref="T:SharpVectors.Dom.INodeList"/>, or <see langword="null"/> if that is not a valid index. 
            </returns>
        </member>
        <member name="P:SharpVectors.Dom.INodeList.Count">
            <summary>
            Gets the number of nodes in the list. The range of valid child node indices 
            is <c>0</c> to <c><see cref="P:SharpVectors.Dom.INodeList.Count"/>-1</c> inclusive. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.INotation">
            <summary>
            This interface represents a notation declared in the DTD. A notation either 
            declares, by name, the format of an unparsed entity (see section 4.7 of 
            the XML 1.0 specification ), or is used for formal declaration of 
            processing instruction targets (see section 2.6 of the XML 1.0 
            specification ). The <see cref="P:SharpVectors.Dom.IXmlNode.Name"/> attribute inherited from 
            <see cref="T:SharpVectors.Dom.INode"/> is set to the declared name of the notation.
            <para>The DOM Level 1 does not support editing <see cref="T:SharpVectors.Dom.INotation"/> nodes; 
            they are therefore readonly.
            </para>
            <para>A <see cref="T:SharpVectors.Dom.INotation"/> node does not have any parent.</para>
            </summary>
            <seealso href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
        </member>
        <member name="P:SharpVectors.Dom.INotation.PublicId">
            <summary>
            <para>Gets the value of the public identifier on the notation declaration.</para>
            If the public identifier was not specified, this is <see langword="null"/>.
            </summary>
            <value>
            The public identifier on the notation. If there is no public identifier, <see langword="null"/>
            is returned.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.INotation.SystemId">
            <summary>
            Gets the value of the system identifier on the notation declaration. If the system identifier was 
            not specified, this is <see langword="null"/>.
            </summary>
            <value>
            The system identifier on the notation. If there is no system identifier, <see langword="null"/>
            is returned.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.IProcessingInstruction">
            <summary>
            Represents a processing instruction, which XML defines to keep processor-specific
            information in the text of the document.
            </summary>
            <seealso href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
        </member>
        <member name="P:SharpVectors.Dom.IProcessingInstruction.Target">
            <summary>
            Gets the target of the processing instruction.
            </summary>
            <value>The target of the processing instruction.</value>
            <remarks>
            The target of this processing instruction. XML defines this as being 
            the first token following the markup that begins the processing instruction.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.IProcessingInstruction.Data">
            <summary>
            Gets or sets the content of the processing instruction, excluding the target.
            </summary>
            <value>The content of the processing instruction, excluding the target.</value>
        </member>
        <member name="T:SharpVectors.Dom.IText">
            <summary>
            Represents the text content of an element or attribute.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.IText.SplitText(System.Int32)">
            <summary>
            Splits the node into two nodes at the specified offset, keeping both in the tree as siblings.
            </summary>
            <param name="offset">The offset at which to split the node.</param>
            <returns>The new node.</returns>
        </member>
        <member name="T:SharpVectors.Dom.IXmlElement">
            <summary>
            The <see cref="T:SharpVectors.Dom.IElement"/> interface represents an element in an HTML or XML document. 
            </summary>
            <remarks>
            <para>
            Elements may have attributes associated with them; since the <see cref="T:SharpVectors.Dom.IElement"/> interface inherits 
            from <see cref="T:SharpVectors.Dom.INode"/>, the generic <see cref="T:SharpVectors.Dom.INode"/> interface attribute <see cref="T:SharpVectors.Dom.IAttribute"/> may 
            be used to retrieve the set of all attributes for an element. 
            </para>
            <para>
            There are methods on the <see cref="T:SharpVectors.Dom.IElement"/> interface to retrieve either an <see cref="T:SharpVectors.Dom.IAttribute"/> object 
            by name or an attribute value by name. In XML, where an attribute value may contain entity references, an 
            <see cref="T:SharpVectors.Dom.IAttribute"/> object should be retrieved to examine the possibly fairly complex sub-tree representing 
            the attribute value. 
            </para>
            <para>
            On the other hand, in HTML, where all attributes have simple string values, methods to directly access an attribute 
            value can safely be used as a convenience. In DOM Level 2, the method <see cref="M:SharpVectors.Dom.IXmlNode.Normalize"/> is inherited from the 
            <see cref="T:SharpVectors.Dom.INode"/> interface where it was moved.
            </para>
            </remarks>
            <seealso href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
        </member>
        <member name="P:SharpVectors.Dom.IXmlElement.HasAttributes">
            <summary>
            Gets a value indicating whether this node (if it is an element) has any attributes. 
            </summary>
            <value><see langword="true"/> if this node has any attributes, <see langword="false"/> otherwise.</value>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.GetAttribute(System.String)">
            <summary>
            Returns the value for the attribute with the specified name.
            </summary>
            <param name="name">The name of the attribute to retrieve. This is a qualified name. 
            It is matched against the <see cref="P:SharpVectors.Dom.IXmlNode.Name"/> property of the matching node.
            </param>
            <returns>The value of the specified attribute. An empty string is returned if a matching
            attribute is not found or if the attribute does not have a specified or default value.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.GetAttribute(System.String,System.String)">
            <summary>
            Returns the value for the attribute with the specified local name and namespace URI.
            </summary>
            <param name="localName">The local name of the attribute to retrieve.</param>
            <param name="namespaceURI">The namespace URI of the attribute to retrieve.</param>
            <returns>The value of the specified attribute. An empty string is returned if a matching
            attribute is not found or if the attribute does not have a specified or default value.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.SetAttribute(System.String,System.String)">
            <summary>
            Sets the value of the attribute with the specified name.
            </summary>
            <param name="name">The name of the attribute to create or alter. This is a qualified name. If the
            name contains a colon it is parsed into prefix and local name components.
            </param>
            <param name="value">The value to set for the attribute.</param>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.SetAttribute(System.String,System.String,System.String)">
            <summary>
            Sets the value of the attribute with the specified local name and namespace URI.
            </summary>
            <param name="qualifiedName">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <param name="value">The value to set for the attribute.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.RemoveAttribute(System.String)">
            <summary>
            Removes an attribute by name.
            </summary>
            <param name="name">The name of the attribute to remove.This is a qualified name. 
            It is matched against the Name property of the matching node.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.RemoveAttribute(System.String,System.String)">
            <summary>
            Removes an attribute with the specified local name and namespace URI. (If the
            removed attribute has a default value, it is immediately replaced).
            </summary>
            <param name="localName">The local name of the attribute to remove.</param>
            <param name="namespaceURI">The namespace URI of the attribute to remove.</param>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.GetAttributeNode(System.String)">
            <summary>
            Returns the <see cref="T:System.Xml.XmlAttribute"/> with the specified name.
            </summary>
            <param name="name">The name of the attribute to retrieve. This is a qualified name. 
            It is matched against the Name property of the matching node.
            </param>
            <returns>The specified <see cref="T:System.Xml.XmlAttribute"/> or <see langword="null"/> if a matching attribute was not found.</returns>
            <see cref="T:SharpVectors.Dom.IAttribute"/>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.GetAttributeNode(System.String,System.String)">
            <summary>
            Returns the <see cref="T:System.Xml.XmlAttribute"/> with the specified local name and namespace URI.
            </summary>
            <param name="localName">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The specified <see cref="T:System.Xml.XmlAttribute"/> or <see langword="null"/> if a matching attribute was not found.</returns>
            <see cref="T:SharpVectors.Dom.IAttribute"/>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.GetElementsByTagName(System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.XmlNodeList"/> containing a list of all descendant elements
            that match the specified <see cref="P:System.Xml.XmlElement.Name"/>.
            </summary>
            <param name="name">The name tag to match. This is a qualified name. It is matched against the Name
            property of the matching node. The asterisk (*) is a special value that matches all tags.
            </param>
            <returns>An <see cref="T:System.Xml.XmlNodeList"/> containing a list of all matching nodes.</returns>
            <seealso cref="T:SharpVectors.Dom.INodeList"/>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.GetElementsByTagName(System.String,System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.XmlNodeList"/> containing a list of all descendant elements
            that match the specified <see cref="P:System.Xml.XmlElement.LocalName"/> and <see cref="P:System.Xml.XmlElement.NamespaceURI"/>.
            </summary>
            <param name="localName">The local name to match. The asterisk (*) is a special value that matches all tags.</param>
            <param name="namespaceURI">The namespace URI to match.</param>
            <returns>An <see cref="T:System.Xml.XmlNodeList"/> containing a list of all matching nodes.</returns>
            <seealso cref="T:SharpVectors.Dom.INodeList"/>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.SetAttributeNode(System.String,System.String)">
            <summary>
            Adds the specified <see cref="T:System.Xml.XmlAttribute"/>.
            </summary>
            <param name="localName">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The <see cref="T:System.Xml.XmlAttribute"/> to add.</returns>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
            <summary>
            Adds the specified <see cref="T:System.Xml.XmlAttribute"/>.
            </summary>
            <param name="newAttr">The <see cref="T:System.Xml.XmlAttribute"/> node to add to the attribute collection for this element.</param>
            <returns>
            If the attribute replaces an existing attribute with the same name, the old <see cref="T:System.Xml.XmlAttribute"/>
            is returned; otherwise, <see langword="null"/> is returned.
            </returns>
            <see cref="T:SharpVectors.Dom.IAttribute"/>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
            <summary>
            Removes the specified <see cref="T:System.Xml.XmlAttribute"/>.
            </summary>
            <param name="oldAttr">
            The <see cref="T:System.Xml.XmlAttribute"/> node to remove. If the removed attribute has a default value,
            it is immediately replaced.
            </param>
            <returns>The removed <see cref="T:System.Xml.XmlAttribute"/> or <see langword="null"/> if <paramref name="oldAttr"/> 
            is not an attribute node of the <see cref="T:System.Xml.XmlElement"/> .</returns>
            <see cref="T:SharpVectors.Dom.IAttribute"/>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.RemoveAttributeNode(System.String,System.String)">
            <summary>
            Removes the <see cref="T:System.Xml.XmlAttribute"/> specified by the local name and namespace
            URI. (If the removed attribute has a default value, it is immediately replaced).
            </summary>
            <param name="localName">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>
            The removed <see cref="T:System.Xml.XmlAttribute"/> or <see langword="null"/> if the <see cref="T:System.Xml.XmlElement"/> 
            does not have a matching attribute node.
            </returns>
            <see cref="T:SharpVectors.Dom.IAttribute"/>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.HasAttribute(System.String)">
            <summary>
            Determines whether the current node has an attribute with the specified name.
            </summary>
            <param name="name">
            The name of the attribute to find. This is a qualified name. It is matched against
            the Name property of the matching node.
            </param>
            <returns><see langword="true"/> if the current node has the specified attribute; otherwise, <see langword="false"/>.</returns>
            <see cref="T:SharpVectors.Dom.IAttribute"/>
        </member>
        <member name="M:SharpVectors.Dom.IXmlElement.HasAttribute(System.String,System.String)">
            <summary>
            Determines whether the current node has an attribute with the specified local
            name and namespace URI.
            </summary>
            <param name="localName">The local name of the attribute to find.</param>
            <param name="namespaceURI">The namespace URI of the attribute to find.</param>
            <returns><see langword="true"/> if the current node has the specified attribute; otherwise, <see langword="false"/>.</returns>
            <see cref="T:SharpVectors.Dom.IAttribute"/>
        </member>
        <member name="T:SharpVectors.Dom.IXmlNode">
            <summary>
            The <see cref="T:SharpVectors.Dom.IXmlNode"/> interface is the primary datatype for the entire Document Object Model. 
            It represents a single node in the document tree. <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <remarks>
            While all objects implementing the <see cref="T:SharpVectors.Dom.INode"/> interface expose methods for dealing with children, 
            not all objects implementing the <see cref="T:SharpVectors.Dom.INode"/> interface may have children. For example, <see cref="T:SharpVectors.Dom.IText"/> 
            nodes may not have children, and adding children to such nodes results in a <see cref="T:SharpVectors.Dom.DomException"/> being raised.
            <para>The attributes <see cref="P:SharpVectors.Dom.IXmlNode.Name"/>, <see cref="P:SharpVectors.Dom.IXmlNode.Value"/> and <see cref="P:SharpVectors.Dom.IXmlNode.Attributes"/> are included 
            as a mechanism to get at node information without casting down to the specific derived interface. 
            In cases where there is no obvious mapping of these attributes for a specific <see cref="P:SharpVectors.Dom.IXmlNode.NodeType"/> 
            (e.g., <see cref="P:SharpVectors.Dom.IXmlNode.Value"/> for an <see cref="T:SharpVectors.Dom.IElement"/> or <see cref="P:SharpVectors.Dom.IXmlNode.Attributes"/> for a <see cref="T:SharpVectors.Dom.IComment"/>), 
            this returns <see langword="null"/>. Note that the specialized interfaces may contain additional and more 
            convenient mechanisms to get and set the relevant information.
            </para>
            </remarks>
            <seealso href="https://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.Name">
            <summary>
            Gets the qualified name of the node.
            </summary>
            <value>
            The qualified name of the node. The name returned is dependent on the <see cref="P:SharpVectors.Dom.IXmlNode.NodeType"/> of the node.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.Value">
            <summary>
            Gets or sets the value of the node.
            </summary>
            <value>The value returned depends on the <see cref="P:SharpVectors.Dom.IXmlNode.NodeType"/> of the node</value>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
            <value>An enumeration of the type <see cref="T:System.Xml.XmlNodeType"/> specifying the type of this node.</value>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.ParentNode">
            <summary>
            Gets the parent of this node (for nodes that can have parents).
            </summary>
            <value>
            The <see cref="T:System.Xml.XmlNode"/> that is the parent of the current node. If a node has just been created
            and not yet added to the tree, or if it has been removed from the tree, the parent
            is <see langword="null"/>. For all other nodes, the value returned depends on the <see cref="P:SharpVectors.Dom.IXmlNode.NodeType"/>
            of the node. 
            </value>
            <remarks>
            Gets the parent of this node. All nodes, except <see cref="T:SharpVectors.Dom.IAttribute"/>, <see cref="T:SharpVectors.Dom.IDocument"/>, 
            <see cref="T:SharpVectors.Dom.IDocumentFragment"/>, <see cref="T:SharpVectors.Dom.IEntity"/>, and <see cref="T:SharpVectors.Dom.INotation"/> may have a parent. 
            However, if a node has just been created and not yet added to the tree, or if it has been 
            removed from the tree, this is <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.ChildNodes">
            <summary>
            Gets all the child nodes of the node.
            </summary>
            <value>
            An System.Xml.XmlNodeList that contains all the child nodes of the node. If there
            are no child nodes, this property returns an empty System.Xml.XmlNodeList not <see langword="null"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.FirstChild">
            <summary>
            Gets the first child of this node. If there is no such node, this returns <see langword="null"/>.
            </summary>
            <value>The first child of the node. If there is no such node, <see langword="null"/> is returned.</value>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.LastChild">
            <summary>
            Gets the last child of this node. If there is no such node, this returns <see langword="null"/>.
            </summary>
            <value>The last child of the node. If there is no such node, <see langword="null"/> is returned.</value>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.PreviousSibling">
            <summary>
            Gets the node immediately preceding this node. If there is no such node, this returns <see langword="null"/>.
            </summary>
            <value>The preceding XmlNode. If there is no preceding node, null is returned.</value>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.NextSibling">
            <summary>
            Gets the node immediately following this node. If there is no such node, this returns <see langword="null"/>.
            </summary>
            <value>The next XmlNode. If there is no next node, null is returned.</value>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.Attributes">
            <summary>
            Gets a <see cref="T:SharpVectors.Dom.INamedNodeMap"/> containing the attributes of this node (if 
            it is an <see cref="T:SharpVectors.Dom.IElement"/>) or <see langword="null"/> otherwise. 
            <para>This implementation returns an System.Xml.XmlAttributeCollection containing the attributes of this node.</para>
            </summary>
            <value>
            An XmlAttributeCollection containing the attributes of the node. If the node is
            of type XmlNodeType.Element, the attributes of the node are returned. Otherwise,
            this property returns null.
            </value>
            <seealso cref="T:SharpVectors.Dom.INamedNodeMap"/>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.OwnerDocument">
            <summary>
            The <see cref="T:SharpVectors.Dom.IDocument"/> object associated with this node. This is also the <see cref="T:SharpVectors.Dom.IDocument"/> 
            object used to create new nodes. When this node is a <see cref="T:SharpVectors.Dom.IDocument"/> or a <see cref="T:SharpVectors.Dom.IDocumentType"/> 
            which is not used with any <see cref="T:SharpVectors.Dom.IDocument"/> yet, this is <see langword="null"/>.
            <para>This implementation returns the System.Xml.XmlDocument to which this node belongs.</para>
            </summary>
            <value>
            The System.Xml.XmlDocument to which this node belongs.If the node is an System.Xml.XmlDocument
            (NodeType equals XmlNodeType.Document), this property returns null.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.HasChildNodes">
            <summary>
            Gets a value indicating whether this node has any children.
            </summary>
            <value><see langword="true"/> if this node has any children, <see langword="false"/> otherwise. </value>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.NamespaceURI">
            <summary>
            
            </summary>
            <summary> 
            Gets the namespace URI of this node, or <see langword="null"/> if it is unspecified.
            </summary>
            <value>
            The namespace URI of this node. If there is no namespace URI, this property returns <see cref="F:System.String.Empty"/>.
            </value>
            <remarks>
            <para>
            This is not a computed value that is the result of a namespace lookup based on an examination of the 
            namespace declarations in scope. It is merely the namespace URI given at creation time.
            </para>
            <para>
            For nodes of any type other than <see cref="F:System.Xml.XmlNodeType.Element"/> and <see cref="F:System.Xml.XmlNodeType.Attribute"/> 
            and nodes created with a DOM Level 1 method, such as <see cref="M:SharpVectors.Dom.IDocument.CreateElement(System.String)"/> from the 
            <see cref="T:SharpVectors.Dom.IDocument"/> interface, this is always <see langword="null"/>. Per the Namespaces in XML Specification 
            an attribute does not inherit its namespace from the element it is attached to. If an attribute is 
            not explicitly given a namespace, it simply has no namespace.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.Prefix">
            <summary>
            Gets or sets the namespace prefix of this node, or <see langword="null"/> if it is unspecified.
            </summary>
            <value>
            The namespace prefix of this node. For example, Prefix is <c>inkscape</c> for the element
            <c>&lt; inkscape:label &gt;</c>. If there is no prefix, this property returns String.Empty.
            </value>
            <remarks>
            <para>
            Note that setting this attribute, when permitted, changes the <see cref="P:SharpVectors.Dom.IXmlNode.Name"/> attribute, which holds 
            the qualified name.
            </para>
            <para>
            Note also that changing the prefix of an attribute that is known to have a default value, does not make a new 
            attribute with the default value and the original prefix appear, since the <see cref="P:SharpVectors.Dom.IXmlNode.NamespaceURI"/> and 
            <see cref="P:SharpVectors.Dom.IXmlNode.LocalName"/> do not change.
            </para>
            <para>
            For nodes of any type other than <see cref="F:System.Xml.XmlNodeType.Element"/> and <see cref="F:System.Xml.XmlNodeType.Attribute"/> and 
            nodes created with a DOM Level 1 method, such as <see cref="M:SharpVectors.Dom.IDocument.CreateElement(System.String)"/> from the 
            <see cref="T:SharpVectors.Dom.IDocument"/> interface, this is always <see langword="null"/>. 
            </para>
            </remarks>
            <exception cref="T:SharpVectors.Dom.DomException">
            <para>
            INVALID_CHARACTER_ERR: Raised if the specified prefix contains an illegal character.
            </para>
            <para>
            NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
            </para>
            <para>
            NAMESPACE_ERR: Raised if the specified <see cref="P:SharpVectors.Dom.IXmlNode.Prefix"/> is malformed, if the <see cref="P:SharpVectors.Dom.IXmlNode.NamespaceURI"/> of 
            this node is <see langword="null"/>, if the specified prefix is "xml" and the <see cref="P:SharpVectors.Dom.IXmlNode.NamespaceURI"/> of this 
            node is different from <see href="https://www.w3.org/XML/1998/namespace"/>, if this node is an attribute and the 
            specified prefix is <c>xmlns</c> and the <see cref="P:SharpVectors.Dom.IXmlNode.NamespaceURI"/> of this node is different from 
            <see href="https://www.w3.org/2000/xmlns/"/>, or if this node is an attribute and the <c>QualifiedName</c> of 
            this node is <c>xmlns</c>.
            </para>
            </exception>
        </member>
        <member name="P:SharpVectors.Dom.IXmlNode.LocalName">
            <summary>
            Gets the local part of the qualified name of this node.
            </summary>
            <value>
            The name of the node with the prefix removed. For example, <see cref="P:SharpVectors.Dom.IXmlNode.LocalName"/> is <c>label</c>
            for the element <c>&lt; inkscape:label &gt;</c>.The name returned is dependent on the System.Xml.XmlNode.NodeType
            of the node.
            </value>
            <remarks>
            For nodes of any type other than <see cref="F:System.Xml.XmlNodeType.Element"/> and <see cref="F:System.Xml.XmlNodeType.Attribute"/> and 
            nodes created with a DOM Level 1 method, such as <see cref="M:SharpVectors.Dom.IDocument.CreateElement(System.String)"/> from the 
            <see cref="T:SharpVectors.Dom.IDocument"/> interface, this is always <see langword="null"/>.
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.IXmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Inserts the node <paramref name="newChild"/> before the existing child node <paramref name="refChild"/>. 
            </summary>
            <remarks>
            If <paramref name="refChild"/> is <see langword="null"/>, insert <paramref name="newChild"/> at the end 
            of the list of children.
            <para>
            If <paramref name="newChild"/> is a <see cref="T:SharpVectors.Dom.IDocumentFragment"/> object, 
            all of its children are inserted, in the same order, before <paramref name="refChild"/>. 
            </para>
            If the <paramref name="newChild"/> is already in the tree, it is first removed. 
            </remarks>
            <param name="newChild"> node to insert.</param>
            <param name="refChild"> reference node, i.e., the node before which the new node must be inserted.</param>
            <returns> The node being inserted. </returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            <para>
            HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not allow children of the type 
            of the <paramref name="newChild"/> node, or if the node to insert is one of this node's ancestors.
            </para>
            WRONG_DOCUMENT_ERR: Raised if <paramref name="newChild"/> was created from a different document 
            than the one that created this node.
            <para>
            NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or if the parent of 
            the node being inserted is readonly.
            </para>
            <para>
            NOT_FOUND_ERR: Raised if <paramref name="refChild"/> is not a child of this node. 
            </para>
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.IXmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Replaces the child node <paramref name="oldChild"/> with <paramref name="newChild"/>
            in the list of children, and returns the <paramref name="oldChild"/> node.
            </summary>
            <remarks>
            If <paramref name="newChild"/> is a <see cref="T:SharpVectors.Dom.IDocumentFragment"/> object, <paramref name="oldChild"/> 
            is replaced by all of the <see cref="T:SharpVectors.Dom.IDocumentFragment"/> children, which are inserted in the 
            same order. If the <paramref name="newChild"/> is already in the tree, it is first removed. 
            </remarks>
            <param name="newChild"> new node to put in the child list. </param>
            <param name="oldChild"> node being replaced in the list. </param>
            <returns> The node replaced. </returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            <para>
            HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not allow children of 
            the type of the <paramref name="newChild"/> node, or if the node to put in is one of this node's ancestors.
            </para>
            <para>
            WRONG_DOCUMENT_ERR: Raised if <paramref name="newChild"/> was created from a different 
            document than the one that created this node.
            </para>
            <para>
            NO_MODIFICATION_ALLOWED_ERR: Raised if this node or the parent of the new node is readonly.
            </para>
            <para>
            NOT_FOUND_ERR: Raised if <paramref name="oldChild"/> is not a child of this node. 
            </para>
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.IXmlNode.RemoveChild(System.Xml.XmlNode)">
            <summary>
            Removes the child node indicated by <paramref name="oldChild"/> from the list of children, and returns it. 
            </summary>
            <param name="oldChild"> node being removed. </param>
            <returns> The node removed. </returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
            <para>
            NOT_FOUND_ERR: Raised if <paramref name="oldChild"/> is not a child of this node. 
            </para>
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.IXmlNode.AppendChild(System.Xml.XmlNode)">
            <summary>
            Adds the node <paramref name="newChild"/> to the end of the list of children of this node. 
            If the <paramref name="newChild"/> is already in the tree, it is first removed. 
            </summary>
            <param name="newChild"> The node to add. If it is a <see cref="T:SharpVectors.Dom.IDocumentFragment"/> object, the entire 
            contents of the document fragment are moved into the child list of this node </param>
            <returns> The node added. </returns>
            <exception cref="T:SharpVectors.Dom.DomException">
            <para>
            HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not allow children of the 
            type of the <paramref name="newChild"/> node, or if the node to append is one of this node's ancestors.
            </para>
            <para>
            WRONG_DOCUMENT_ERR: Raised if <paramref name="newChild"/> was created from a different document 
            than the one that created this node.
            </para>
            <para>
            NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. 
            </para>
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.IXmlNode.CloneNode(System.Boolean)">
            <summary>
            Returns a duplicate of this node, i.e., serves as a generic copy constructor for nodes. 
            The duplicate node has no parent; (<see cref="P:SharpVectors.Dom.IXmlNode.ParentNode"/> is <see langword="null"/>.).
            </summary>
            <remarks>
            <para>
            Cloning an <see cref="T:SharpVectors.Dom.IElement"/> copies all attributes and their values, including those generated 
            by the XML processor to represent defaulted attributes, but this method does not copy any text it 
            contains unless it is a deep clone, since the text is contained in a child <see cref="T:SharpVectors.Dom.IText"/> node. 
            </para>
            <para>
            Cloning an <see cref="T:SharpVectors.Dom.IAttribute"/> directly, as opposed to be cloned as part of an <see cref="T:SharpVectors.Dom.IElement"/> 
            cloning operation, returns a specified attribute (<see cref="P:SharpVectors.Dom.IAttribute.Specified"/> is <see langword="true"/>). 
            </para>
            <para>
            Cloning any other type of node simply returns a copy of this node.
            Note that cloning an immutable subtree results in a mutable copy, but the children of an 
            <see cref="T:SharpVectors.Dom.IEntityReference"/> clone are readonly. In addition, clones of unspecified <see cref="T:SharpVectors.Dom.IAttribute"/> 
            nodes are specified. And, cloning <see cref="T:SharpVectors.Dom.IDocument"/>, <see cref="T:SharpVectors.Dom.IDocumentType"/>, <see cref="T:SharpVectors.Dom.IEntity"/>, 
            and <see cref="T:SharpVectors.Dom.INotation"/> nodes is implementation dependent. 
            </para>
            </remarks>
            <param name="deep"> <see langword="true"/>, recursively clone the subtree under the specified node; 
            if <see langword="false"/>, clone only the node itself (and its attributes, if it is an <see cref="T:SharpVectors.Dom.IElement"/>). 
            </param>
            <returns> The duplicate node. </returns>
        </member>
        <member name="M:SharpVectors.Dom.IXmlNode.Normalize">
            <summary>
            Puts all <see cref="T:SharpVectors.Dom.IText"/> nodes in the full depth of the sub-tree underneath this <see cref="T:SharpVectors.Dom.INode"/>, 
            including attribute nodes, into a "normal" form where only structure (e.g., elements, comments, 
            processing instructions, CDATA sections, and entity references) separates <see cref="T:SharpVectors.Dom.IText"/> nodes, 
            i.e., there are neither adjacent <see cref="T:SharpVectors.Dom.IText"/> nodes nor empty <see cref="T:SharpVectors.Dom.IText"/> nodes. 
            </summary>
            <remarks>
            This can be used to ensure that the DOM view of a document is the same as if it were saved and re-loaded, 
            and is useful when operations (such as <c>XPointer</c> lookups) that depend on a particular document tree 
            structure are to be used. 
            <para>
            In cases where the document contains <see cref="T:SharpVectors.Dom.ICDataSection"/>, the normalize operation alone may not be 
            sufficient, since XPointers do not differentiate between <see cref="T:SharpVectors.Dom.IText"/> nodes and <see cref="T:SharpVectors.Dom.ICDataSection"/> nodes.
            </para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.IXmlNode.Supports(System.String,System.String)">
            <summary>
            Tests whether the DOM implementation implements a specific feature and that feature is supported by this node. 
            </summary>
            <param name="feature"> name of the feature to test. This is the same name which can be passed to the 
            method <see cref="M:SharpVectors.Dom.IDomImplementation.HasFeature(System.String,System.String)"/> on <see cref="T:SharpVectors.Dom.IDomImplementation"/>. </param>
            <param name="version"> This is the version number of the feature to test. In Level 2, version 1, 
            this is the string <c>"2.0"</c>. If the version is not specified, supporting any version of the feature will cause the
            method to return <see langword="true"/>.</param>
            <returns> Returns <see langword="true"/> if the specified feature is supported on this node, 
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IDocumentStyle">
            <summary>
            The DocumentStyle interface provides a mechanism by which the style sheets embedded in a document 
            can be retrieved. 
            The expectation is that an instance of the DocumentStyle interface can be obtained by using 
            binding-specific casting methods on an instance of the Document interface. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IDocumentStyle.StyleSheets">
            <summary>
            A list containing all the style sheets explicitly linked into or embedded in a document. 
            For HTML documents, this includes external style sheets, included via the HTML LINK element, 
            and inline STYLE elements. In XML, this includes external style sheets, included via style 
            sheet processing instructions (see [XML-StyleSheet]).
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.ILinkStyle">
            <summary>
            The LinkStyle interface provides a mechanism by which a style sheet can be retrieved from the 
            node responsible for linking it into a document. An instance of the LinkStyle interface can be 
            obtained using binding-specific casting methods on an instance of a linking node (HTMLLinkElement, 
            HTMLStyleElement or ProcessingInstruction in DOM Level 2). 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.ILinkStyle.Sheet">
            <summary>
            The style sheet
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IMediaList">
            <summary>
            The MediaList interface provides the abstraction of an ordered collection of media, without 
            defining or constraining how this collection is implemented. An empty list is the same
            as a list that contains the medium "all". 
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Stylesheets.IMediaList.AppendMedium(System.String)">
            <summary>
            Adds the medium newMedium to the end of the list. If the newMedium is already used, it is first removed.
            </summary>
            <param name="newMedium">The new medium to add.</param>
            <exception cref="T:SharpVectors.Dom.DomException">INVALID_CHARACTER_ERR: If the medium contains characters that are invalid in the underlying style language.</exception>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this list is readonly</exception>
        </member>
        <member name="M:SharpVectors.Dom.Stylesheets.IMediaList.DeleteMedium(System.String)">
            <summary>
            
            </summary>
            <param name="oldMedium"></param>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this list is readonly.</exception>
            <exception cref="T:SharpVectors.Dom.DomException">NOT_FOUND_ERR: Raised if oldMedium is not in the list.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IMediaList.Length">
            <summary>
            The number of media in the list. The range of valid media is 0 to length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IMediaList.MediaText">
            <summary>
            The parsable textual representation of the media list. This is a comma-separated list of media.
            </summary>
            <exception cref="T:SharpVectors.Dom.DomException"><c>SYNTAX_ERR:</c> Raised if the specified string value has a syntax error and is unparsable.</exception>
            <exception cref="T:SharpVectors.Dom.DomException"><c>NO_MODIFICATION_ALLOWED_ERR:</c> Raised if this media list is readonly.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IMediaList.Item(System.UInt64)">
            <summary>
            Returns the indexth in the list. If index is greater than or equal to the number of media in the list, this returns null.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IStyleSheet">
            <summary>
            The StyleSheet interface is the abstract base interface for any type of style sheet. It represents a 
            single style sheet associated with a structured document. In HTML, the StyleSheet interface represents 
            either an external style sheet, included via the HTML LINK element, or an inline STYLE element. In XML, 
            this interface represents an external style sheet, included via a style sheet processing 
            instruction. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Media">
            <summary>
            The intended destination media for style information. The media is often specified in the ownerNode. 
            If no media has been specified, the MediaList will be empty. See the media attribute definition for 
            the LINK element in HTML 4.0, and the media pseudo-attribute for the XML style sheet processing 
            instruction . Modifying the media list may cause a change to the attribute disabled.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Title">
            <summary>
            The advisory title. The title is often specified in the ownerNode. See the title attribute definition 
            for the LINK element in HTML 4.0, and the title pseudo-attribute for the XML style sheet processing 
            instruction.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Href">
            <summary>
            If the style sheet is a linked style sheet, the value of its attribute is its location. For inline 
            style sheets, the value of this attribute is null. See the href attribute definition for the LINK 
            element in HTML 4.0, and the href pseudo-attribute for the XML style sheet processing
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.ParentStyleSheet">
            <summary>
            For style sheet languages that support the concept of style sheet inclusion, this attribute represents 
            the including style sheet, if one exists. If the style sheet is a top-level style sheet, or the style 
            sheet language does not support inclusion, the value of this attribute is null.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.OwnerNode">
            <summary>
            The node that associates this style sheet with the document. For HTML, this may be the corresponding 
            LINK or STYLE element. For XML, it may be the linking processing instruction. For style sheets that 
            are included by other style sheets, the value of this attribute is null
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Disabled">
            <summary>
            false if the style sheet is applied to the document. true if it is not. Modifying this attribute 
            may cause a new resolution of style for the document. A stylesheet only applies if both an 
            appropriate medium definition is present and the disabled attribute is false. So, if the media 
            doesn't apply to the current user agent, the disabled attribute is ignored.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheet.Type">
            <summary>
            This specifies the style sheet language for this style sheet. The style sheet language is 
            specified as a content type (e.g. "text/css"). The content type is often specified in the 
            ownerNode. Also see the type attribute definition for the LINK element in HTML 4.0, and the 
            type pseudo-attribute for the XML style sheet processing instruction.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Stylesheets.IStyleSheetList">
            <summary>
            The StyleSheetList interface provides the abstraction of an ordered collection of style sheets. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheetList.Length">
            <summary>
            The number of StyleSheets in the list. The range of valid child stylesheet indices is 0 to 
            length-1 inclusive.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Stylesheets.IStyleSheetList.Item(System.UInt64)">
            <summary>
            Used to retrieve a style sheet by ordinal index. If index is greater than or equal to the 
            number of style sheets in the list, this returns null.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.SvgConstants">
            <summary>
            Define SVG constants, such as tag names, attribute names and URI
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MouseEventsType">
            <summary>
            The event type for MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.UIEventsType">
            <summary>
            The event type for UIEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgEventsType">
            <summary>
            The event type for SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeyEventsType">
            <summary>
            The event type for KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeydownEventType">
            <summary>
            The event type for 'keydown' KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeypressEventType">
            <summary>
            The event type for 'keypress' KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.KeyupEventType">
            <summary>
            The event type for 'keyup' KeyEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.ClickEventType">
            <summary>
            The event type for 'click' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MouseupEventType">
            <summary>
            The event type for 'mouseup' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MousedownEventType">
            <summary>
            The event type for 'mousedown' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MousemoveEventType">
            <summary>
            The event type for 'mousemove' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MouseoutEventType">
            <summary>
            The event type for 'mouseout' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.MouseoverEventType">
            <summary>
            The event type for 'mouseover' MouseEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.DomfocusinEventType">
            <summary>
            The event type for 'DOMFocusIn' UIEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.DomfocusoutEventType">
            <summary>
            The event type for 'DOMFocusOut' UIEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.DomactivateEventType">
            <summary>
            The event type for 'DOMActivate' UIEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgLoadEventType">
            <summary>
            The event type for 'SVGLoad' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgUnloadEventType">
            <summary>
            The event type for 'SVGUnload' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgAbortEventType">
            <summary>
            The event type for 'SVGAbort' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgErrorEventType">
            <summary>
            The event type for 'SVGError' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgResizeEventType">
            <summary>
            The event type for 'SVGResize' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgScrollEventType">
            <summary>
            The event type for 'SVGScroll' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.SvgZoomEventType">
            <summary>
            The event type for 'SVGZoom' SVGEvent.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnKeyupAttribute">
            <summary>
            The 'onkeyup' attribute name of type KeyEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnKeydownAttribute">
            <summary>
            The 'onkeydown' attribute name of type KeyEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnKeypressAttribute">
            <summary>
            The 'onkeypress' attribute name of type KeyEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnAbortAttribute">
            <summary>
            The 'onabort' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnActivateAttribute">
            <summary>
            The 'onabort' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnBeginAttribute">
            <summary>
            The 'onbegin' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnClickAttribute">
            <summary>
            The 'onclick' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnEndAttribute">
            <summary>
            The 'onend' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnErrorAttribute">
            <summary>
            The 'onerror' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnFocusinAttribute">
            <summary>
            The 'onfocusin' attribute name of type UIEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnFocusoutAttribute">
            <summary>
            The 'onfocusout' attribute name of type UIEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnLoadAttribute">
            <summary>
            The 'onload' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnMousedownAttribute">
            <summary>
            The 'onmousedown' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnMousemoveAttribute">
            <summary>
            The 'onmousemove' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnMouseoutAttribute">
            <summary>
            The 'onmouseout' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnMouseoverAttribute">
            <summary>
            The 'onmouseover' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnMouseupAttribute">
            <summary>
            The 'onmouseup' attribute name of type MouseEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnRepeatAttribute">
            <summary>
            The 'onrepeat' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnResizeAttribute">
            <summary>
            The 'onresize' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnScrollAttribute">
            <summary>
            The 'onscroll' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnUnloadAttribute">
            <summary>
            The 'onunload' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.SvgConstants.OnZoomAttribute">
            <summary>
            The 'onzoom' attribute name of type SVGEvents.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateColorElement">
            <summary>
            The SVGAnimateColorElement interface corresponds to the "animateColor" element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.AttributeName">
            <summary>
            Gets or sets the name of the target attribute. An XMLNS prefix may be used to indicate the XML 
            namespace for the attribute. The prefix will be interpreted in the scope of the 
            current (i.e., the referencing) animation element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.AttributeType">
            <summary>
            Gets or sets the namespace in which the target attribute and its associated values are defined. 
            </summary>
            <value>
            The attribute value is one of the following (values are case-sensitive): CSS | XML | auto
            <list type="bullet">
            <item><term>CSS</term>
            <description>
            This specifies that the value of "attributeName" is the name of a CSS property 
            defined as animatable in this specification.
            </description>
            </item>
            <item><term>XML</term>
            <description>
            This specifies that the value of "attributeName" is the name of an XML attribute defined 
            in the default XML namespace for the target element.If the value for "attributeName" has 
            an XMLNS prefix, the implementation must use the associated namespace as defined in the 
            scope of the target element.The attribute must be defined as animatable in this specification.
            </description>
            </item>
            <item><term>auto</term>
            <description>
            The implementation should match the "attributeName" to an attribute for the target element.
            The implementation must first search through the list of CSS properties for a matching property name, 
            and if none is found, search the default XML namespace for the element.
            </description>
            </item>
            </list>
            <para>The default value is 'auto'.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.CalcMode">
            <summary>
            Gets or sets a value that specifies the interpolation mode for the animation. 
            </summary>
            <value>
            This can take any of the following values. The default mode is 'linear', however if the attribute 
            does not support linear interpolation (e.g. for strings), the "calcMode" attribute is ignored 
            and discrete interpolation is used.
            <list type="bullet">
            <item><term>discrete</term>
            <description>
            This specifies that the animation function will jump from one value to the next without any interpolation.
            </description>
            </item>
            <item><term>linear</term>
            <description>
            Simple linear interpolation between values is used to calculate the animation function. 
            Except for "animateMotion", this is the default "calcMode".
            </description>
            </item>
            <item><term>paced</term>
            <description>
            Defines interpolation to produce an even pace of change across the animation.
             If 'paced' is specified, any "keyTimes" or "keySplines" will be ignored. 
             For "animateMotion", this is the default "calcMode". 
            </description>
            </item>
            <item><term>spline</term>
            <description>
            Interpolates from one value in the "values" list to the next according to a time function 
            defined by a cubic Bézier spline. The points of the spline are defined in the "keyTimes" attribute, 
            and the control points for each interval are defined in the "keySplines" attribute.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.Values">
            <summary>
            Gets or sets a semicolon-separated list of one or more values. 
            </summary>
            <value>
            Vector-valued attributes are supported using the vector syntax of the "attributeType" domain. 
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.KeyTimes">
            <summary>
            Gets or sets a semicolon-separated list of time values used to control the pacing of the animation.
            </summary>
            <value>
            Each time in the list corresponds to a value in the "values" attribute list, and defines when the 
            value is used in the animation function. Each time value in the "keyTimes" list is specified as 
            a floating point value between 0 and 1 (inclusive), representing a proportional offset into the 
            simple duration of the animation element.
            </value>
            <remarks>
            <para>
            For animations specified with a "values" list, the "keyTimes" attribute if specified must have 
            exactly as many values as there are in the "values" attribute. For from/to/by animations, 
            the "keyTimes" attribute if specified must have two values.
            </para>
            <para>
            Each successive time value must be greater than or equal to the preceding time value.
            </para>
            <para>
            The "keyTimes" list semantics depends upon the interpolation mode:
            </para>
            <list type="bullet">
            <item>
            <description>
            For linear and spline animation, the first time value in the list must be 0, and the last time 
            value in the list must be 1. The key time associated with each value defines when the value is set; 
            values are interpolated between the key times.
            </description>
            </item>
            <item>
            <description>
            For discrete animation, the first time value in the list must be 0. The time associated with each 
            value defines when the value is set; the animation function uses that value until the next time 
            defined in "keyTimes".
            </description>
            </item>
            </list>
            <para>
            If the interpolation mode is 'paced', the "keyTimes" attribute is ignored.
            </para>
            <para>
            If there are any errors in the "keyTimes" specification (bad values, too many or too few values), 
            the document fragment is in error (see error processing).
            </para>
            <para>
            If the simple duration is indefinite, any "keyTimes" specification will be ignored.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.KeySplines">
            <summary>
            Gets or sets a set of Bézier control points associated with the "keyTimes" list, defining a cubic 
            Bézier function that controls interval pacing.
            </summary>
            <value>
            <para>
            The attribute value is a semicolon-separated list of control point descriptions. Each control 
            point description is a set of four values: x1 y1 x2 y2, describing the Bézier control points 
            for one time segment.
            </para>
            <para>
            The values must all be in the range 0 to 1.
            </para>
            <para>
            This attribute is ignored unless the "calcMode" is set to 'spline'.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.From">
            <summary>
            Gets or sets a value that specifies the starting value of the animation.
            </summary>
            <value>
            Specifies the starting value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.To">
            <summary>
            Gets or sets a value that specifies the ending value of the animation. 
            </summary>
            <value>
            Specifies the ending value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.By">
            <summary>
            Gets or sets a value that specifies a relative offset value for the animation.
            </summary>
            <value>
            Specifies a relative offset value for the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.Additive">
            <summary>
            Gets or sets a value that controls whether or not the animation is additive.
            </summary>
            <value>
            Posible values are replace | sum, default is sum.
            <list type="bullet">
            <item><term>replace</term>
            <description>
            Specifies that the animation will override the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            <item><term>sum</term>
            <description>
            Specifies that the animation will add to the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateColorElement.Accumulate">
            <summary>
            Gets or sets a value that controls whether or not the animation is cumulative.
            </summary>
            <value>
            Possible value are none | sum, default is none.
            <list type="bullet">
            <item><term>sum</term>
            <description>
            Specifies that each repeat iteration after the first builds upon the last value of 
            the previous iteration.
            </description>
            </item>
            <item><term>none</term>
            <description>
            Specifies that repeat iterations are not cumulative. This is the default.
            </description>
            </item>
            </list>
            </value>
            <remarks>
            <para>
            This attribute is ignored if the target attribute value does not support addition, 
            or if the animation element does not repeat.
            </para>
            <para>Cumulative animation is not defined for "to animation".</para>
            <para>This attribute will be ignored if the animation function is specified with only the "to" attribute.</para>
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateElement">
            <summary>
            This interface corresponds to the "animate" element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.AttributeName">
            <summary>
            Gets or sets the name of the target attribute. An XMLNS prefix may be used to indicate the XML 
            namespace for the attribute. The prefix will be interpreted in the scope of the 
            current (i.e., the referencing) animation element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.AttributeType">
            <summary>
            Gets or sets the namespace in which the target attribute and its associated values are defined. 
            </summary>
            <value>
            The attribute value is one of the following (values are case-sensitive): CSS | XML | auto
            <list type="bullet">
            <item><term>CSS</term>
            <description>
            This specifies that the value of "attributeName" is the name of a CSS property 
            defined as animatable in this specification.
            </description>
            </item>
            <item><term>XML</term>
            <description>
            This specifies that the value of "attributeName" is the name of an XML attribute defined 
            in the default XML namespace for the target element.If the value for "attributeName" has 
            an XMLNS prefix, the implementation must use the associated namespace as defined in the 
            scope of the target element.The attribute must be defined as animatable in this specification.
            </description>
            </item>
            <item><term>auto</term>
            <description>
            The implementation should match the "attributeName" to an attribute for the target element.
            The implementation must first search through the list of CSS properties for a matching property name, 
            and if none is found, search the default XML namespace for the element.
            </description>
            </item>
            </list>
            <para>The default value is 'auto'.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.CalcMode">
            <summary>
            Gets or sets a value that specifies the interpolation mode for the animation. 
            </summary>
            <value>
            This can take any of the following values. The default mode is 'linear', however if the attribute 
            does not support linear interpolation (e.g. for strings), the "calcMode" attribute is ignored 
            and discrete interpolation is used.
            <list type="bullet">
            <item><term>discrete</term>
            <description>
            This specifies that the animation function will jump from one value to the next without any interpolation.
            </description>
            </item>
            <item><term>linear</term>
            <description>
            Simple linear interpolation between values is used to calculate the animation function. 
            Except for "animateMotion", this is the default "calcMode".
            </description>
            </item>
            <item><term>paced</term>
            <description>
            Defines interpolation to produce an even pace of change across the animation.
             If 'paced' is specified, any "keyTimes" or "keySplines" will be ignored. 
             For "animateMotion", this is the default "calcMode". 
            </description>
            </item>
            <item><term>spline</term>
            <description>
            Interpolates from one value in the "values" list to the next according to a time function 
            defined by a cubic Bézier spline. The points of the spline are defined in the "keyTimes" attribute, 
            and the control points for each interval are defined in the "keySplines" attribute.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.Values">
            <summary>
            Gets or sets a semicolon-separated list of one or more values. 
            </summary>
            <value>
            Vector-valued attributes are supported using the vector syntax of the "attributeType" domain. 
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.KeyTimes">
            <summary>
            Gets or sets a semicolon-separated list of time values used to control the pacing of the animation.
            </summary>
            <value>
            Each time in the list corresponds to a value in the "values" attribute list, and defines when the 
            value is used in the animation function. Each time value in the "keyTimes" list is specified as 
            a floating point value between 0 and 1 (inclusive), representing a proportional offset into the 
            simple duration of the animation element.
            </value>
            <remarks>
            <para>
            For animations specified with a "values" list, the "keyTimes" attribute if specified must have 
            exactly as many values as there are in the "values" attribute. For from/to/by animations, 
            the "keyTimes" attribute if specified must have two values.
            </para>
            <para>
            Each successive time value must be greater than or equal to the preceding time value.
            </para>
            <para>
            The "keyTimes" list semantics depends upon the interpolation mode:
            </para>
            <list type="bullet">
            <item>
            <description>
            For linear and spline animation, the first time value in the list must be 0, and the last time 
            value in the list must be 1. The key time associated with each value defines when the value is set; 
            values are interpolated between the key times.
            </description>
            </item>
            <item>
            <description>
            For discrete animation, the first time value in the list must be 0. The time associated with each 
            value defines when the value is set; the animation function uses that value until the next time 
            defined in "keyTimes".
            </description>
            </item>
            </list>
            <para>
            If the interpolation mode is 'paced', the "keyTimes" attribute is ignored.
            </para>
            <para>
            If there are any errors in the "keyTimes" specification (bad values, too many or too few values), 
            the document fragment is in error (see error processing).
            </para>
            <para>
            If the simple duration is indefinite, any "keyTimes" specification will be ignored.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.KeySplines">
            <summary>
            Gets or sets a set of Bézier control points associated with the "keyTimes" list, defining a cubic 
            Bézier function that controls interval pacing.
            </summary>
            <value>
            <para>
            The attribute value is a semicolon-separated list of control point descriptions. Each control 
            point description is a set of four values: x1 y1 x2 y2, describing the Bézier control points 
            for one time segment.
            </para>
            <para>
            The values must all be in the range 0 to 1.
            </para>
            <para>
            This attribute is ignored unless the "calcMode" is set to 'spline'.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.From">
            <summary>
            Gets or sets a value that specifies the starting value of the animation.
            </summary>
            <value>
            Specifies the starting value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.To">
            <summary>
            Gets or sets a value that specifies the ending value of the animation. 
            </summary>
            <value>
            Specifies the ending value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.By">
            <summary>
            Gets or sets a value that specifies a relative offset value for the animation.
            </summary>
            <value>
            Specifies a relative offset value for the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.Additive">
            <summary>
            Gets or sets a value that controls whether or not the animation is additive.
            </summary>
            <value>
            Posible values are replace | sum, default is sum.
            <list type="bullet">
            <item><term>replace</term>
            <description>
            Specifies that the animation will override the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            <item><term>sum</term>
            <description>
            Specifies that the animation will add to the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateElement.Accumulate">
            <summary>
            Gets or sets a value that controls whether or not the animation is cumulative.
            </summary>
            <value>
            Possible value are none | sum, default is none.
            <list type="bullet">
            <item><term>sum</term>
            <description>
            Specifies that each repeat iteration after the first builds upon the last value of 
            the previous iteration.
            </description>
            </item>
            <item><term>none</term>
            <description>
            Specifies that repeat iterations are not cumulative. This is the default.
            </description>
            </item>
            </list>
            </value>
            <remarks>
            <para>
            This attribute is ignored if the target attribute value does not support addition, 
            or if the animation element does not repeat.
            </para>
            <para>Cumulative animation is not defined for "to animation".</para>
            <para>This attribute will be ignored if the animation function is specified with only the "to" attribute.</para>
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateMotionElement">
            <summary>
            This interface corresponds to the "animateMotion" element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.CalcMode">
            <summary>
            Gets or sets a value that specifies the interpolation mode for the animation. 
            </summary>
            <value>
            This can take any of the following values. The default mode is 'linear', however if the attribute 
            does not support linear interpolation (e.g. for strings), the "calcMode" attribute is ignored 
            and discrete interpolation is used.
            <list type="bullet">
            <item><term>discrete</term>
            <description>
            This specifies that the animation function will jump from one value to the next without any interpolation.
            </description>
            </item>
            <item><term>linear</term>
            <description>
            Simple linear interpolation between values is used to calculate the animation function. 
            Except for "animateMotion", this is the default "calcMode".
            </description>
            </item>
            <item><term>paced</term>
            <description>
            Defines interpolation to produce an even pace of change across the animation.
             If 'paced' is specified, any "keyTimes" or "keySplines" will be ignored. 
             For "animateMotion", this is the default "calcMode". 
            </description>
            </item>
            <item><term>spline</term>
            <description>
            Interpolates from one value in the "values" list to the next according to a time function 
            defined by a cubic Bézier spline. The points of the spline are defined in the "keyTimes" attribute, 
            and the control points for each interval are defined in the "keySplines" attribute.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Values">
            <summary>
            Gets or sets a semicolon-separated list of one or more values. 
            </summary>
            <value>
            Vector-valued attributes are supported using the vector syntax of the "attributeType" domain. 
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.KeyTimes">
            <summary>
            Gets or sets a semicolon-separated list of time values used to control the pacing of the animation.
            </summary>
            <value>
            Each time in the list corresponds to a value in the "values" attribute list, and defines when the 
            value is used in the animation function. Each time value in the "keyTimes" list is specified as 
            a floating point value between 0 and 1 (inclusive), representing a proportional offset into the 
            simple duration of the animation element.
            </value>
            <remarks>
            <para>
            For animations specified with a "values" list, the "keyTimes" attribute if specified must have 
            exactly as many values as there are in the "values" attribute. For from/to/by animations, 
            the "keyTimes" attribute if specified must have two values.
            </para>
            <para>
            Each successive time value must be greater than or equal to the preceding time value.
            </para>
            <para>
            The "keyTimes" list semantics depends upon the interpolation mode:
            </para>
            <list type="bullet">
            <item>
            <description>
            For linear and spline animation, the first time value in the list must be 0, and the last time 
            value in the list must be 1. The key time associated with each value defines when the value is set; 
            values are interpolated between the key times.
            </description>
            </item>
            <item>
            <description>
            For discrete animation, the first time value in the list must be 0. The time associated with each 
            value defines when the value is set; the animation function uses that value until the next time 
            defined in "keyTimes".
            </description>
            </item>
            </list>
            <para>
            If the interpolation mode is 'paced', the "keyTimes" attribute is ignored.
            </para>
            <para>
            If there are any errors in the "keyTimes" specification (bad values, too many or too few values), 
            the document fragment is in error (see error processing).
            </para>
            <para>
            If the simple duration is indefinite, any "keyTimes" specification will be ignored.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.KeySplines">
            <summary>
            Gets or sets a set of Bézier control points associated with the "keyTimes" list, defining a cubic 
            Bézier function that controls interval pacing.
            </summary>
            <value>
            <para>
            The attribute value is a semicolon-separated list of control point descriptions. Each control 
            point description is a set of four values: x1 y1 x2 y2, describing the Bézier control points 
            for one time segment.
            </para>
            <para>
            The values must all be in the range 0 to 1.
            </para>
            <para>
            This attribute is ignored unless the "calcMode" is set to 'spline'.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.From">
            <summary>
            Gets or sets a value that specifies the starting value of the animation.
            </summary>
            <value>
            Specifies the starting value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.To">
            <summary>
            Gets or sets a value that specifies the ending value of the animation. 
            </summary>
            <value>
            Specifies the ending value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.By">
            <summary>
            Gets or sets a value that specifies a relative offset value for the animation.
            </summary>
            <value>
            Specifies a relative offset value for the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Additive">
            <summary>
            Gets or sets a value that controls whether or not the animation is additive.
            </summary>
            <value>
            Posible values are replace | sum, default is sum.
            <list type="bullet">
            <item><term>replace</term>
            <description>
            Specifies that the animation will override the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            <item><term>sum</term>
            <description>
            Specifies that the animation will add to the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Accumulate">
            <summary>
            Gets or sets a value that controls whether or not the animation is cumulative.
            </summary>
            <value>
            Possible value are none | sum, default is none.
            <list type="bullet">
            <item><term>sum</term>
            <description>
            Specifies that each repeat iteration after the first builds upon the last value of 
            the previous iteration.
            </description>
            </item>
            <item><term>none</term>
            <description>
            Specifies that repeat iterations are not cumulative. This is the default.
            </description>
            </item>
            </list>
            </value>
            <remarks>
            <para>
            This attribute is ignored if the target attribute value does not support addition, 
            or if the animation element does not repeat.
            </para>
            <para>Cumulative animation is not defined for "to animation".</para>
            <para>This attribute will be ignored if the animation function is specified with only the "to" attribute.</para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Path">
            <summary>
            Gets or set the attribute specifying the motion path, expressed in the same format and interpreted the same 
            way as the "d" attribute on the "path" element. 
            </summary>
            <value>
            The effect of a motion path animation is to add a supplemental transformation matrix onto the CTM for the 
            referenced object which causes a translation along the x- and y-axes of the current user coordinate system 
            by the computed X and Y values computed over time.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.KeyPoints">
            <summary>
            Gets or sets a value that takes a semicolon-separated list of floating point values between 0 and 1 and indicates 
            how far along the motion path the object shall move at the moment in time specified by corresponding "keyTimes" value. 
            </summary>
            <value>
            <para>
            Distance calculations use the user agent's distance along the path algorithm. Each progress value in the list 
            corresponds to a value in the "keyTimes" attribute list.
            </para>
            <para>
            If a list of "keyPoints" is specified, there must be exactly as many values in the "keyPoints" list 
            as in the "keyTimes" list.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Rotate">
            <summary>
            Gets or sets an attribute post-multiplies a supplemental transformation matrix onto the CTM of the target element 
            to apply a rotation transformation about the origin of the current user coordinate system. 
            </summary>
            <value>
            The rotation transformation is applied after the supplemental translation transformation that is computed 
            due to the "path" attribute.
            <list type="bullet">
            <item><term>auto</term>
            <description>Indicates that the object is rotated over time by the angle of the direction (i.e., 
            directional tangent vector) of the motion path.</description>
            </item>
            <item><term>auto-reverse</term>
            <description>Indicates that the object is rotated over time by the angle of the direction (i.e., 
            directional tangent vector) of the motion path plus 180 degrees.</description>
            </item>
            <item><term>number</term>
            <description>Indicates that the target element has a constant rotation transformation applied to it, 
            where the rotation angle is the specified number of degrees.</description>
            </item>
            </list>
            The default value is '0'.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateMotionElement.Origin">
            <summary>
            The "origin" attribute is defined in the SMIL Animation specification. It has no effect in SVG.
            </summary>
            <value>
            The value is "default".
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateMPathElement">
            <summary>
            This interface corresponds to the "mpath" element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateSetElement">
            <summary>
            Object-oriented access to the attributes of the "set" element via the SVG DOM is not available.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateSetElement.AttributeName">
            <summary>
            Gets or sets the name of the target attribute. An XMLNS prefix may be used to indicate the XML 
            namespace for the attribute. The prefix will be interpreted in the scope of the 
            current (i.e., the referencing) animation element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateSetElement.AttributeType">
            <summary>
            Gets or sets the namespace in which the target attribute and its associated values are defined. 
            </summary>
            <value>
            The attribute value is one of the following (values are case-sensitive): CSS | XML | auto
            <list type="bullet">
            <item><term>CSS</term>
            <description>
            This specifies that the value of "attributeName" is the name of a CSS property 
            defined as animatable in this specification.
            </description>
            </item>
            <item><term>XML</term>
            <description>
            This specifies that the value of "attributeName" is the name of an XML attribute defined 
            in the default XML namespace for the target element.If the value for "attributeName" has 
            an XMLNS prefix, the implementation must use the associated namespace as defined in the 
            scope of the target element.The attribute must be defined as animatable in this specification.
            </description>
            </item>
            <item><term>auto</term>
            <description>
            The implementation should match the "attributeName" to an attribute for the target element.
            The implementation must first search through the list of CSS properties for a matching property name, 
            and if none is found, search the default XML namespace for the element.
            </description>
            </item>
            </list>
            <para>The default value is 'auto'.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateSetElement.To">
            <summary>
            Gets or sets a value that specifies the ending value of the animation. 
            </summary>
            <value>
            Specifies the value for the attribute during the duration of the ‘set’ element. 
            The argument value must match the attribute type.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimateTransformElement">
            <summary>
            This interface corresponds to the "animateTransform" element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.AttributeName">
            <summary>
            Gets or sets the name of the target attribute. An XMLNS prefix may be used to indicate the XML 
            namespace for the attribute. The prefix will be interpreted in the scope of the 
            current (i.e., the referencing) animation element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.AttributeType">
            <summary>
            Gets or sets the namespace in which the target attribute and its associated values are defined. 
            </summary>
            <value>
            The attribute value is one of the following (values are case-sensitive): CSS | XML | auto
            <list type="bullet">
            <item><term>CSS</term>
            <description>
            This specifies that the value of "attributeName" is the name of a CSS property 
            defined as animatable in this specification.
            </description>
            </item>
            <item><term>XML</term>
            <description>
            This specifies that the value of "attributeName" is the name of an XML attribute defined 
            in the default XML namespace for the target element.If the value for "attributeName" has 
            an XMLNS prefix, the implementation must use the associated namespace as defined in the 
            scope of the target element.The attribute must be defined as animatable in this specification.
            </description>
            </item>
            <item><term>auto</term>
            <description>
            The implementation should match the "attributeName" to an attribute for the target element.
            The implementation must first search through the list of CSS properties for a matching property name, 
            and if none is found, search the default XML namespace for the element.
            </description>
            </item>
            </list>
            <para>The default value is 'auto'.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.CalcMode">
            <summary>
            Gets or sets a value that specifies the interpolation mode for the animation. 
            </summary>
            <value>
            This can take any of the following values. The default mode is 'linear', however if the attribute 
            does not support linear interpolation (e.g. for strings), the "calcMode" attribute is ignored 
            and discrete interpolation is used.
            <list type="bullet">
            <item><term>discrete</term>
            <description>
            This specifies that the animation function will jump from one value to the next without any interpolation.
            </description>
            </item>
            <item><term>linear</term>
            <description>
            Simple linear interpolation between values is used to calculate the animation function. 
            Except for "animateMotion", this is the default "calcMode".
            </description>
            </item>
            <item><term>paced</term>
            <description>
            Defines interpolation to produce an even pace of change across the animation.
             If 'paced' is specified, any "keyTimes" or "keySplines" will be ignored. 
             For "animateMotion", this is the default "calcMode". 
            </description>
            </item>
            <item><term>spline</term>
            <description>
            Interpolates from one value in the "values" list to the next according to a time function 
            defined by a cubic Bézier spline. The points of the spline are defined in the "keyTimes" attribute, 
            and the control points for each interval are defined in the "keySplines" attribute.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.Values">
            <summary>
            Gets or sets a semicolon-separated list of one or more values. 
            </summary>
            <value>
            Vector-valued attributes are supported using the vector syntax of the "attributeType" domain. 
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.KeyTimes">
            <summary>
            Gets or sets a semicolon-separated list of time values used to control the pacing of the animation.
            </summary>
            <value>
            Each time in the list corresponds to a value in the "values" attribute list, and defines when the 
            value is used in the animation function. Each time value in the "keyTimes" list is specified as 
            a floating point value between 0 and 1 (inclusive), representing a proportional offset into the 
            simple duration of the animation element.
            </value>
            <remarks>
            <para>
            For animations specified with a "values" list, the "keyTimes" attribute if specified must have 
            exactly as many values as there are in the "values" attribute. For from/to/by animations, 
            the "keyTimes" attribute if specified must have two values.
            </para>
            <para>
            Each successive time value must be greater than or equal to the preceding time value.
            </para>
            <para>
            The "keyTimes" list semantics depends upon the interpolation mode:
            </para>
            <list type="bullet">
            <item>
            <description>
            For linear and spline animation, the first time value in the list must be 0, and the last time 
            value in the list must be 1. The key time associated with each value defines when the value is set; 
            values are interpolated between the key times.
            </description>
            </item>
            <item>
            <description>
            For discrete animation, the first time value in the list must be 0. The time associated with each 
            value defines when the value is set; the animation function uses that value until the next time 
            defined in "keyTimes".
            </description>
            </item>
            </list>
            <para>
            If the interpolation mode is 'paced', the "keyTimes" attribute is ignored.
            </para>
            <para>
            If there are any errors in the "keyTimes" specification (bad values, too many or too few values), 
            the document fragment is in error (see error processing).
            </para>
            <para>
            If the simple duration is indefinite, any "keyTimes" specification will be ignored.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.KeySplines">
            <summary>
            Gets or sets a set of Bézier control points associated with the "keyTimes" list, defining a cubic 
            Bézier function that controls interval pacing.
            </summary>
            <value>
            <para>
            The attribute value is a semicolon-separated list of control point descriptions. Each control 
            point description is a set of four values: x1 y1 x2 y2, describing the Bézier control points 
            for one time segment.
            </para>
            <para>
            The values must all be in the range 0 to 1.
            </para>
            <para>
            This attribute is ignored unless the "calcMode" is set to 'spline'.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.From">
            <summary>
            Gets or sets a value that specifies the starting value of the animation.
            </summary>
            <value>
            Specifies the starting value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.To">
            <summary>
            Gets or sets a value that specifies the ending value of the animation. 
            </summary>
            <value>
            Specifies the ending value of the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.By">
            <summary>
            Gets or sets a value that specifies a relative offset value for the animation.
            </summary>
            <value>
            Specifies a relative offset value for the animation.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.Additive">
            <summary>
            Gets or sets a value that controls whether or not the animation is additive.
            </summary>
            <value>
            Posible values are replace | sum, default is sum.
            <list type="bullet">
            <item><term>replace</term>
            <description>
            Specifies that the animation will override the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            <item><term>sum</term>
            <description>
            Specifies that the animation will add to the underlying value of the attribute and 
            other lower priority animations.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.Accumulate">
            <summary>
            Gets or sets a value that controls whether or not the animation is cumulative.
            </summary>
            <value>
            Possible value are none | sum, default is none.
            <list type="bullet">
            <item><term>sum</term>
            <description>
            Specifies that each repeat iteration after the first builds upon the last value of 
            the previous iteration.
            </description>
            </item>
            <item><term>none</term>
            <description>
            Specifies that repeat iterations are not cumulative. This is the default.
            </description>
            </item>
            </list>
            </value>
            <remarks>
            <para>
            This attribute is ignored if the target attribute value does not support addition, 
            or if the animation element does not repeat.
            </para>
            <para>Cumulative animation is not defined for "to animation".</para>
            <para>This attribute will be ignored if the animation function is specified with only the "to" attribute.</para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimateTransformElement.Type">
            <summary>
            Gets or sets a value to indicates the type of transformation which is to have its values change over time. 
            </summary>
            <value>
            <para>
            The values are translate | scale | rotate | skewX | skewY.
            </para>
            <para>
            If the attribute is not specified, then the effect is as if a value of 'translate' were specified.
            </para>
            <para>
            The ‘from’, ‘by’ and ‘to’ attributes take a value expressed using the same syntax that is available for the given transformation type:
            </para>
            <list type="bullet">
            <item>
            <description>For a type='translate", each individual value is expressed as {tx} [,{ty}].</description>
            </item>
            <item>
            <description>For a type="scale", each individual value is expressed as {sx} [,{sy}].</description>
            </item>
            <item>
            <description>For a type="rotate", each individual value is expressed as {rotate-angle} [{cx} {cy}].</description>
            </item>
            <item>
            <description>For a type="skewX" and type="skewY", each individual value is expressed as {skew-angle}.</description>
            </item>
            </list>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimationElement">
            <summary>
            This is the base interface for all of the animation element interfaces: 
            <see cref="T:SharpVectors.Dom.Svg.ISvgAnimateElement"/>, <see cref="T:SharpVectors.Dom.Svg.ISvgAnimateSetElement"/>, <see cref="T:SharpVectors.Dom.Svg.ISvgAnimateColorElement"/>, 
            <see cref="T:SharpVectors.Dom.Svg.ISvgAnimateMotionElement"/> and <see cref="T:SharpVectors.Dom.Svg.ISvgAnimateTransformElement"/>.
            </summary>
            <remarks>
            Unlike other SVG DOM interfaces, the SVG DOM does not specify convenience DOM properties corresponding to 
            the various language attributes on SVG's animation elements. 
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.TargetElement">
            <summary>
            Gets the element which is being animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.StartTime">
            <summary>
            Gets the begin time, in seconds, for this animation element's current interval, if it exists, 
            regardless of whether the interval has begun yet. If there is no current interval, then a 
            <see cref="T:SharpVectors.Dom.DomException"/> with code INVALID_STATE_ERR is thrown.
            </summary>
            <value>
            The start time, in seconds, of this animation element's current interval.
            </value>
            <exception cref="T:SharpVectors.Dom.DomException">The animation element does not have a current interval.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.CurrentTime">
            <summary>
            Gets the current time in seconds relative to time zero for the given time container.
            </summary>
            <value>
            The current time in seconds relative to time zero for the given time container.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.SimpleDuration">
            <summary>
            Gets the number of seconds for the simple duration for this animation. If the simple duration 
            is undefined (e.g., the end time is indefinite), then an exception is raised.
            </summary>
            <value>
            The number of seconds for the simple duration for this animation.
            </value>
            <exception cref="T:SharpVectors.Dom.DomException">The simple duration is not determined on the given element.</exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Begin">
            <summary>
            Gets or sets values of values that defines when the element should begin (i.e. become active).
            </summary>
            <value>
            The attribute value is a semicolon separated list of values.
            <para>
            If set to "indefinite", the begin of the animation will be determined by a 
            <see cref="M:SharpVectors.Dom.IElementTimeControl.BeginElement"/> method call or a hyperlink targeted to the element.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Duration">
            <summary>
            Gets or sets a value that specifies the simple duration.
            </summary>
            <value>
            <para>The attribute value can be one of the following:</para>
            <list type="bullet">
            <item><term>Clock-value (time duration)</term>
            <description>
            Specifies the length of the simple duration in presentation time. Value must be greater than 0.
            </description>
            </item>
            <item><term>media</term>
            <description>
            Specifies the simple duration as the intrinsic media duration. This is only valid for elements that define media.
            <para>(For SVG's animation elements, if 'media' is specified, the attribute will be ignored.)</para>
            </description>
            </item>
            <item><term>indefinite</term>
            <description>Specifies the simple duration as indefinite.</description>
            </item>
            </list>
            <para>If the animation does not have a "dur" attribute, the simple duration is indefinite.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.End">
            <summary>
            Gets or sets the attribute that defines an end value for the animation that can 
            constrain the active duration. 
            </summary>
            <value>
            <para>
            The attribute value is a semicolon separated list of values.
            </para>
            <para>
            A value of "indefinite" specifies that the end of the animation will be determined by an 
            <see cref="M:SharpVectors.Dom.IElementTimeControl.EndElement"/> method call (the animation DOM methods are 
            described in DOM interfaces).
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Minimum">
            <summary>
            Gets or sets a value that specifies the minimum value of the active duration.
            </summary>
            <value>
            <para>The attribute value can be either of the following:</para>
            <list type="bullet">
            <item><term>Clock-value</term>
            <description>
            Specifies the length of the minimum value of the active duration, measured in local time.
            Value must be greater than 0.
            </description>
            </item>
            <item><term>media</term>
            <description>
            Specifies the minimum value of the active duration as the intrinsic media duration. 
            This is only valid for elements that define media. 
            (For SVG's animation elements, if 'media' is specified, the attribute will be ignored.)
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Maximum">
            <summary>
            Gets or sets the value that specifies the maximum value of the active duration.
            </summary>
            <value>
            <para>The attribute value can be either of the following:</para>
            <list type="bullet">
            <item><term>Clock-value</term>
            <description>
            Specifies the length of the maximum value of the active duration, measured in local time.
            <para>Value must be greater than 0.</para>
            </description>
            </item>
            <item><term>media</term>
            <description>
            Specifies the maximum value of the active duration as the intrinsic media duration. 
            This is only valid for elements that define media. (For SVG's animation elements, if 
            'media' is specified, the attribute will be ignored.)
            </description>
            </item>
            </list>
            <para>There is no default value for "max". This does not constrain the active duration at all.</para>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Restart">
            <summary>
            Gets or sets the attribute that controls the circumstances under which an animation is restarted.
            </summary>
            <value>
            <list type="bullet">
            <item><term>always</term>
            <description>The animation can be restarted at any time. This is the default value.</description>
            </item>
            <item><term>whenNotActive</term>
            <description>
            The animation can only be restarted when it is not active (i.e. after the active end). 
            Attempts to restart the animation during its active duration are ignored.
            </description>
            </item>
            <item><term>never</term>
            <description>
            The element cannot be restarted for the remainder of the current simple duration of the parent 
            time container. (In the case of SVG, since the parent time container is the SVG document fragment, 
            then the animation cannot be restarted for the remainder of the document duration.)
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.RepeatCount">
            <summary>
            Gets or sets a value that specifies the number of iterations of the animation function. 
            </summary>
            <value>
            It can have the following attribute values:
            <list type="bullet">
            <item><term>numeric value</term>
            <description>
            This is a (base 10) "floating point" numeric value that specifies the number of iterations. 
            It can include partial iterations expressed as fraction values. 
            A fractional value describes a portion of the simple duration. Values must be greater than 0.
            </description>
            </item>
            <item><term>indefinite</term>
            <description>
            The animation is defined to repeat indefinitely (i.e. until the document ends).
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.RepeatDuration">
            <summary>
            Gets or sets a value that specifies the total duration for repeat. 
            </summary>
            <value>
            It can have the following attribute values: 
            <list type="bullet">
            <item><term>Clock-value</term>
            <description>Specifies the duration in presentation time to repeat the animation function f(t).</description>
            </item>
            <item><term>indefinite</term>
            <description>The animation is defined to repeat indefinitely (i.e. until the document ends).</description>
            </item>
            </list>
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimationElement.Fill">
            <summary>
            Gets or sets the attribute can be used to maintain the value of the animation after 
            the active duration of the animation element ends.
            </summary>
            <value>
            This attribute can have the following values:
            <list type="bullet">
            <item><term>freeze</term>
            <description>
            The animation effect F(t) is defined to freeze the effect value at the last value of the active duration. 
            The animation effect is "frozen" for the remainder of the document duration.
            </description>
            </item>
            <item><term>remove</term>
            <description>
            The animation effect is removed (no longer applied) when the active duration of the animation is over. 
            After the active end of the animation, the animation no longer affects the target. This is the default value.
            </description>
            </item>
            </list>
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAngle">
            <summary>
            The SvgAngle interface corresponds to the angle basic data 
            type. 
            </summary>
            <developer>niklas@protocol7.com</developer>
            <completed>100</completed>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAngle.UnitType">
            <summary>
            The type of the value as specified by the SvgAngleType 
            enum class.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAngle.Value">
            <summary>
            The angle value as a floating point value, in degrees. 
            Setting this attribute will cause valueInSpecifiedUnits 
            and valueAsString to be updated automatically to reflect 
            this setting.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAngle.ValueInSpecifiedUnits">
            <summary>
            The angle value as a floating point value, in the units 
            expressed by unitType. Setting this attribute will cause
            value and valueAsString to be updated automatically to 
            reflect this setting.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAngle.ValueAsString">
            <summary>
            The angle value as a string value, in the units expressed
            by unitType. Setting this attribute will cause value and 
            valueInSpecifiedUnits to be updated automatically to 
            reflect this setting.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgAngle.NewValueSpecifiedUnits(SharpVectors.Dom.Svg.SvgAngleType,System.Double)">
            <summary>
            Reset the value as a number with an associated unitType,
            thereby replacing the values for all of the attributes on 
            the object.
            </summary>
            <param name="unitType"> The unitType for the angle value (e.g., SvgAngleTypeDEG).</param>
            <param name="valueInSpecifiedUnits">The angle value.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgAngle.ConvertToSpecifiedUnits(SharpVectors.Dom.Svg.SvgAngleType)">
            <summary>
            Preserve the same underlying stored value, but reset the
            stored unit identifier to the given unitType. Object 
            attributes unitType, valueAsSpecified and valueAsString 
            might be modified as a result of this method.
            </summary>
            <param name="unitType">The unitType to switch to (e.g., SvgAngleTypeDEG).</param>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedBoolean">
            <summary>
            Used for attributes of type boolean which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedBoolean.BaseVal">
            <summary>
            The base value of the given attribute before applying
            any animations.  Inheriting class should throw an exception 
            if it is readonly.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedBoolean.AnimVal">
            <summary>
            If the given attribute or property is being animated, 
            contains the current animated value of the attribute or 
            property. If the given attribute or property is not 
            currently being animated, contains the same value as 
            'baseVal'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedEnumeration">
            <summary>
            Used for attributes whose value must be a constant from 
            a particular enumeration and which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedEnumeration.BaseVal">
            <summary>
            The base value of the given attribute before 
            applying any animations.  Inheriting Class should throw
            an exception when the value is read only
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedEnumeration.AnimVal">
            <summary>
            If the given attribute or property is being animated, 
            contains the current animated value of the attribute or 
            property. If the given attribute or property is not 
            currently being animated, contains the same value as 
            'BaseVal'. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedInteger">
            <summary>
            Used for attributes of basic type <c>integer</c> which can be animated. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedInteger.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedInteger.AnimVal">
            <summary>
            If the given attribute or property is being animated, contains the current animated value of the 
            attribute or property. If the given attribute or property is not currently being animated, contains 
            the same value as <see cref="P:SharpVectors.Dom.Svg.ISvgAnimatedInteger.BaseVal"/>. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedLength">
            <summary>
            Used for attributes of basic type 'length' which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLength.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLength.AnimVal">
            <summary>
            If the given attribute or property is being animated, contains the current animated 
            value of the attribute or property, and both the object itself and its contents are 
            readonly. If the given attribute or property is not currently being animated, contains 
            the same value as 'baseVal'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedLengthList">
            <summary>
            Used for attributes of type SvgLengthList which can be 
            animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLengthList.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLengthList.AnimVal">
            <summary>
            If the given attribute or property is being animated, contains the current animated value of the 
            attribute or property, and both the object itself and its contents are readonly. If the given 
            attribute or property is not currently being animated, contains the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLengthList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedLengthList"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedLengthList"/>.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedLengthList.Item(System.UInt32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedNumber">
            <summary>
            Used for attributes of basic type 'number' which can be 
            animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumber.BaseVal">
            <summary>
            The base value of the given attribute before applying 
            any animations.  Inheriting class should throw an
            exception if the value is read only.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumber.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                contains the current animated value of the attribute
                or property, and both the object itself and its 
                contents are readonly. If the given attribute or 
                property is not currently being animated, contains 
                the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedNumberList">
            <summary>
            Used for attributes which take a list of numbers and 
            which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumberList.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumberList.AnimVal">
            <summary>
            If the given attribute or property is being animated, then this attribute contains the current animated
            value of the attribute or property, and both the object itself and its contents are readonly. If the given 
            attribute or property is not currently being animated, then this attribute contains the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumberList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedNumberList"/>.
            </summary>
            <value>The number of elements contained in the <see cref="T:SharpVectors.Dom.Svg.ISvgAnimatedNumberList"/>.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedNumberList.Item(System.UInt32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedRect">
            <summary>
            Used for attributes of type SvgRect which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedRect.BaseVal">
            <summary>
            The base value of the given attribute before applying 
            any animations.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedRect.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                contains the current animated value of the attribute
                or property, and both the object itself and its 
                contents are readonly. If the given attribute or 
                property is not currently being animated, contains 
                the same value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedString">
            <summary>
            Used for attributes of type DOMString which can be animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedString.BaseVal">
            <summary>
            The base value of the given attribute before applying 
            any animations.  Inheriting class should throw an
            exception if this value is read only.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedString.AnimVal">
            <summary>
                If the given attribute or property is being animated,
                contains the current animated value of the attribute
                or property. If the given attribute or property is 
                not currently being animated, contains the same 
                value as 'BaseVal'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgColor">
            <summary>
            The SvgColor interface corresponds to color value definition
            for properties 'stop-color', 'flood-color' and 
            'lighting-color' and is a base class for interface SvgPaint.
            It incorporates Svg's extended notion of color, which 
            incorporates ICC-based color specifications. 
            
            Interface SVGColor does not correspond to the color basic 
            data type. For the color basic data type, the applicable 
            DOM interfaces are defined in CSS; in particular, see 
            the ICssRgbColor interface. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgCursorElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgElement">
            <summary>
            All of the Svg DOM interfaces that correspond directly to 
            elements in the Svg language (e.g., the SvgPathElement 
            interface corresponds directly to the 'path' element in the 
            language) are derivative from base class SvgElement. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgElement.Id">
            <summary>
            The value of the id attribute on the given element.
            Inheriting class should throw an exception when trying
            to update a read only element
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgElement.OwnerSvgElement">
            <summary>
            The nearest ancestor 'svg' element. Null if the given 
            element is the outermost 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgElement.ViewportElement">
            <summary>
                The element which established the current viewport. 
                Often, the nearest ancestor 'svg' element. Null if 
                the given element is the outermost 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgElement.IsRenderable">
            <summary>
            Gets a value indicating whether this SVG element is renderable.
            </summary>
            <value>
            This is <see langword="'true"/> if the element is renderable; otherwise,
            it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgElement.RenderingHint">
            <summary>
            Gets a value providing a hint on the rendering defined by this element.
            </summary>
            <value>
            An enumeration of the <see cref="T:SharpVectors.Dom.Svg.SvgRenderingHint"/> specifying the rendering hint.
            </value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgEvent">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgExternalResourcesRequired">
            <summary>
            This defines an interface which applies to all elements where this element or one of its 
            descendants can reference an external resource. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgExternalResourcesRequired.ExternalResourcesRequired">
            <summary>
            Corresponds to attribute externalResourcesRequired on the 
            given element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFitToViewBox">
            <summary>
            Interface SvgFitToViewBox defines DOM attributes that apply to 
            elements which have XML attributes viewBox and preserveAspectRatio.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgIccColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgIccColor.Colors">
            <summary>
            The list of color values that define this ICC color. 
            Each color value is an arbitrary floating point number. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgIccColor.ColorProfile">
            <summary>
            The name of the color profile, which is the first 
            parameter of an ICC color specification.  Inheriting
            class should throw exception on setting a read only value 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLangSpace">
            <summary>
            Interface SvgLangSpace defines an interface which applies to all elements which have attributes xml:lang and xml:space. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLength">
            <summary>
            The SvgLength interface corresponds to the length basic data type. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLengthList">
            <summary>
            This interface defines a list of SvgLength objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgList">
            <summary>
            This interface defines a all methods used in a Svg*List interface. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLocatable">
            <summary>
            Interface SvgLocatable is for all elements which either have a 
            transform attribute or don't have a transform attribute but whose
            content can have a bounding box in current user space. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgNumber">
            <summary>
            Used for attributes of basic type 'number'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgNumberList">
            <summary>
            This interface defines a list of SvgNumber objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgRect">
            <summary>
            Rectangles are defined as consisting of a (x,y) coordinate pair identifying 
            a minimum X value, a minimum Y value, and a width and height, which are usually 
            constrained to be non-negative. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgStringList">
            <summary>
            This interface defines a list of string objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgStylable">
            <summary>
            
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTests">
            <summary>
            Interface SvgTests defines an interface which applies to all elements which 
            have attributes requiredFeatures, requiredExtensions and systemLanguage. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTransformable">
            <summary>
            Interface SvgTransformable contains properties and methods that apply to all elements 
            which have attribute transform. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgUriReference">
            <summary>
            Interface SvgUriReference defines an interface which applies to all elements which 
            have the collection of XLink attributes, such as xlink:href, which define a URI reference. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgViewElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgViewSpec">
            <summary>
            The interface corresponds to an Svg View Specification. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgZoomAndPan">
            <summary>
            The SvgZoomAndPan interface defines attribute "zoomAndPan" and associated constants.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgAngleType">
            <summary>
            	The basic Angle Value Types
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgAngleType.Unknown">
            <summary>
               The unit type is not one of predefined unit types. It is invalid to attempt to 
               define a new value of this type or to attempt to switch an existing value to this type.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgAngleType.Unspecified">
            <summary>
            No unit type was provided (i.e., a unitless value was specified). For angles, a 
            unitless value is treated the same as if degrees were specified.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgAngleType.Deg">
            <summary>
              The unit type was explicitly set to degrees.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgAngleType.Rad">
            <summary>
            The unit type is radians.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgAngleType.Grad">
            <summary>
            The unit type is grads.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgColorType">
            <summary>
            Basic color type enumeration.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterBlendMode">
            <summary>
            The basic Filter Blend Modes
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Unknown">
            <summary>
            The type is not one of predefined types. It is invalid to attempt to define a new 
            value of this type or to attempt to switch an existing value to this type.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Normal">
            <summary>
            Corresponds to value normal.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Multiply">
            <summary>
            Corresponds to value multiply.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Screen">
            <summary>
            Corresponds to value screen.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Darken">
            <summary>
            Corresponds to value darken.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Lighten">
            <summary>
            Corresponds to value lighten.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Overlay">
            <summary>
            Corresponds to value overlay.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.ColorDodge">
            <summary>
            Corresponds to value color-dodge.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.ColorBurn">
            <summary>
            Corresponds to value color-burn.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.HardLight">
            <summary>
            Corresponds to value hard-light.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.SoftLight">
            <summary>
            Corresponds to value soft-light.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Difference">
            <summary>
            Corresponds to value difference.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Exclusion">
            <summary>
            Corresponds to value exclusion.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Hue">
            <summary>
            Corresponds to value hue.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Saturation">
            <summary>
            Corresponds to value saturation.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Color">
            <summary>
            Corresponds to value color.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterBlendMode.Luminosity">
            <summary>
            Corresponds to value luminosity.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterChannelSelector">
            <summary>
            The Filter Channel Selectors
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterColorMatrix">
            <summary>
            The basic Filter Matrix Types
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterTransferType">
            <summary>
            The Filter Component Transfer Types
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterTransferType.Unknown">
            <summary>
            The type is not one of predefined types. It is invalid to attempt to define a new value 
            of this type or to attempt to switch an existing value to this type. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterTransferType.Identity">
            <summary>
            Corresponds to value 'identity'. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterTransferType.Table">
            <summary>
            Corresponds to value 'table'. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterTransferType.Discrete">
            <summary>
            Corresponds to value 'discrete'. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterTransferType.Linear">
            <summary>
            Corresponds to value 'linear'. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterTransferType.Gamma">
            <summary>
            Corresponds to value 'gamma'. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterCompositeOperator">
            <summary>
            The Filter Composite Operators
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterEdgeMode">
            <summary>
            The Filter Edge Mode Types
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterMorphologyOperator">
            <summary>
            The Morphology Operator
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterMorphologyOperator.Unknown">
            <summary>
            The type is not one of predefined types. It is invalid to attempt to define a new value of 
            this type or to attempt to switch an existing value to this type. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterMorphologyOperator.Erode">
            <summary>
            Corresponds to value 'erode'. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterMorphologyOperator.Dilate">
            <summary>
            Corresponds to value 'dilate'. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterStitchOption">
            <summary>
            The Filter Stitch Options
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterStitchOption.Unknown">
            <summary>
            The type is not one of predefined types. It is invalid to attempt to define a new value of this type 
            or to attempt to switch an existing value to this type. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterStitchOption.Stitch">
            <summary>
            Corresponds to value 'stitch'.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterStitchOption.NoStitch">
            <summary>
            Corresponds to value 'noStitch'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgFilterTurbulenceType">
            <summary>
            The Filter Turbulence Types
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterTurbulenceType.Unknown">
            <summary>
            The type is not one of predefined types. It is invalid to attempt to define a new value of this 
            type or to attempt to switch an existing value to this type. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterTurbulenceType.FractalNoise">
            <summary>
            Corresponds to value 'fractalNoise'. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgFilterTurbulenceType.Turbulence">
            <summary>
            Corresponds to value 'turbulence'. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTextPathMethod">
            <summary>
            Indicates the method by which text should be rendered along the path.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTextPathMethod.Align">
            <summary>
            A value of align indicates that the glyphs should be rendered using 
            simple 2x3 transformations such that there is no stretching/warping 
            of the glyphs. Typically, supplemental rotation, scaling and translation 
            transformations are done for each glyph to be rendered. As a result, 
            with align, fonts where the glyphs are designed to be connected (e.g., 
            cursive fonts), the connections may not align properly when text is 
            rendered along a path.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTextPathMethod.Stretch">
            <summary>
            A value of stretch indicates that the glyph outlines will be converted 
            into paths, and then all end points and control points will be adjusted 
            to be along the perpendicular vectors from the path, thereby stretching 
            and possibly warping the glyphs. With this approach, connected glyphs, 
            such as in cursive scripts, will maintain their connections.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTextPathSpacing">
            <summary>
            Indicates how the user agent should determine the spacing between glyphs 
            that are to be rendered along a path.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTextPathSpacing.Exact">
            <summary>
            A value of exact indicates that the glyphs should be rendered exactly 
            according to the spacing rules as specified in "Text on a path layout rules".
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTextPathSpacing.Auto">
            <summary>
            A value of auto indicates that the user agent should use text-on-a-path 
            layout algorithms to adjust the spacing between glyphs in order to achieve 
            visually appealing results.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgUnitType">
            <summary>
            This defines a commonly used set of constants and is a base interface used by
            <see cref="T:SharpVectors.Dom.Svg.ISvgGradientElement"/>, <see cref="T:SharpVectors.Dom.Svg.ISvgPatternElement"/>, <see cref="T:SharpVectors.Dom.Svg.ISvgClipPathElement"/>,
            <see cref="T:SharpVectors.Dom.Svg.ISvgMaskElement"/> and <see cref="T:SharpVectors.Dom.Svg.ISvgFilterElement"/>.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgUnitType.Unknown">
            <summary>
            The type is not one of predefined types. It is invalid to attempt to define a 
            new value of this type or to attempt to switch an existing value to this type. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgUnitType.UserSpaceOnUse">
            <summary>
            Corresponds to value <c>'userSpaceOnUse'</c>. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgUnitType.ObjectBoundingBox">
            <summary>
            Corresponds to value <c>'objectBoundingBox'</c>.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgZoomAndPanType">
            <summary>
            Summary description for SvgZoomAndPanType.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISharpMarkerHost">
            <summary>
            This is an extension to the Svg DOM. It denotes that an element can display markers.
            </summary>
            <remarks>
            <para>
            A marker is a symbol which is attached to one or more vertices of some Svg elements. In order for 
            a marker to be drawn correctly, its orientation and position needs to be known.
            See <see href="http://www.w3.org/TR/SVG/painting.html">SVG 1.0 Masking - Establishing A New Clipping Path</see>
            </para>
            <para>
            This interface provides the information required to calculate the
            orientation and position for each marker of an Svg element.
            </para>
            <para>
            To give an Svg element the capability to draw markers, let the Svg element implement this interface.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISharpMarkerHost.MarkerPositions">
            <summary>
            An array specifying the position of each vertex in the Svg element's shape.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISharpMarkerHost.GetStartAngle(System.Int32)">
            <summary>
            Get the angle of the path segment entering the specified vertex.
            </summary>
            <param name="index">
            Specifies the vertex to which the path segment is entering.
            </param>
            <returns>
            The angle of the path segment entering the specified vertex in degrees.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISharpMarkerHost.GetEndAngle(System.Int32)">
            <summary>
            Get the angle of the path segment leaving the specified vertex in degrees.
            </summary>
            <param name="index">
            Specifies the vertex from which the path segment is leaving.
            </param>
            <returns>
            The angle of the path segment leaving the specified vertex.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgClipPathElement">
            <summary>
            Used by SvgClipPathElement.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgMaskElement">
            <summary>
            Used by SvgMaskElement.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedPreserveAspectRatio">
            <summary>
            Used for attributes of type SvgPreserveAspectRatio which can be 
            animated.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedPreserveAspectRatio.BaseVal">
            <summary>
            The base value of the given attribute before applying any animations.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAnimatedPreserveAspectRatio.AnimVal">
            <summary>
                If the given attribute or property is being animated, contains the current animated value of the attribute or property, and both the object itself and its contents are readonly. If the given attribute or property is not currently being animated, contains the same
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedTransformList">
            <summary>
            Used for the various attributes which specify a set of transformations, such as the 
            transform attribute which is available for many of Svg's elements, and which can be animated.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgMatrix">
            <summary>
            Interface for matrix operations used within the SVG DOM
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPoint">
            <summary>
            Many of the SVG DOM interfaces refer to objects of class SvgPoint.
            An SvgPoint is an (x,y) coordinate pair. 
            </summary>
            <remarks>
            When used in matrix operations, an SvgPoint is treated as a vector of the form:
            	[x]
            	[y]
            	[1]
            </remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPointList">
            <summary>
            This interface defines a list of SvgPoint objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPreserveAspectRatio">
            <summary>
            The SvgPreserveAspectRatio interface corresponds to the preserveAspectRatio attribute, 
            which is available for some of Svg's elements. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgPreserveAspectRatio.IsDefaultAlign">
            <summary>
            Gets a value indicating if this a default aspect ratio or it is defined by the target element.
            </summary>
            <value>
            This is <see langword="true"/> if it is the default aspect ratio; otherwise it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgPreserveAspectRatio.Align">
            <summary>
            The type of the alignment value as specified by one of the constants specified above.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgPreserveAspectRatio.MeetOrSlice">
            <summary>
            The type of the meet-or-slice value as specified by one of the constants specified above.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTransform">
            <summary>
            SvgTransform is the interface for one of the component transformations within a SvgTransformList; 
            thus, a SvgTransform object corresponds to a single component (e.g., "scale(..)" or "matrix(...)") 
            within a transform attribute specification. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTransformList">
            <summary>
            This interface defines a list of SvgTransform objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgCssRule">
            <summary>
            SVG extends interface <see cref="T:SharpVectors.Dom.Css.ICssRule"/> with interface <see cref="T:SharpVectors.Dom.Svg.ISvgCssRule"/> by adding an 
            <see cref="T:SharpVectors.Dom.Svg.ISvgColorProfileRule"/> rule to allow for specification of ICC-based color.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgDefsElement">
            <summary>
            The SvgDefsElement interface corresponds to the 'defs' element.  
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgDescElement">
            <summary>
            The SvgDescElement interface corresponds to the 'desc' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgDocument">
            <summary>
            The root object in the document object hierarchy of an Svg document.
            </summary>
            <remarks>
            <para>
            When an 'svg'  element is embedded inline as a component of a document from another namespace, 
            such as when an 'svg' element is embedded inline within an XHTML document
            [<see href="http://www.w3.org/TR/SVG/refs.html#ref-XHTML">XHTML</see>],
            then an <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> object will not exist; instead, the root object in the
            document object hierarchy will be a Document object of a different type, such as an HTMLDocument object.
            </para>
            <para>
            However, an <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> object will indeed exist when the root
            element of the XML document hierarchy is an 'svg' element, such as when viewing a stand-alone SVG file 
            (i.e., a file with MIME type "image/svg+xml"). In this case, the <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> 
            object will be the root object of the document object model hierarchy.
            </para>
            <para>
            In the case where an SVG document is embedded by reference, such as when an XHTML document has an 'object' 
            element whose href attribute references an SVG document (i.e., a document whose MIME type is "image/svg+xml" 
            and whose root element is thus an 'svg' element), there will exist two distinct DOM hierarchies. The first DOM hierarchy
            will be for the referencing document (e.g., an XHTML document). The second DOM hierarchy will be for the referenced 
            SVG document. In this/ second DOM hierarchy, the root object of the document object model
            hierarchy is an <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> object.
            </para>
            <para>
            The <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">ISvgDocument</see> interface contains a  similar list of attributes and
            methods to the HTMLDocument interface described in the
            <see href="http://www.w3.org/TR/REC-DOM-Level-1/level-one-html.html">Document Object Model (HTML) Level 1</see> 
            chapter of the [<see href="http://www.w3.org/TR/SVG/refs.html#ref-DOM1">DOM1</see>] specification.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.Title">
            <summary>
            The title of a document as specified by the title sub-element of the 'svg' root element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.Referrer">
            <summary>
            Returns the URI of the page that linked to this page. 
            </summary>
            <value>
            The value is an empty string if the user navigated to the page directly
            (not through a link, but, for example, via a bookmark).
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.Domain">
            <summary>
            The domain name of the server that served the document, or a
            <see langword="null"/> string if the server cannot be identified by a domain name.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.Url">
            <summary>
            The complete URI of the document.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.RootElement">
            <summary>
            The root 'svg' element in the document hierarchy.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.Window">
            <summary>
            The window object of the Svg document.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgDocument.Static">
            <summary>
            Gets a value specifying whether this document is in static mode. In static mode (non-interactive),
            events are not processed.
            </summary>
            <value>This returns <see langword="true"/> if the document is in static mode; otherwise, it is <see langword="false"/>.</value>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgElementInstance">
            <summary>
            For each 'use' element, the Svg DOM maintains a shadow tree (the "instance tree") of 
            objects of type SvgElementInstance
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgElementInstanceList">
            <summary>
            The SvgElementInstanceList interface provides the abstraction of an ordered collection of 
            SvgElementInstance objects, without defining or constraining how this collection is implemented.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgForeignObjectElement">
            <summary>
            The <see cref="T:SharpVectors.Dom.Svg.ISvgForeignObjectElement"/> interface provides access to the properties of <c>'foreignObject'</c> 
            elements, as well as methods to manipulate them.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgGElement">
            <summary>
            The SvgGElement interface corresponds to the 'g' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgImageElement">
            <summary>
            The SvgRectElement interface corresponds to the 'image' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgImageElement.X">
            <summary>
            Corresponds to attribute x on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgImageElement.Y">
            <summary>
            Corresponds to attribute y on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgImageElement.Width">
            <summary>
            Corresponds to attribute width on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgImageElement.Height">
            <summary>
            Corresponds to attribute height on the given 'rect' element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgSvgElement">
            <summary>
            A key interface definition is the
            <see cref="T:SharpVectors.Dom.Svg.ISvgSvgElement">ISvgSvgElement</see> interface, which is
            the interface that corresponds to the 'svg' element.
            </summary>
            <remarks>
            This interface
            contains various miscellaneous commonly-used utility methods, such
            as matrix operations and the ability to control the time of redraw
            on visual rendering devices.
            <see cref="T:SharpVectors.Dom.Svg.ISvgSvgElement">ISvgSvgElement</see> extends ViewCSS and
            DocumentCSS to provide access to
            the computed values of properties and the override style sheet as
            described in DOM2.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.X">
            <summary>
            Corresponds to attribute x on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.Y">
            <summary>
            Corresponds to attribute y on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.Width">
            <summary>
            Corresponds to attribute width on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.Height">
            <summary>
            Corresponds to attribute height on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.ContentScriptType">
            <summary>
            Corresponds to attribute contentScriptType on the given 'svg'
            element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.ContentStyleType">
            <summary>
            Corresponds to attribute contentStyleType on the given 'svg' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.Viewport">
            <summary>
            The position and size of the viewport (implicit or explicit) that
            corresponds to this 'svg' element.
            </summary>
            <remarks>
            <para>
            When the user agent is
            actually rendering the content, then the position and size values
            represent the actual values when rendering. The position and size
            values are unitless values in the coordinate system of the parent
            element. If no parent element exists (i.e., 'svg' element
            represents the root of the document tree), if this SVG document
            is embedded as part of another document (e.g., via the HTML
            'object' element), then the position and size are unitless values
            in the coordinate system of the parent document. (If the parent
            uses CSS or XSL layout, then unitless values represent pixel units
            for the current CSS or XSL viewport, as described in the CSS2
            specification.) If the parent element does not have a coordinate
            system, then the user agent should provide reasonable default
            values for this attribute.
            </para>
            <para>
            The object itself and its contents are both readonly.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.PixelUnitToMillimeterX">
            <summary>
            Size of a pixel unit (as defined by CSS2) along the x-axis of the
            viewport, which represents a unit somewhere in the range of 70dpi
            to 120dpi, and, on systems that support this, might actually match
            the characteristics of the target medium.
            </summary>
            <remarks>
            On systems where it is impossible to know the size of a pixel, a
            suitable default pixel size is provided.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.PixelUnitToMillimeterY">
            <summary>
            Corresponding size of a pixel unit along the y-axis of the viewport.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.ScreenPixelToMillimeterX">
            <summary>
            User interface (UI) events in DOM Level 2 indicate the screen
            positions at which the given UI event occurred. When the user
            agent actually knows the physical size of a "screen unit", this
            attribute will express that information; otherwise, user agents
            will provide a suitable default value such as .28mm.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.ScreenPixelToMillimeterY">
            <summary>
            Corresponding size of a screen pixel along the y-axis of the
            viewport.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.UseCurrentView">
            <summary>
            The initial view (i.e., before magnification and panning) of the
            current innermost SVG document fragment can be either the
            "standard" view (i.e., based on attributes on the 'svg' element
            such as fitBoxToViewport) or to a "custom" view (i.e., a
            hyperlink into a particular 'view' or other element - see
            <see href="http://www.w3.org/TR/SVG/linking.html#LinksIntoSVG"
            >Linking into SVG content: URI fragments and SVG views</see>). If
            the initial view is the "standard" view, then this attribute is
            false. If the initial view is a "custom" view, then this
            attribute is true.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.CurrentView">
            <summary>
            The definition of the initial view (i.e., before magnification
            and panning) of the current innermost SVG document fragment.
            </summary>
            <remarks>
            The meaning depends on the situation:
            <list type="bullet">
             <item><description>
             If the initial view was a "standard" view, then:
              <list type="bullet">
               <item><description>
               the values for viewBox, preserveAspectRatio and zoomAndPan
               within currentView will match the values for the corresponding
               DOM attributes that are on SVGSVGElement directly
               </description></item>
               <item><description>
               the values for transform and viewTarget within currentView will
               be null
               </description></item>
              </list>
             </description></item>
             <item><description>
             If the initial view was a link into a 'view' element, then:
               <list type="bullet">
                <item><description>
                the values for viewBox, preserveAspectRatio and zoomAndPan within
                currentView will correspond to the corresponding attributes for
                the given 'view' element
                </description></item>
                <item><description>
                the values for transform and viewTarget within currentView will
                be null
                </description></item>
               </list>
             </description></item>
             <item><description>
             If the initial view was a link into another element (i.e., other
             than a 'view'), then:
              <list type="bullet">
               <item><description>
               the values for viewBox, preserveAspectRatio and zoomAndPan
               within currentView will match the values for the corresponding
               DOM attributes that are on SVGSVGElement directly for the
               closest ancestor 'svg' element
               </description></item>
               <item><description>
               the values for transform within currentView will be null
               </description></item>
               <item><description>
               the viewTarget within currentView will represent the target of
               the link
               </description></item>
              </list>
             </description></item>
             <item><description>
             If the initial view was a link into the SVG document fragment
             using an SVG view specification fragment identifier (i.e.,
             #svgView(...)), then:
              <list type="bullet">
                <item><description>
                the values for viewBox, preserveAspectRatio, zoomAndPan,
                transform and viewTarget within currentView will correspond
                to the values from the SVG view specification fragment
                identifier
                </description></item>
              </list>
             </description></item>
            </list>
            The object itself and its contents are both readonly.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.CurrentScale">
            <summary>
            This attribute indicates the current scale factor relative to
            the initial view to take into account user magnification and
            panning operations, as described under <see
            href="http://www.w3.org/TR/SVG/interact.html#ZoomAndPanAttribute"
            >Magnification and panning</see>.
            </summary>
            <remarks>
            DOM attributes currentScale and currentTranslate are
            equivalent to the 2x3 matrix [a b c d e f] = [currentScale 0
            0 currentScale currentTranslate.x currentTranslate.y]. If
            "magnification" is enabled (i.e., zoomAndPan="magnify"), then
            the effect is as if an extra transformation were placed at the
            outermost level on the SVG document fragment (i.e., outside the
            outermost 'svg' element).
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.CurrentTranslate">
            <summary>
            The corresponding translation factor that takes into account
            user "magnification".
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.SuspendRedraw(System.Int32)">
            <summary>
            Takes a time-out value which indicates that redraw shall not
            occur until certain conditions are met.
            </summary>
            <remarks>
            Takes a time-out value which indicates that redraw shall not
            occur until: (a) the corresponding unsuspendRedraw(
            suspend_handle_id) call has been made, (b) an
            unsuspendRedrawAll() call has been made, or (c) its timer
            has timed out. In environments that do not support
            interactivity (e.g., print media), then redraw shall not be
            suspended. suspend_handle_id = suspendRedraw(
            max_wait_milliseconds) and unsuspendRedraw(suspend_handle_id)
            must be packaged as balanced pairs. When you want to suspend
            redraw actions as a collection of SVG DOM changes occur,
            then precede the changes to the SVG DOM with a method call
            similar to suspend_handle_id = suspendRedraw(
            max_wait_milliseconds) and follow the changes with a method
            call similar to unsuspendRedraw(suspend_handle_id). Note
            that multiple suspendRedraw calls can be used at once and
            that each such method call is treated independently of the
            other suspendRedraw method calls.
            </remarks>
            <param name="max_wait_milliseconds">
            The amount of time in milliseconds to hold off before redrawing
            the device. Values greater than 60 seconds will be truncated down
            to 60 seconds.
            </param>
            <returns>
            A number which acts as a unique identifier for the given
            suspendRedraw() call. This value must be passed as the parameter
            to the corresponding unsuspendRedraw() method call.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.UnsuspendRedraw(System.Int32)">
            <summary>
            Cancels a specified suspendRedraw() by providing a unique
            suspend_handle_id.
            </summary>
            <param name="suspend_handle_id">
            A number which acts as a unique identifier for the desired
            suspendRedraw() call. The number supplied must be a value
            returned from a previous call to suspendRedraw()
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.UnsuspendRedrawAll">
            <summary>
            Cancels all currently active suspendRedraw() method calls.
            been cancelled.
            </summary>
            <remarks>
            This method is most useful at the very end of a set of SVG
            DOM calls to ensure that all pending suspendRedraw() method
            calls have been cancelled.
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.ForceRedraw">
            <summary>
            In rendering environments supporting interactivity, forces the
            user agent to immediately redraw all regions of the viewport
            that require updating.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.PauseAnimations">
            <summary>
            Suspends (i.e., pauses) all currently running animations that are
            defined within the SVG document fragment corresponding to this
            'svg' element, causing the animation clock corresponding to this
            document fragment to stand still until it is unpaused.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.UnpauseAnimations">
            <summary>
            Unsuspends (i.e., unpauses) currently running animations that are
            defined within the SVG document fragment, causing the animation
            clock to continue from the time at which it was suspended.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.AnimationsPaused">
            <summary>
            Returns true if this SVG document fragment is in a paused state.
            </summary>
            <returns>
            Boolean indicating whether this SVG document fragment is in a
            paused state.
            </returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgSvgElement.CurrentTime">
            <summary>
            The current time in seconds relative to the start time
            for the current SVG document fragment.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.GetIntersectionList(SharpVectors.Dom.Svg.ISvgRect,SharpVectors.Dom.Svg.ISvgElement)">
            <summary>
            Returns the list of graphics elements whose rendered content
            intersects the supplied rectangle, honoring the 'pointer-events'
            property value on each candidate graphics element.
            </summary>
            <param name="rect">
            The test rectangle. The values are in the initial coordinate
            system for the current 'svg' element.
            </param>
            <param name="referenceElement">
            If not null, then only return elements whose drawing order has
            them below the given reference element.
            </param>
            <returns>
            A list of Elements whose content intersects the supplied
            rectangle.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.GetEnclosureList(SharpVectors.Dom.Svg.ISvgRect,SharpVectors.Dom.Svg.ISvgElement)">
            <summary>
            Returns the list of graphics elements whose rendered content is
            entirely contained within the supplied rectangle, honoring the
            'pointer-events' property value on each candidate graphics
            element.
            </summary>
            <param name="rect">
            The test rectangle. The values are in the initial coordinate
            system for the current 'svg' element.
            </param>
            <param name="referenceElement">
            If not null, then only return elements whose drawing order has
            them below the given reference element.
            </param>
            <returns>
            A list of Elements whose content is enclosed by the supplied
            rectangle.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CheckIntersection(SharpVectors.Dom.Svg.ISvgElement,SharpVectors.Dom.Svg.ISvgRect)">
            <summary>
            Returns true if the rendered content of the given element
            intersects the supplied rectangle, honoring the 'pointer-events'
            property value on each candidate graphics element.
            </summary>
            <param name="element">
            The element on which to perform the given test.
            </param>
            <param name="rect">
            The test rectangle. The values are in the initial coordinate
            system for the current 'svg' element.
            </param>
            <returns>
            True or false, depending on whether the given element intersects
            the supplied rectangle.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CheckEnclosure(SharpVectors.Dom.Svg.ISvgElement,SharpVectors.Dom.Svg.ISvgRect)">
            <summary>
            Returns true if the rendered content of the given element is
            entirely contained within the supplied rectangle, honoring the
            'pointer-events' property value on each candidate graphics
            element.
            </summary>
            <param name="element">
            The element on which to perform the given test.
            </param>
            <param name="rect">
            The test rectangle. The values are in the initial coordinate
            system for the current 'svg' element.
            </param>
            <returns>
            True or false, depending on whether the given element is
            enclosed by the supplied rectangle.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.DeselectAll">
            <summary>
            Unselects any selected objects, including any selections of text
            strings and type-in bars.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgNumber">
            <summary>
            Creates an SVGNumber object outside of any document trees. The
            object is initialized to a value of zero.
            </summary>
            <returns>
            An SVGNumber object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgLength">
            <summary>
            Creates an SVGLength object outside of any document trees. The
            object is initialized to the value of 0 user units.
            </summary>
            <returns>
            An SVGLength object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgAngle">
            <summary>
            Creates an SVGAngle object outside of any document trees. The
            object is initialized to the value 0 degrees (unitless).
            </summary>
            <returns>
            An SVGAngle object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgPoint">
            <summary>
            Creates an SVGPoint object outside of any document trees. The
            object is initialized to the point (0,0) in the user coordinate
            system.
            </summary>
            <returns>
            An SVGPoint object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgMatrix">
            <summary>
            Creates an SVGMatrix object outside of any document trees. The
            object is initialized to the identity matrix.
            </summary>
            <returns>
            An SVGMatrix object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgRect">
            <summary>
            Creates an SVGRect object outside of any document trees. The
            object is initialized such that all values are set to 0 user
            units.
            </summary>
            <returns>
            An SVGRect object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgTransform">
            <summary>
            Creates an SVGTransform object outside of any document trees. The
            object is initialized to an identity matrix transform
            (SVG_TRANSFORM_MATRIX).
            </summary>
            <returns>
            An SVGTransform object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.CreateSvgTransformFromMatrix(SharpVectors.Dom.Svg.ISvgMatrix)">
            <summary>
            Creates an SVGTransform object outside of any document trees.
            The object is initialized to the given matrix transform (i.e.,
            SVG_TRANSFORM_MATRIX).
            </summary>
            <param name="matrix">
            The transform matrix.
            </param>
            <returns>
            An SVGTransform object.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgSvgElement.GetElementById(System.String)">
            <summary>
            Searches this SVG document fragment (i.e., the search is
            restricted to a subset of the document tree) for an Element whose
            id is given by elementId.
            </summary>
            <remarks>
            If an Element is found, that Element is
            returned. If no such element exists, returns null. Behavior is
            not defined if more than one element has this id.
            </remarks>
            <param name="elementId">
            The unique id value for an element.
            </param>
            <returns>
            The matching element.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgSwitchElement">
            <summary>
            The SvgSwitchElement interface corresponds to the 'switch' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTitleElement">
            <summary>
            The SvgTitleElement interface corresponds to the 'title' element.  
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgUseElement">
            <summary>
            The SvgUseElement interface corresponds to the 'use' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgGradientElement">
            <summary>
            The SvgGradientElement interface is a base interface used by SvgLinearGradientElement 
            and SvgRadialGradientElement. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLinearGradientElement">
            <summary>
            The SvgLinearGradientElement interface corresponds to the 'linearGradient' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgRadialGradientElement">
            <summary>
            The ISvgRadialGradientElement interface corresponds to the 'radialGradient' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgSolidColorElement">
            <summary>
            An SVG object represents an 'solidcolor' element in the DOM.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgStopElement">
            <summary>
            The SvgStopElement interface corresponds to the 'stop' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgComponentTransferFunctionElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEBlendElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEColorMatrixElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEComponentTransferElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFECompositeElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEConvolveMatrixElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEDiffuseLightingElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEDisplacementMapElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEDistantLightElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEFloodElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEFuncAElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEFuncBElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEFuncGElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEFuncRElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEGaussianBlurElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEImageElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEMergeElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEMergeNodeElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEMorphologyElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEOffsetElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFEPointLightElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFESpecularLightingElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFESpotLightElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFETileElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFETurbulenceElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFilterElement">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFilterPrimitiveStandardAttributes">
            <summary>
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgControl">
            <summary>
            This defines the interface for the control object that is controlling the rendering process and 
            displaying the rendered drawings.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgControl.Width">
            <summary>
            Gets the width of the <c>SVG</c> viewer control.
            </summary>
            <value>A specifying specifying the width of the control in pixels.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgControl.Height">
            <summary>
            Gets the height of the <c>SVG</c> viewer control.
            </summary>
            <value>A specifying specifying the height of the control in pixels.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgControl.DesignMode">
            <summary>
            Gets a value specifying whether the viewer control is in design-mode.
            </summary>
            <value>
            This is <see langword="true"/> if the viewer control is in design-mode, otherwise; it is <see langword="false"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgControl.HandleAlert(System.String)">
            <summary>
            This signals the viewer control to display an alert message to the user.
            </summary>
            <param name="message">A <see cref="T:System.String"/> containing the alert message to be displayed.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgControl.HandleError(System.String)">
            <summary>
            This signals the viewer control to display an error message to the user.
            </summary>
            <param name="message">A <see cref="T:System.String"/> containing the error message to be displayed.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgControl.HandleError(System.Exception)">
            <summary>
            This signals the viewer control to display an error message due to an exception to the user.
            </summary>
            <param name="Exception">An <see cref="T:System.Exception"/> specifying the error to be displayed.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgControl.HandleError(System.String,System.Exception)">
            <summary>
            This signals the viewer control to display an error message due to an exception with additional message to the user.
            </summary>
            <param name="message">A <see cref="T:System.String"/> containing the additional message to be displayed.</param>
            <param name="Exception">An <see cref="T:System.Exception"/> specifying the error to be displayed.</param>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgElementVisitor">
            <summary>
            A visitor pattern interface that visits all renderable SVG elements.
            </summary>
            <remarks>
            The implementation is defined are follows:
            <list type="bullet">
            <item>
            <term>Implements visitor (<see cref="T:SharpVectors.Dom.Svg.ISvgElementVisitor"/>) object that implements an operation to be 
            performed on elements of SVG DOM structure.</term>
            </item>
            <item>
            <term>Implement the client that traverses the SVG DOM structure and call a dispatching operation 
            <see cref="M:SharpVectors.Dom.Svg.ISvgElementVisitorTarget.Accept(SharpVectors.Dom.Svg.ISvgElementVisitor)"/> on the SVG element — that dispatches (delegates) 
            the request to the accepted visitor object. 
            </term>
            </item>
            <item>
            <term>The visitor object then performs the operation on the element.</term>
            </item>
            </list>
            </remarks>
            <seealso href="https://en.wikipedia.org/wiki/Visitor_pattern">Wikipedia: Visitor pattern</seealso>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgCircleElement)">
            <summary>Visits the circle shape element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgCircleElement"/> specifying the circle shape.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgEllipseElement)">
            <summary>Visits the ellipse shape element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgEllipseElement"/> specifying the ellipse shape.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgLineElement)">
            <summary>Visits the line shape element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgLineElement"/> specifying the line shape.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgPathElement)">
            <summary>Visits the path shape element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgPathElement"/> specifying the path shape.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgPolygonElement)">
            <summary>Visits the polygon shape element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgPolygonElement"/> specifying the polygon shape.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgPolylineElement)">
            <summary>Visits the polyline shape element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgPolylineElement"/> specifying the polyline shape.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgRectElement)">
            <summary>Visits the rectangle shape element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgRectElement"/> specifying the rectangle shape.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgImageElement)">
            <summary>Visits the <c>image</c> graphics element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgImageElement"/> specifying the <c>image</c> element.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgUseElement)">
            <summary>Visits the use element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgUseElement"/> specifying the <c>use</c> element.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.BeginContainer(SharpVectors.Dom.Svg.ISvgElement)">
            <summary>Signal the beginning of a graphics container element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgElement"/> specifying the container element.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgAElement)">
            <summary>Visits the <c>link</c> element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgAElement"/> specifying the <c>link</c> element.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgGElement)">
            <summary>Visits the <c>group</c> element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgGElement"/> specifying the <c>group</c> element.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgSvgElement)">
            <summary>Visits the <c>svg</c> clipart element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgSvgElement"/> specifying the <c>svg</c> clipart element.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgSwitchElement)">
            <summary>Visits the <c>switch</c> element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgSwitchElement"/> specifying the <c>switch</c> element.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgSymbolElement)">
            <summary>Visits the <c>symbol</c> element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgRectElement"/> specifying the <c>symbol</c> element.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.EndContainer(SharpVectors.Dom.Svg.ISvgElement)">
            <summary>Signal the ending of a graphics container element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgElement"/> specifying the container element.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgTextElement)">
            <summary>Visits the <c>text</c> content element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgTextElement"/> specifying the <c>text</c> content element.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgTextPathElement)">
            <summary>Visits the <c>text-path</c> content element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgTextPathElement"/> specifying the <c>text-path</c> element.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitor.Visit(SharpVectors.Dom.Svg.ISvgTSpanElement)">
            <summary>Visits the <c>text-span</c> content element.</summary>
            <param name="element">An instance of <see cref="T:SharpVectors.Dom.Svg.ISvgTSpanElement"/> specifying the <c>text-span</c> content element.</param>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgElementVisitorTarget">
            <summary>
            A host target of the element visitor. Each renderable SVG element implements this interface.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgElementVisitorTarget.Accept(SharpVectors.Dom.Svg.ISvgElementVisitor)">
            <summary>
            This dispatches the rendering request to the accepted <see cref="T:SharpVectors.Dom.Svg.ISvgElementVisitor"/> object.
            </summary>
            <param name="visitor">An implementation of the <see cref="T:SharpVectors.Dom.Svg.ISvgElementVisitor"/> interface, to which the
            rendering operation is delegated.</param>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgRenderer">
            <summary>
            Defines the interface required by a renderer to render the SVG DOM.
            </summary>
            <remarks>
            The <see cref="T:SharpVectors.Dom.Svg.ISvgRenderer">ISvgRenderer</see> is used to render
            a <see cref="T:SharpVectors.Dom.Svg.ISvgElement">ISvgElement</see> object onto a bitmap.
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRenderer.Window">
            <summary>
            The window that is being rendered to.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgRenderer.Render(SharpVectors.Dom.Svg.ISvgElement)">
            <summary>
            Renders an <see cref="T:SharpVectors.Dom.Svg.ISvgElement">SvgElement</see> object onto a
            bitmap and returns that bitmap.
            </summary>
            <param name="node">
            The SvgElement object to be rendered.
            </param>
            <returns>
            A bitmap with <c>node</c> rendered onto it.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgRenderer.Render(SharpVectors.Dom.Svg.ISvgDocument)">
            <summary>
            Renders an <see cref="T:SharpVectors.Dom.Svg.ISvgDocument">SvgDocument</see> object onto
            a bitmap and returns that bitmap.
            </summary>
            <param name="node">
            The SvgDocument object to be rendered.
            </param>
            <returns>
            A bitmap with <c>node</c> rendered onto it.
            </returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRenderer.InvalidRect">
            <summary>
            Controls the rendering of the document.  
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgRenderer.InvalidateRect(SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            Allows you to establish or add to the existing invalidation rectangle
            </summary>
            <param name="rect"></param>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRenderer.OnRender">
            <summary>
            Event Delegate to report when the SVG renderer does it's work.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPaint">
            <summary>
            The SvgPaint interface corresponds to basic type paint and represents the values of 
            properties 'fill' and 'stroke'. 
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerOrient.Unknown">
            <summary>
            The marker orientation is not one of predefined types. It is invalid to attempt 
            to define a new value of this type or to attempt to switch an existing value to this type.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerOrient.Auto">
            <summary>
            Attribute orient has value 'auto'.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerOrient.Angle">
            <summary>
            Attribute orient has an angle value.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerOrient.AutoStartReverse">
            <summary>
            Attribute orient has value 'auto-start-reverse'.
            </summary>
            <remarks>
            <para>
            If placed by marker-start, the marker is oriented 180° different from the orientation 
            that would be used if 'auto' where specified. For all other markers, 'auto-start-reverse' 
            means the same as 'auto'.
            </para>
            <para>
            This allows a single arrowhead marker to be defined that can be used for both the start 
            and end of a path, i.e. which points outwards from both ends.
            </para>
            </remarks>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerUnit.Unknown">
            <summary>
            The marker unit type is not one of predefined types. It is invalid to attempt to define 
            a new value of this type or to attempt to switch an existing value to this type.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerUnit.UserSpaceOnUse">
            <summary>
            The value of attribute markerUnits is 'userSpaceOnUse'.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgMarkerUnit.StrokeWidth">
            <summary>
            The value of attribute markerUnits is 'strokeWidth'.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedPathData">
            <summary>
            The SvgAnimatedPathData interface supports elements which have a 'd' attribute which 
            holds Svg path data, and supports the ability to animate that attribute. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathElement">
            <summary>
            The SvgPathElement interface corresponds to the 'path' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSeg">
            <summary>
            The SvgPathSeg interface is a base interface that corresponds to a single command within 
            a path data specification. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegArcAbs">
            <summary>
            The SvgPathSegArcAbs interface corresponds to an "absolute arcto" (A) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegArcRel">
            <summary>
            The SvgPathSegArcRel interface corresponds to a "relative arcto" (a) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegClosePath">
            <summary>
            The SvgPathSegClosePath interface corresponds to a "closepath" (z) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicAbs">
            <summary>
            The SvgPathSegCurvetoCubicAbs interface corresponds to an 
            "absolute cubic Bezier curveto" (C) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicRel">
            <summary>
            The SvgPathSegCurvetoCubicRel interface corresponds to a "relative cubic Bezier curveto" 
            (c) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicSmoothAbs">
            <summary>
            The SvgPathSegCurvetoCubicSmoothAbs interface corresponds to an "absolute smooth cubic curveto" 
            (S) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoCubicSmoothRel">
            <summary>
            The SvgPathSegCurvetoCubicSmoothRel interface corresponds to a "relative smooth cubic curveto" 
            (s) path data command.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticAbs">
            <summary>
            The SvgPathSegCurvetoQuadraticAbs interface corresponds to an "absolute quadratic Bezier curveto" 
            (Q) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticRel">
            <summary>
            The SvgPathSegCurvetoCubicRel interface corresponds to a "relative cubic Bezier curveto" 
            (c) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticSmoothAbs">
            <summary>
            The SvgPathSegCurvetoQuadraticSmoothAbs interface corresponds to an 
            "absolute smooth quadratic curveto" (T) path data command.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegCurvetoQuadraticSmoothRel">
            <summary>
            The SvgPathSegCurvetoQuadraticSmoothRel interface corresponds to a 
            "relative smooth quadratic curveto" (t) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoAbs">
            <summary>
            The SvgPathSegLinetoAbs interface corresponds to an "absolute lineto" (L) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoHorizontalAbs">
            <summary>
            The SvgPathSegLinetoHorizontalAbs interface corresponds to an 
            "absolute horizontal lineto" (H) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoHorizontalRel">
            <summary>
            The SvgPathSegLinetoHorizontalRel interface corresponds to a 
            "relative horizontal lineto" (h) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoRel">
            <summary>
            The SvgPathSegLinetoRel interface corresponds to an "relative lineto" (l) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoVerticalAbs">
            <summary>
            The SvgPathSegLinetoVerticalAbs interface corresponds to an "absolute vertical lineto" (V) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegLinetoVerticalRel">
            <summary>
            The SvgPathSegLinetoVerticalRel interface corresponds to a "relative vertical lineto" (v) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegList">
            <summary>
            This interface defines a list of SvgPathSeg objects. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegMovetoAbs">
            <summary>
            The SvgPathSegMovetoAbs interface corresponds to an "absolute moveto" (M) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPathSegMovetoRel">
            <summary>
            The SvgPathSegMovetoRel interface corresponds to an "relative moveto" (m) path data command. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgScriptElement">
            <summary>
            The ISvgScriptElement interface corresponds to the 'script' element. 
            </summary>
            <remarks>
            <para>A 'script' element is equivalent to the 'script' element in HTML and thus is the place for scripts.</para>
            <para>Any functions defined within any 'script' element have a 'global' scope across the entire current document.</para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgScriptElement.Type">
            <summary>
            Gets or sets a value corresponding to the attribute 'type' on the given 'script' element.
            </summary>
            <value>A string specifying the script type.</value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgScriptElement.CrossOrigin">
            <summary>
            Gets or sets a value corresponding to the attribute 'crossorigin' on the given 'script' element.
            </summary>
            <value>An enumeration specifying the CORS (Cross-Origin Resource Sharing) setting attributes. 
            Possible values are <c>anonymous</c>, <c>use-credentials</c> and empty string.</value>
            <remarks>This is introduced in <c>SVG 2</c>.</remarks>
            <seealso href="https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes"/>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAnimatedPoints">
            <summary>
            The SvgAnimatedPoints interface supports elements which have a 
            'points' attribute which holds a list of coordinate values and 
            which support the ability to animate that attribute. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgCircleElement">
            <summary>
            The SvgCircleElement interface corresponds to the 'circle' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgCircleElement.Cx">
            <summary>
            Corresponds to attribute cx on the given 'circle' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgCircleElement.Cy">
            <summary>
            Corresponds to attribute cy on the given 'circle' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgCircleElement.R">
            <summary>
            Corresponds to attribute r on the given 'circle' element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgEllipseElement">
            <summary>
            The SvgEllipseElement interface corresponds to the 'ellipse' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgLineElement">
            <summary>
            The SvgLineElement interface corresponds to the 'line' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPolygonElement">
            <summary>
            The SvgPolygonElement interface corresponds to the 'polygon' element
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgPolylineElement">
            <summary>
            The SvgPolylineElement interface corresponds to the 'polyline' element
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgRectElement">
            <summary>
            The SvgRectElement interface corresponds to the 'rect' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.X">
            <summary>
            Corresponds to attribute x on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.Y">
            <summary>
            Corresponds to attribute y on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.Rx">
            <summary>
            Corresponds to attribute rx on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.Ry">
            <summary>
            Corresponds to attribute ry on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.Width">
            <summary>
            Corresponds to attribute width on the given 'rect' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgRectElement.Height">
            <summary>
            Corresponds to attribute height on the given 'rect' element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgPointF">
            <summary>
            This represents an ordered pair of float precision x- and y-coordinates 
            that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgPointF.Empty">
            <summary>
            Represents a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure 
            with member data left uninitialized.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure 
            with the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the point. </param>
            <param name="y">The y-coordinate of the point. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure 
            with the specified coordinates.
            </summary>
            <param name="x">The x-coordinate of the point. </param>
            <param name="y">The y-coordinate of the point. </param>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPointF.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> is empty.
            </summary>
            <value>
            This is <see langword="true"/> if both <see cref="P:SharpVectors.Dom.Svg.SvgPointF.X"/> and 
            <see cref="P:SharpVectors.Dom.Svg.SvgPointF.Y"/> are 0; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPointF.X">
            <summary>
            Gets the x-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <value>
            The x-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPointF.Y">
            <summary>
            Gets the y-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <value>
            The y-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPointF.ValueX">
            <summary>
            Gets or sets the x-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <value>
            The x-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgPointF.ValueY">
            <summary>
            Gets or sets the y-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <value>
            The y-coordinate of this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.op_Addition(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            This translates the <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> by the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <param name="sz">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that specifies the numbers to add to the 
            x- and y-coordinates of the <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </param>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to translate.</param>
            <returns>The translated <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.op_Subtraction(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            This translates a <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> by the negative of a specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>. 
            </summary>
            <param name="sz">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that specifies the numbers to subtract from 
            the coordinates of pt.
            </param>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to translate.</param>
            <returns>The translated <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.op_Equality(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgPointF)">
            <summary>
            This compares two <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structures. The result 
            specifies whether the values of the <see cref="P:SharpVectors.Dom.Svg.SvgPointF.X"/> and 
            <see cref="P:SharpVectors.Dom.Svg.SvgPointF.Y"/> properties of the two <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> 
            structures are equal.
            </summary>
            <param name="right">A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to compare. </param>
            <param name="left">A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to compare. </param>
            <returns>
            This is <see langword="true"/> if the <see cref="P:SharpVectors.Dom.Svg.SvgPointF.X"/> and 
            <see cref="P:SharpVectors.Dom.Svg.SvgPointF.Y"/> values of the left and right 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structures are equal; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.op_Inequality(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgPointF)">
            <summary>
            This determines whether the coordinates of the specified points are 
            not equal.
            </summary>
            <param name="left">A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to compare.</param>
            <param name="right">A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to compare.</param>
            <returns>
            This <see langword="true"/> to indicate the <see cref="P:SharpVectors.Dom.Svg.SvgPointF.X"/> 
            and <see cref="P:SharpVectors.Dom.Svg.SvgPointF.Y"/> values of left and right are not equal; 
            otherwise, <see langword="false"/>. 
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.Distance(SharpVectors.Dom.Svg.SvgPointF)">
            <summary>
            This computes the distance between this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>
            and the specified <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <param name="point">
            A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> object specifying the other point from
            which to determine the distance.
            </param>
            <returns>
            The distance between this point and the specified point.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.Equals(System.Object)">
            <summary>
            This determines whether this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> contains the same 
            coordinates as the specified <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test. 
            </param>
            <returns>
            This method returns <see langword="true"/> if the specified object 
            is a <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> and has the same coordinates as this 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.Equals(SharpVectors.Dom.Svg.SvgPointF)">
            <summary>
            This determines whether this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> contains the same 
            coordinates as the specified <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <param name="other">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to test.</param>
            <returns>
            This method returns <see langword="true"/> if the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> has the same coordinates as this 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.GetHashCode">
            <summary>
            This returns a hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure.
            </summary>
            <returns>
            An integer value that specifies a hash value for this 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.ToString">
            <summary>
            This converts this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to a human readable string.
            </summary>
            <returns>
            A string that represents this <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.Add(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            This translates a given <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> by a specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to translate.</param>
            <param name="sz">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that specifies the numbers to add to the 
            coordinates of pt.
            </param>
            <returns>The translated <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgPointF.Subtract(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            This translates a <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> by the negative of a 
            specified size.
            </summary>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to translate.</param>
            <param name="sz">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that specifies the numbers to subtract from 
            the coordinates of pt.
            </param>
            <returns>The translated <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgRectF">
            <summary>
            This stores a set of four float precision numbers that represent the 
            location and size of a rectangle.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgRectF.Empty">
            <summary>
            Represents an instance of the <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure 
            with its members uninitialized.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure with the specified location and size.
            </summary>
            <param name="x">
            The x-coordinate of the upper-left corner of the rectangle. 
            </param>
            <param name="y">
            The y-coordinate of the upper-left corner of the rectangle. 
            </param>
            <param name="width">The width of the rectangle. </param>
            <param name="height">The height of the rectangle. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.#ctor(SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure 
            with the specified location and size.
            </summary>
            <param name="size">
            A <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that represents the width and height of the 
            rectangular region.
            </param>
            <param name="location">
            A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> that represents the upper-left corner 
            of the rectangular region. 
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Create(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure with upper-left corner 
            and lower-right corner at the specified locations.
            </summary>
            <param name="left">
            The x-coordinate of the upper-left corner of the rectangular region. 
            </param>
            <param name="top">
            The y-coordinate of the upper-left corner of the rectangular region.
            </param>
            <param name="right">
            The x-coordinate of the lower-right corner of the rectangular region. 
            </param>
            <param name="bottom">
            The y-coordinate of the lower-right corner of the rectangular region.
            </param>
            <returns>
            The new <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> that this method creates.
            </returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <value>
            A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> that represents the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Size">
            <summary>
            Gets or sets the size of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>.
            </summary>
            <value>
            A <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that represents the width and height of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <value>
            The x-coordinate of the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <value>
            The y-coordinate of the upper-left corner of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure. 
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Width">
            <summary>
            Gets or sets the width of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <value>
            The width of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Height">
            <summary>
            Gets or sets the height of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <value>
            The height of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Left">
            <summary>
            Gets the x-coordinate of the left edge of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </summary>
            <value>
            The x-coordinate of the left edge of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Top">
            <summary>
            Gets the y-coordinate of the top edge of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </summary>
            <value>
            The y-coordinate of the top edge of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Right">
            <summary>
            Gets the x-coordinate that is the sum of <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/> 
            and <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/> of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </summary>
            <value>
            The x-coordinate that is the sum of <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/> and 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/> of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.Bottom">
            <summary>
            Gets the y-coordinate that is the sum of <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/> 
            and <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </summary>
            <value>
            The y-coordinate that is the sum of <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/> and 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgRectF.IsEmpty">
            <summary>
            Tests whether the <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/> or 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> property of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> has a value of zero.
            </summary>
            <value>
            This property returns true if the <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/> or 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> property of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> has a value of zero; otherwise, false.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Equals(System.Object)">
            <summary>
            This tests whether an object is a <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> with the 
            same location and size of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>.
            </summary>
            <param name="obj">
            The <see cref="T:System.Object"/> to test. 
            </param>
            <returns>
            This returns <see langword="true"/> if the specified object is a 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> and its <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/>, 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/>, and <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> properties are equal 
            to the corresponding properties of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Equals(SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This tests whether the specified <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> is with 
            the same location and size of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>.
            </summary>
            <param name="other">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> to test. 
            </param>
            <returns>
            This returns <see langword="true"/> if specified <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            has its <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/>, and 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> properties are equal to the corresponding 
            properties of this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Contains(System.Single,System.Single)">
            <overloads>
            This determines if the specified point or rectangle is contained 
            within this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </overloads>
            <summary>
            This determines if the specified point is contained within this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <param name="x">The x-coordinate of the point to test. </param>
            <param name="y">The y-coordinate of the point to test. </param>
            <returns>
            This method returns true if the point defined by x and y is 
            contained within this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure; otherwise 
            false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Contains(SharpVectors.Dom.Svg.SvgPointF)">
            <summary>
            This determines if the specified point is contained within this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> to test. </param>
            <returns>
            This method returns true if the point represented by the pt 
            parameter is contained within this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure; otherwise false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Contains(SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This determines if the rectangular region represented by rect is 
            entirely contained within this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <param name="rect">The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> to test. </param>
            <returns>
            This method returns true if the rectangular region represented by 
            rect is entirely contained within the rectangular region represented 
            by this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>; otherwise false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure. 
            For information about the use of hash codes, see Object.GetHashCode.
            </summary>
            <returns>The hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Inflate(System.Single,System.Single)">
            <overloads>
            Inflates this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure by the specified 
            amount.
            </overloads>
            <summary>
            Inflates this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure by the specified 
            amount.
            </summary>
            <param name="x">The amount to inflate this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure horizontally. </param>
            <param name="y">The amount to inflate this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure vertically. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Inflate(SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Inflates this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> by the specified amount.
            </summary>
            <param name="size">The amount to inflate this rectangle. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Intersection(SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This replaces this <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure with the 
            intersection of itself and the specified <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> 
            structure.
            </summary>
            <param name="rect">The rectangle to intersect. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Intersects(SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This determines if this rectangle intersects with rect.
            </summary>
            <param name="rect">The rectangle to test. </param>
            <returns>
            This method returns <see langword="true"/> if there is any 
            intersection; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Offset(SharpVectors.Dom.Svg.SvgPointF)">
            <overloads>
            Adjusts the location of this rectangle by the specified amount.
            </overloads>
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="pos">The amount to offset the location. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Offset(System.Single,System.Single)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
            <param name="y">The amount to offset the location vertically. </param>
            <param name="x">The amount to offset the location horizontally. </param>
            <returns>This method does not return a value.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.ToString">
            <summary>
            Converts the Location and <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Size"/> of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> to a human-readable string.
            </summary>
            <returns>
            A string that contains the position, width, and height of this 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure; for example, 
            "{X=20, Y=20, Width=100, Height=50}".
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.op_Equality(SharpVectors.Dom.Svg.SvgRectF,SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This tests whether two <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structures have equal 
            location and size.
            </summary>
            <param name="left">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that is to the left of the 
            equality operator. 
            </param>
            <param name="right">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that is to the right of the 
            equality operator. 
            </param>
            <returns>
            This operator returns true if the two specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structures have equal 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/>, 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/>, and <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/>
            properties.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.op_Inequality(SharpVectors.Dom.Svg.SvgRectF,SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This tests whether two <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structures differ in 
            location or size.</summary>
            <param name="left">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that is to the left of the 
            inequality operator. 
            </param>
            <param name="right">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that is to the right of the 
            inequality operator. 
            </param>
            <returns>
            This operator returns true if any of the <see cref="P:SharpVectors.Dom.Svg.SvgRectF.X"/>, 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Y"/>, <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Width"/>, or 
            <see cref="P:SharpVectors.Dom.Svg.SvgRectF.Height"/> properties of the two 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structures are unequal; otherwise false.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Inflate(SharpVectors.Dom.Svg.SvgRectF,System.Single,System.Single)">
            <summary>
            Creates and returns an inflated copy of the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure. The copy is inflated by the 
            specified amount. The original rectangle remains unmodified.
            </summary>
            <param name="rect">
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> to be copied. This rectangle is not 
            modified. 
            </param>
            <param name="x">
            The amount to inflate the copy of the rectangle horizontally. 
            </param>
            <param name="y">
            The amount to inflate the copy of the rectangle vertically. 
            </param>
            <returns>The inflated <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Intersection(SharpVectors.Dom.Svg.SvgRectF,SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            Returns a <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that represents the 
            intersection of two rectangles. If there is no intersection, and 
            empty <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> is returned.
            </summary>
            <param name="a">A rectangle to intersect. </param>
            <param name="b">A rectangle to intersect. </param>
            <returns>
            A third <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure the size of which 
            represents the overlapped area of the two specified rectangles.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgRectF.Union(SharpVectors.Dom.Svg.SvgRectF,SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            Creates the smallest possible third rectangle that can contain both 
            of two rectangles that form a union.
            </summary>
            <param name="a">A rectangle to union. </param>
            <param name="b">A rectangle to union. </param>
            <returns>
            A third <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that contains both of 
            the two rectangles that form the union.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgSizeF">
            <summary>
            Stores an ordered pair of floating-point numbers, typically the width 
            and height of a rectangle.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgSizeF.Empty">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> class.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.#ctor(System.Single,System.Single)">
            <summary>Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> class from the specified dimensions.</summary>
            <param name="width">The width component of the new <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>. </param>
            <param name="height">The height component of the new <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.#ctor(SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> class from the specified existing <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.</summary>
            <param name="size">The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> from which to create the new <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.#ctor(SharpVectors.Dom.Svg.SvgPointF)">
            <summary>Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> class from the specified <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.</summary>
            <param name="pt">The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> from which to initialize this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>. </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.op_Addition(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Adds the width and height of one <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure 
            to the width and height of another <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </summary>
            <param name="sz1">The first <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to add.</param>
            <param name="sz2">The second <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to add.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure that is the result of the 
            addition operation.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.op_Subtraction(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Subtracts the width and height of one <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> 
            structure from the width and height of another 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </summary>
            <param name="sz1">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> on the left side of the subtraction 
            operator. 
            </param>
            <param name="sz2">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> on the right side of the subtraction 
            operator. 
            </param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that is the result of the subtraction 
            operation.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.op_Equality(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Tests whether two <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structures are equal.
            </summary>
            <param name="sz1">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the left side of the 
            equality operator. 
            </param>
            <param name="sz2">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the right of the equality 
            operator. 
            </param>
            <returns>
            This operator returns <see langword="true"/> if <paramref name="sz1"/> 
            and <paramref name="sz2"/> have equal width and height; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.op_Inequality(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Tests whether two <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structures are different.
            </summary>
            <param name="sz1">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the left of the inequality 
            operator. 
            </param>
            <param name="sz2">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the right of the inequality 
            operator. 
            </param>
            <returns>
            This operator returns <see langword="true"/> if 
            <paramref name="sz1"/> and <paramref name="sz2"/> differ either 
            in width or height; <see langword="false"/> if <paramref name="sz1"/> 
            and <paramref name="sz2"/> are equal.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.op_Explicit(SharpVectors.Dom.Svg.SvgSizeF)~SharpVectors.Dom.Svg.SvgPointF">
            <summary>
            This converts the specified <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to a 
            <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/>.
            </summary>
            <param name="size">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure to be converted.
            </param>
            <returns>
            The <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structure specifying the result of the
            conversion.
            </returns>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSizeF.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> has zero 
            width and height.
            </summary>
            <value>
            This property returns <see langword="true"/> when this 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> has both a width and height of zero; 
            otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSizeF.Width">
            <summary>
            Gets or sets the horizontal component of this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <value>
            The horizontal component of this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgSizeF.Height">
            <summary>
            Gets or sets the vertical component of this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <value>
            The vertical component of this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.Equals(System.Object)">
            <summary>
            This tests whether the specified object is a <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> 
            with the same dimensions as this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to test. </param>
            <returns>
            This returns <see langword="true"/> if specified object is a 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> and has the same width and height as this 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.Equals(SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            This to see whether the specified <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> is with the 
            same dimensions as this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <param name="other">The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to test. </param>
            <returns>
            This returns <see langword="true"/> if the specified <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> and has 
            the same width and height as this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.GetHashCode">
            <summary>
            This returns a hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </summary>
            <returns>
            An integer value that specifies a hash value for this 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.ToString">
            <summary>
            This creates a human-readable string that represents this 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.
            </summary>
            <returns>A string that represents this <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.Add(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Adds the width and height of one <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure to 
            the width and height of another <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </summary>
            <param name="sz1">The first <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to add.</param>
            <param name="sz2">The second <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> to add.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure that is the result of the addition 
            operation.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgSizeF.Subtract(SharpVectors.Dom.Svg.SvgSizeF,SharpVectors.Dom.Svg.SvgSizeF)">
            <summary>
            Subtracts the width and height of one <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> 
            structure from the width and height of another 
            <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure.
            </summary>
            <param name="sz1">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the left side of the 
            subtraction operator. 
            </param>
            <param name="sz2">
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> structure on the right side of the 
            subtraction operator. 
            </param>
            <returns>
            The <see cref="T:SharpVectors.Dom.Svg.SvgSizeF"/> that is a result of the subtraction 
            operation.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTransformF">
            <summary>
            This is an implementation of the 3-by-3 affine matrix that represents 
            a geometric transform.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class
            as the identity transform or matrix.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.#ctor(SharpVectors.Dom.Svg.SvgRectF,SharpVectors.Dom.Svg.SvgPointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class 
            to the geometric transform defined by the specified rectangle and 
            array of points.
            </summary>
            <param name="rect">
            A <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that represents the rectangle 
            to be transformed.
            </param>
            <param name="plgpts">
            An array of three <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structures that represents the 
            points of a parallelogram to which the upper-left, upper-right, and 
            lower-left corners of the rectangle is to be transformed. The 
            lower-right corner of the parallelogram is implied by the first three 
            corners.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="plgpts"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the length of the <paramref name="plgpts"/> array is not equal
            to 3.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the width or height of the <paramref name="rect"/> is zero.
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class 
            with the specified elements.
            </summary>
            <param name="elements">
            An array of six items defining the transform.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="elements"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the length of the <paramref name="elements"/> array is not equal
            to 6.
            </exception>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class 
            with the specified elements.
            </summary>
            <param name="m11">
            The value in the first row and first column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="m12">
            The value in the first row and second column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="m21">
            The value in the second row and first column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="m22">
            The value in the second row and second column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="dx">
            The value in the third row and first column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="dy">
            The value in the third row and second column of the new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.#ctor(SharpVectors.Dom.Svg.SvgTransformF)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> class
            with parameters copied from the specified parameter, a copy 
            constructor.
            </summary>
            <param name="source">
            The <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> instance from which the parameters
            are to be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTransformF.Elements">
            <summary>
            Gets an array of floating-point values that represents the elements 
            of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </summary>
            <value>
            An array of floating-point values that represents the elements 
            of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTransformF.IsIdentity">
            <summary>               
            Gets a value indicating whether this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> is the 
            identity matrix.
            </summary>
            <value>
            This property is <see langword="true"/> if this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> is identity; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTransformF.IsInvertible">
            <summary>
            Gets a value indicating whether this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> is 
            invertible.
            </summary>
            <value>
            This property is <see langword="true"/> if this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> is invertible; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTransformF.OffsetX">
            <summary>
            Gets the <c>x</c> translation value (the <c>dx</c> value, or the 
            element in the third row and first column) of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </summary>
            <value>
            The <c>x</c> translation value of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Dom.Svg.SvgTransformF.OffsetY">
            <summary>
            Gets the <c>y</c> translation value (the <c>dy</c> value, or the 
            element in the third row and second column) of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </summary>
            <value>
            The <c>y</c> translation value of this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Equals(System.Object)">
            <summary>
            Determine whether the specified object is a <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            and is identical to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </summary>
            <param name="obj">The object to test.</param>
            <returns>
            This method returns <see langword="true"/> if obj is the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> identical to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
            <returns>The hash code for this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Invert">
            <summary>
            Inverts this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>, if it is invertible.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Multiply(SharpVectors.Dom.Svg.SvgTransformF)">
            <overloads>
            Multiplies this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by appending or prepending the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </overloads>
            <summary>
            Multiplies this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by prepending the specified 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </summary>
            <param name="matrix">
            The <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by which this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            is to be multiplied.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Multiply(SharpVectors.Dom.Svg.SvgTransformF,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Multiplies this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by the matrix specified in 
            the matrix parameter, and in the order specified in the order parameter.
            </summary>
            <param name="matrix">
            The <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by which this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            is to be multiplied.
            </param>
            <param name="order">
            The <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that represents the order of the 
            multiplication.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Reset">
            <summary>
            Resets this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> to have the elements of the 
            identity matrix.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Rotate(System.Single)">
            <overloads>
            Applies a clockwise rotation of the specified angle about the 
            origin to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>. 
            </overloads>
            <summary>
            Applies a clockwise rotation of the specified angle about the 
            origin to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>. 
            </summary>
            <param name="angle">
            The angle (extent) of the rotation, in degrees.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Rotate(System.Single,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Applies a clockwise rotation of the specified angle about the 
            origin to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>, and in the order specified 
            in the order parameter. 
            </summary>
            <param name="angle">
            The angle (extent) of the rotation, in degrees.
            </param>
            <param name="order">
            A <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that specifies the order (append or 
            prepend) in which the rotation is applied to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.RotateAt(System.Single,SharpVectors.Dom.Svg.SvgPointF)">
            <overloads>
            Applies a clockwise rotation about the specified point to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by appending or prepending the rotation.
            </overloads>
            <summary>
            Applies a clockwise rotation about the specified point to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by prepending the rotation.
            </summary>
            <param name="angle">
            The angle (extent) of the rotation, in degrees.
            </param>
            <param name="point">
            A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> that represents the center of the rotation.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.RotateAt(System.Single,SharpVectors.Dom.Svg.SvgPointF,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Applies a clockwise rotation about the specified point to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in the specified order. 
            </summary>
            <param name="angle">
            The angle (extent) of the rotation, in degrees.
            </param>
            <param name="point">
            A <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> that represents the center of the rotation.
            </param>
            <param name="order">
            A <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that specifies the order (append or 
            prepend) in which the rotation is applied.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Scale(System.Single,System.Single)">
            <overloads>
            Applies the specified scale vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            by appending or prepending the scale vector.
            </overloads>
            <summary>
            Applies the specified scale vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            by prepending the scale vector.
            </summary>
            <param name="scaleX">
            The value by which to scale this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in the 
            x-axis direction.
            </param>
            <param name="scaleY">
            The value by which to scale this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in the 
            y-axis direction.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Scale(System.Single,System.Single,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Applies the specified scale vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            using the specified order.
            </summary>
            <param name="scaleX">
            The value by which to scale this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in the 
            x-axis direction.
            </param>
            <param name="scaleY">
            The value by which to scale this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in the 
            y-axis direction.
            </param>
            <param name="order">
            A <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that specifies the order (append or 
            prepend) in which the scale vector is applied to this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Shear(System.Single,System.Single)">
            <overloads>
            Applies the specified shear vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by 
            appending or prepending the shear vector.
            </overloads>
            <summary>
            Applies the specified shear vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> by 
            prepending the shear vector.
            </summary>
            <param name="shearX">
            The horizontal shear factor.
            </param>
            <param name="shearY">
            The vertical shear factor.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Shear(System.Single,System.Single,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Applies the specified shear vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> in 
            the specified order.
            </summary>
            <param name="shearX">
            The horizontal shear factor.
            </param>
            <param name="shearY">
            The vertical shear factor.
            </param>
            <param name="order">
            A <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that specifies the order (append or 
            prepend) in which the shear is applied.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Translate(System.Single,System.Single)">
            <overloads>
            Applies the specified translation vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            by appending or prepending the translation vector.
            </overloads>
            <summary>
            Applies the specified translation vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            by prepending the translation vector.
            </summary>
            <param name="offsetX">
            The <c>x</c> value by which to translate this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="offsetY">
            The <c>y</c> value by which to translate this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Translate(System.Single,System.Single,SharpVectors.Dom.Svg.SvgTransformOrder)">
            <summary>
            Applies the specified translation vector to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> 
            in the specified order.
            </summary>
            <param name="offsetX">
            The <c>x</c> value by which to translate this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="offsetY">
            The <c>y</c> value by which to translate this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
            <param name="order">
            A <see cref="T:SharpVectors.Dom.Svg.SvgTransformOrder"/> that specifies the order (append or 
            prepend) in which the translation is applied to this <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/>.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Transform(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Applies the geometric transform represented by this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> to a specified point. 
            </summary>
            <param name="x">The input <c>x</c> value of the point.</param>
            <param name="y">The input <c>y</c> value of the point.</param>
            <param name="ox">The transformed <c>x</c> value of the point.</param>
            <param name="oy">The transformed <c>y</c> value of the point.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.ReverseTransform(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Applies the reverse geometric transform represented by this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> to a specified point. 
            </summary>
            <param name="x">The input <c>x</c> value of the point.</param>
            <param name="y">The input <c>y</c> value of the point.</param>
            <param name="ox">The transformed <c>x</c> value of the point.</param>
            <param name="oy">The transformed <c>y</c> value of the point.</param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.TransformPoints(SharpVectors.Dom.Svg.SvgPointF[])">
            <summary>
            Applies the geometric transform represented by this 
            <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> to a specified array of points. 
            </summary>
            <param name="pts">
            An array of <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structures that represents the points 
            to transform.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.TransformVectors(SharpVectors.Dom.Svg.SvgPointF[])">
            <summary>
            Multiplies each vector in an array by the matrix. The translation 
            elements of this matrix (third row) are ignored.
            </summary>
            <param name="pts">
            An array of <see cref="T:SharpVectors.Dom.Svg.SvgPointF"/> structures that represents the points 
            to transform.
            </param>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.Clone">
            <summary>
            This creates a new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> that is a deep 
            copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.SvgTransformF.System#ICloneable#Clone">
            <summary>
            This creates a new <see cref="T:SharpVectors.Dom.Svg.SvgTransformF"/> that is a deep 
            copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.SvgTransformOrder">
            <summary>
            Specifies the order for matrix transform operations.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTransformOrder.Prepend">
            <summary>
            The new operation is applied after the old operation.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.Svg.SvgTransformOrder.Append">
            <summary>
            The new operation is applied before the old operation.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement">
            <summary>
            The ISvgAltGlyphDefElement interface corresponds to the 'altGlyphDef' element.
            </summary>
            <remarks>
            *Content model:* Either
            <list type="bullet">
            <item><term>one or more 'glyphRef' elements, or</term>
            <description>In the simplest case, an 'altGlyphDef' contains one or more 'glyphRef' elements. 
            Each 'glyphRef' element references a single glyph within a particular font.
            </description>
            </item>
            <item><term>one or more 'altGlyphItem' elements.</term>
            <description>In the more complex case, an 'altGlyphDef' contains one or more 'altGlyphItem' elements. 
            Each 'altGlyphItem' represents a candidate set of substitute glyphs. Each 'altGlyphItem' contains 
            one or more 'glyphRef' elements. Each 'glyphRef' element references a single glyph within a particular font. 
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement.IsSimple">
            <summary>
            Gets a value indicating whether this is a simple content model.
            </summary>
            <value>
            Returns <see langword="true"/> if this element defines a simple content model that contains only 'glyphRef'
            elements, otherwise returns <see langword="false"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement.GetGlyphRef(System.String)">
            <summary>
            Gets the <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> with the specified name or ID.
            </summary>
            <param name="name">The name or ID of the required <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/>.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> specifying the 'glyphRef' element of the specifiied name or ID.
            <para>
            This will always return <see langword="null"/>, if the <see cref="P:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement.IsSimple"/> is <see langword="false"/>.
            </para>
            </returns>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement.GetGlyphItem(System.String)">
            <summary>
            Gets the <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement"/> with the specified name or ID.
            </summary>
            <param name="name">The name or ID of the required <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement"/>.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement"/> specifying the 'altGlyphItem' element of the specifiied name or ID.
            <para>
            This will always return <see langword="null"/>, if the <see cref="P:SharpVectors.Dom.Svg.ISvgAltGlyphDefElement.IsSimple"/> is <see langword="true"/>.
            </para>
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAltGlyphElement">
            <summary>
            The ISvgAltGlyphElement interface corresponds to the 'altGlyph' element.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAltGlyphElement.GlyphRef">
            <summary>
            The glyph identifier, this corresponds to attribute 'glyphRef attribute' on the given element.
            </summary>
            <value>The glyph identifier, the format of which is dependent on the <see cref="P:SharpVectors.Dom.Svg.ISvgAltGlyphElement.Format"/> of the given font. </value>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgAltGlyphElement.Format">
            <summary>
            The format of the given font. This corresponds to attribute 'format' on the given element.
            </summary>
            <value>The format of the given font.</value>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement">
            <summary>
            The ISvgAltGlyphItemElement interface corresponds to the 'altGlyphItem' element.
            </summary>
            <remarks>
            <para>*Content model:* One or more 'glyphRef' elements.</para>
            <para>The 'altGlyphItem' element defines a candidate set of possible glyph substitutions. 
            The first 'altGlyphItem' element whose referenced glyphs are all available is chosen. 
            Its glyphs are rendered instead of the character(s) that are inside of the referencing 'altGlyph' element.</para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Dom.Svg.ISvgAltGlyphItemElement.GetGlyphRef(System.String)">
            <summary>
            Gets the <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> with the specified name or ID.
            </summary>
            <param name="name">The name or ID of the required <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/>.</param>
            <returns>
            A <see cref="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement"/> specifying the 'glyphRef' element of the specifiied name or ID.
            </returns>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgDefinitionSrcElement">
            <summary>
            The SVGDefinitionSrcElement interface corresponds to the 'definition-src' element.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontElement">
            <summary>
            The ISvgFontElement interface corresponds to the 'font' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontFaceElement">
            <summary>
            The ISvgFontFaceElement interface corresponds to the 'font-face' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontFaceFormatElement">
            <summary>
            The ISvgFontFaceFormatElement interface corresponds to the 'font-face-format' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontFaceNameElement">
            <summary>
            The ISvgFontFaceNameElement interface corresponds to the 'font-face-name' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontFaceSrcElement">
            <summary>
            The ISvgFontFaceSrcElement interface corresponds to the 'font-face-src' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgFontFaceUriElement">
            <summary>
            The ISvgFontFaceUriElement interface corresponds to the 'font-face-uri' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgGlyphElement">
            <summary>
            The ISvgGlyphElement interface corresponds to the 'glyph' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgGlyphRefElement">
            <summary>
            The ISvgGlyphRefElement interface corresponds to the 'glyphRef' element. 
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.GlyphRef">
            <summary>
            The glyph identifier, this corresponds to attribute 'glyphRef attribute' on the given element.
            </summary>
            <value>The glyph identifier, the format of which is dependent on the <see cref="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.Format"/> of the given font. </value>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.Format">
            <summary>
            The format of the given font. This corresponds to attribute 'format' on the given element.
            </summary>
            <value>The format of the given font.</value>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.X">
            <summary>
            Corresponds to attribute 'x' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.Y">
            <summary>
            Corresponds to attribute 'y' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.Dx">
            <summary>
            Corresponds to attribute 'dx' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="P:SharpVectors.Dom.Svg.ISvgGlyphRefElement.Dy">
            <summary>
            Corresponds to attribute 'dy' on the given element.
            </summary>
            <remarks>It is read only attribute</remarks>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgHKernElement">
            <summary>
            The ISvgHKernElement interface corresponds to the 'hkern' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgMissingGlyphElement">
            <summary>
            The ISvgMissingGlyphElement interface corresponds to the 'missing-glyph' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTextContentElement">
            <summary>
            The ISvgTextContentElement interface is inherited by various text-related interfaces, such as 
            <see cref="T:SharpVectors.Dom.Svg.ISvgTextElement"/>, <see cref="T:SharpVectors.Dom.Svg.ISvgTSpanElement"/>, <see cref="T:SharpVectors.Dom.Svg.ISvgTRefElement"/>, 
            <see cref="T:SharpVectors.Dom.Svg.ISvgAltGlyphElement"/> and <see cref="T:SharpVectors.Dom.Svg.ISvgTextPathElement"/>. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTextElement">
            <summary>
            The SvgTextElement interface corresponds to the 'text' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTextPathElement">
            <summary>
            The SvgTextPathElement interface corresponds to the 'textPath' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTextPositioningElement">
            <summary>
            The SvgTextPositioningElement interface is inherited by text-related interfaces: SvgTextElement, 
            SvgTSpanElement, SvgTRefElement and SvgAltGlyphElement. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTRefElement">
            <summary>
            The SvgTRefElement interface corresponds to the 'tref' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgTSpanElement">
            <summary>
            The SvgTSpanElement interface corresponds to the 'tspan' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Svg.ISvgVKernElement">
            <summary>
            The ISvgVKernElement interface corresponds to the 'vkern' element. 
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.DomException">
            <summary>
            Represents errors that occur during DOM operation execution.
            </summary>
            <remarks>
            DOM operations only raise exceptions in "exceptional" circumstances, i.e., 
            when an operation is impossible to perform (either for logical reasons, 
            because data is lost, or because the implementation has become unstable). 
            In general, DOM methods return specific error values in ordinary 
            processing situations, such as out-of-bound errors when using <see cref="T:SharpVectors.Dom.INodeList"/>. 
            <para>Implementations should raise other exceptions under other circumstances. 
            For example, implementations should raise an implementation-dependent 
            exception if a <see langword="null"/> argument is passed. 
            </para>
            <para>Some languages and object systems do not support the concept of 
            exceptions. For such systems, error conditions may be indicated using 
            native error reporting mechanisms. For some bindings, for example, 
            methods may return error codes similar to those listed in the 
            corresponding method descriptions.
            </para>
            </remarks>
            <seealso href="https://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113">
            Document Object Model (DOM) Level 2 Core Specification</seealso>
        </member>
        <member name="M:SharpVectors.Dom.DomException.#ctor">
            <summary>
            Initializes a new instance of the System.Exception class.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.DomException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="msg">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or <see langword="null"/> if no inner exception is specified.</param>
        </member>
        <member name="M:SharpVectors.Dom.DomException.#ctor(SharpVectors.Dom.DomExceptionType)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error code.
            </summary>
            <param name="code">The DOM exception code.</param>
        </member>
        <member name="M:SharpVectors.Dom.DomException.#ctor(SharpVectors.Dom.DomExceptionType,System.String)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error message and error code.
            </summary>
            <param name="code">The DOM exception code.</param>
            <param name="msg"> The message that describes the error.</param>
        </member>
        <member name="M:SharpVectors.Dom.DomException.#ctor(SharpVectors.Dom.DomExceptionType,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the System.Exception class with a specified error
            message, error code and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="code">The DOM exception code.</param>
            <param name="msg"> The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, 
            or <see langword="null"/> if no inner exception is specified.</param>
        </member>
        <member name="M:SharpVectors.Dom.DomException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the System.Exception class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data 
            about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information 
            about the source or destination.</param>
        </member>
        <member name="P:SharpVectors.Dom.DomException.Code">
            <summary>
            Gets or sets a code specifying the type of the error.
            </summary>
            <value>An enumeration of the type <see cref="T:SharpVectors.Dom.DomExceptionType"/> specifying the code defining the error.</value>
        </member>
        <member name="T:SharpVectors.Dom.DomExceptionType">
            <summary>
            DOM exception code types.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.UnknowError">
            <summary>
            If there is no defined error code for this exception or the exception is unknown.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.IndexSizeErr">
            <summary>
            If index or size is negative, or greater than the allowed value.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.DomstringSizeErr">
            <summary>
            If the specified range of text does not fit into a string.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.HierarchyRequestErr">
            <summary>
            If any node is inserted somewhere it doesn't belong.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.WrongDocumentErr">
            <summary>
            If a node is used in a different document than the one that created it (that doesn't support it).
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.InvalidCharacterErr">
            <summary>
            If an invalid or illegal character is specified, such as in a name. See 
            production 2 in the XML specification for the definition of a legal 
            character, and production 5 for the definition of a legal name character.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.NoDataAllowedErr">
            <summary>
            If data is specified for a node which does not support data.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.NoModificationAllowedErr">
            <summary>
            If an attempt is made to modify an object where modifications are not allowed.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.NotFoundErr">
            <summary>
            If an attempt is made to reference a node in a context where it does not exist.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.NotSupportedErr">
            <summary>
            If the implementation does not support the requested type of object or operation.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.InuseAttributeErr">
            <summary>
            If an attempt is made to add an attribute that is already in use elsewhere.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.InvalidStateErr">
            <summary>
            If an attempt is made to use an object that is not, or is no longer, usable.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.SyntaxErr">
            <summary>
            If an invalid or illegal string is specified.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.InvalidModificationErr">
            <summary>
            If an attempt is made to modify the type of the underlying object.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.NamespaceErr">
            <summary>
            If an attempt is made to create or change an object in a way which is 
            incorrect with regard to namespaces.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.DomExceptionType.InvalidAccessErr">
            <summary>
            If a parameter or an operation is not supported by the underlying object.
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Utils.PathUtils">
            <summary>
            Extends functionality of <see cref="T:System.IO.Path"/> and provides additional methods for manipulating file or directory path information.
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Utils.PathUtils.Combine(System.Reflection.Assembly,System.String[])">
            <summary>
            Combines an assembly location and an array of strings into a path.
            </summary>
            <param name="assembly">An <see cref="T:System.Reflection.Assembly"/> which is taken as the base path.</param>
            <param name="paths">Path segments which are appended to the assembly location.</param>
            <returns>A string containing the combined path.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Utils.PathUtils.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Gets the full path to the assembly file.
            </summary>
            <param name="assembly">An <see cref="T:System.Reflection.Assembly"/> which is taken as the base path.</param>
            <returns>A string containing the full path to the assembly file.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Utils.PathUtils.GetAssemblyFileName(System.Reflection.Assembly)">
            <summary>
            Gets the file name if the assembly.
            </summary>
            <param name="assembly">An <see cref="T:System.Reflection.Assembly"/> which is taken as the base path.</param>
            <returns>A string containing the file name of the assembly.</returns>
        </member>
        <member name="M:SharpVectors.Dom.Utils.PathUtils.CombineInternal(System.String,System.String[])">
            <summary>
            Exposes <see cref="M:SharpVectors.Dom.Utils.PathUtils.Combine(System.Reflection.Assembly,System.String[])"/> for unit-testing where it is possible to mock an empty location
            </summary>
        </member>
        <member name="M:SharpVectors.Dom.Utils.PathUtils.GetAssemblyPathInternal(System.Reflection.Assembly,System.String)">
            <summary>
            Exposes <see cref="M:SharpVectors.Dom.Utils.PathUtils.GetAssemblyPath(System.Reflection.Assembly)"/> for unit-testing where it is possible to mock an empty location
            </summary>
        </member>
        <member name="T:SharpVectors.Dom.Views.IAbstractView">
            <summary>
            A base interface that all views shall derive from
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Views.IAbstractView.Document">
            <summary>
            The source <see cref="T:SharpVectors.Dom.Views.IDocumentView"/> of which this is an <see cref="T:SharpVectors.Dom.Views.IAbstractView"/>.
            </summary>
            <value>An instance of <see cref="T:SharpVectors.Dom.Views.IDocumentView"/> representing the document view.</value>
        </member>
        <member name="T:SharpVectors.Dom.Views.IDocumentView">
            <summary>
            The document view interface is implemented by document objects in DOM implementations supporting 
            DOM Views. It provides an attribute to retrieve the default view of a document.
            </summary>
        </member>
        <member name="P:SharpVectors.Dom.Views.IDocumentView.DefaultView">
            <summary>
            The default <see cref="T:SharpVectors.Dom.Views.IAbstractView"/> for this document, or null if none available
            </summary>
            <value>An instance of <see cref="T:SharpVectors.Dom.Views.IAbstractView"/> representing the default view.</value>
        </member>
        <member name="T:SharpVectors.Dom.XmlConstants">
            <summary>
            Contains common XML constants.
            </summary>
        </member>
        <member name="F:SharpVectors.Dom.XmlConstants.XmlNamespacePrefix">
            <summary>
            Specifies a namespace prefix.
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssRuleList">
            <summary>
            IJsCssRuleList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssRule">
            <summary>
            IJsCssRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssStyleRule">
            <summary>
            IJsCssStyleRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssMediaRule">
            <summary>
            IJsCssMediaRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssFontFaceRule">
            <summary>
            IJsCssFontFaceRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssPageRule">
            <summary>
            IJsCssPageRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssImportRule">
            <summary>
            IJsCssImportRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssCharsetRule">
            <summary>
            IJsCssCharsetRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssUnknownRule">
            <summary>
            IJsCssUnknownRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssStyleDeclaration">
            <summary>
            IJsCssStyleDeclaration
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssValue">
            <summary>
            IJsCssValue
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssPrimitiveValue">
            <summary>
            IJsCssPrimitiveValue
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssValueList">
            <summary>
            IJsCssValueList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsRgbColor">
            <summary>
            IJsRgbColor
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsRect">
            <summary>
            IJsRect
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCounter">
            <summary>
            IJsCounter
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsElementCssInlineStyle">
            <summary>
            IJsElementCssInlineStyle
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCssStyleSheet">
            <summary>
            IJsCssStyleSheet
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsViewCss">
            <summary>
            IJsViewCss
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsDocumentCss">
            <summary>
            IJsDocumentCss
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsDomImplementationCss">
            <summary>
            IJsDomImplementationCss
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsDomTimeStamp">
            <summary>
            IJsDomTimeStamp
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsDomImplementation">
            <summary>
            IJsDomImplementation
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsNode">
            <summary>
            IJsNode
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsNodeList">
            <summary>
            IJsNodeList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsNamedNodeMap">
            <summary>
            IJsNamedNodeMap
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCharacterData">
            <summary>
            IJsCharacterData
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsAttr">
            <summary>
            IJsAttr
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsElement">
            <summary>
            IJsElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsText">
            <summary>
            IJsText
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsComment">
            <summary>
            IJsComment
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsCDataSection">
            <summary>
            IJsCDataSection
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsDocumentType">
            <summary>
            IJsDocumentType
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsNotation">
            <summary>
            IJsNotation
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsEntity">
            <summary>
            IJsEntity
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsEntityReference">
            <summary>
            IJsEntityReference
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsProcessingInstruction">
            <summary>
            IJsProcessingInstruction
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsDocumentFragment">
            <summary>
            IJsDocumentFragment
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsDocument">
            <summary>
            IJsDocument
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsEventTarget">
            <summary>
            IJsEventTarget
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsEventListener">
            <summary>
            IJsEventListener
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsEvent">
            <summary>
            IJsEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsDocumentEvent">
            <summary>
            IJsDocumentEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsUiEvent">
            <summary>
            IJsUiEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsMouseEvent">
            <summary>
            IJsMouseEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsMutationEvent">
            <summary>
            IJsMutationEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsElementTimeControl">
            <summary>
            IJsElementTimeControl
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsTimeEvent">
            <summary>
            IJsTimeEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsStyleSheet">
            <summary>
            IJsStyleSheet
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsStyleSheetList">
            <summary>
            IJsStyleSheetList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsMediaList">
            <summary>
            IJsMediaList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsLinkStyle">
            <summary>
            IJsLinkStyle
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsDocumentStyle">
            <summary>
            IJsDocumentStyle
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgElement">
            <summary>
            IJsSvgElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedBoolean">
            <summary>
            IJsSvgAnimatedBoolean
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedString">
            <summary>
            IJsSvgAnimatedString
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgStringList">
            <summary>
            IJsSvgStringList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedEnumeration">
            <summary>
            IJsSvgAnimatedEnumeration
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedInteger">
            <summary>
            IJsSvgAnimatedInteger
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgNumber">
            <summary>
            IJsSvgNumber
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedNumber">
            <summary>
            IJsSvgAnimatedNumber
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgNumberList">
            <summary>
            IJsSvgNumberList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedNumberList">
            <summary>
            IJsSvgAnimatedNumberList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgLength">
            <summary>
            IJsSvgLength
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedLength">
            <summary>
            IJsSvgAnimatedLength
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgLengthList">
            <summary>
            IJsSvgLengthList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedLengthList">
            <summary>
            IJsSvgAnimatedLengthList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAngle">
            <summary>
            IJsSvgAngle
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedAngle">
            <summary>
            IJsSvgAnimatedAngle
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgColor">
            <summary>
            IJsSvgColor
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgIccColor">
            <summary>
            IJsSvgIccColor
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgRect">
            <summary>
            IJsSvgRect
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedRect">
            <summary>
            IJsSvgAnimatedRect
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgUnitTypes">
            <summary>
            IJsSvgUnitTypes
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgStylable">
            <summary>
            IJsSvgStylable
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgLocatable">
            <summary>
            IJsSvgLocatable
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgTransformable">
            <summary>
            IJsSvgTransformable
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgTests">
            <summary>
            IJsSvgTests
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgLangSpace">
            <summary>
            IJsSvgLangSpace
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgExternalResourcesRequired">
            <summary>
            IJsSvgExternalResourcesRequired
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFitToViewBox">
            <summary>
            IJsSvgFitToViewBox
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgZoomAndPan">
            <summary>
            IJsSvgZoomAndPan
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgViewSpec">
            <summary>
            IJsSvgViewSpec
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgUriReference">
            <summary>
            IJsSvgUriReference
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgCssRule">
            <summary>
            IJsSvgCssRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgRenderingIntent">
            <summary>
            IJsSvgRenderingIntent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgDocument">
            <summary>
            IJsSvgDocument
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgSvgElement">
            <summary>
            IJsSvgSvgElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgGElement">
            <summary>
            IJsSvgGElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgDefsElement">
            <summary>
            IJsSvgDefsElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgDescElement">
            <summary>
            IJsSvgDescElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgTitleElement">
            <summary>
            IJsSvgTitleElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgSymbolElement">
            <summary>
            IJsSvgSymbolElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgUseElement">
            <summary>
            IJsSvgUseElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgElementInstance">
            <summary>
            IJsSvgElementInstance
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgElementInstanceList">
            <summary>
            IJsSvgElementInstanceList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgImageElement">
            <summary>
            IJsSvgImageElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgSwitchElement">
            <summary>
            IJsSvgSwitchElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsGetSvgDocument">
            <summary>
            IJsGetSvgDocument
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgStyleElement">
            <summary>
            IJsSvgStyleElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPoint">
            <summary>
            IJsSvgPoint
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPointList">
            <summary>
            IJsSvgPointList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgMatrix">
            <summary>
            IJsSvgMatrix
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgTransform">
            <summary>
            IJsSvgTransform
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgTransformList">
            <summary>
            IJsSvgTransformList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedTransformList">
            <summary>
            IJsSvgAnimatedTransformList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPreserveAspectRatio">
            <summary>
            IJsSvgPreserveAspectRatio
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedPreserveAspectRatio">
            <summary>
            IJsSvgAnimatedPreserveAspectRatio
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSeg">
            <summary>
            IJsSvgPathSeg
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSeg`1">
            <summary>
            IJsSvgPathSeg
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegClosePath">
            <summary>
            IJsSvgPathSegClosePath
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegMovetoAbs">
            <summary>
            IJsSvgPathSegMovetoAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegMovetoRel">
            <summary>
            IJsSvgPathSegMovetoRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegLinetoAbs">
            <summary>
            IJsSvgPathSegLinetoAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegLinetoRel">
            <summary>
            IJsSvgPathSegLinetoRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegCurvetoCubicAbs">
            <summary>
            IJsSvgPathSegCurvetoCubicAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegCurvetoCubicRel">
            <summary>
            IJsSvgPathSegCurvetoCubicRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegCurvetoQuadraticAbs">
            <summary>
            IJsSvgPathSegCurvetoQuadraticAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegCurvetoQuadraticRel">
            <summary>
            IJsSvgPathSegCurvetoQuadraticRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegArcAbs">
            <summary>
            IJsSvgPathSegArcAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegArcRel">
            <summary>
            IJsSvgPathSegArcRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegLinetoHorizontalAbs">
            <summary>
            IJsSvgPathSegLinetoHorizontalAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegLinetoHorizontalRel">
            <summary>
            IJsSvgPathSegLinetoHorizontalRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegLinetoVerticalAbs">
            <summary>
            IJsSvgPathSegLinetoVerticalAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegLinetoVerticalRel">
            <summary>
            IJsSvgPathSegLinetoVerticalRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegCurvetoCubicSmoothAbs">
            <summary>
            IJsSvgPathSegCurvetoCubicSmoothAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegCurvetoCubicSmoothRel">
            <summary>
            IJsSvgPathSegCurvetoCubicSmoothRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegCurvetoQuadraticSmoothAbs">
            <summary>
            IJsSvgPathSegCurvetoQuadraticSmoothAbs
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegCurvetoQuadraticSmoothRel">
            <summary>
            IJsSvgPathSegCurvetoQuadraticSmoothRel
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathSegList">
            <summary>
            IJsSvgPathSegList
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedPathData">
            <summary>
            IJsSvgAnimatedPathData
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPathElement">
            <summary>
            IJsSvgPathElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgRectElement">
            <summary>
            IJsSvgRectElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgCircleElement">
            <summary>
            IJsSvgCircleElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgEllipseElement">
            <summary>
            IJsSvgEllipseElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgLineElement">
            <summary>
            IJsSvgLineElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimatedPoints">
            <summary>
            IJsSvgAnimatedPoints
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPolylineElement">
            <summary>
            IJsSvgPolylineElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPolygonElement">
            <summary>
            IJsSvgPolygonElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgTextContentElement">
            <summary>
            IJsSvgTextContentElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgTextPositioningElement">
            <summary>
            IJsSvgTextPositioningElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgTextElement">
            <summary>
            IJsSvgTextElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgTSpanElement">
            <summary>
            IJsSvgTSpanElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgTRefElement">
            <summary>
            IJsSvgTRefElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgTextPathElement">
            <summary>
            IJsSvgTextPathElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAltGlyphElement">
            <summary>
            IJsSvgAltGlyphElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAltGlyphDefElement">
            <summary>
            IJsSvgAltGlyphDefElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAltGlyphItemElement">
            <summary>
            IJsSvgAltGlyphItemElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgGlyphRefElement">
            <summary>
            IJsSvgGlyphRefElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPaint">
            <summary>
            IJsSvgPaint
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgMarkerElement">
            <summary>
            IJsSvgMarkerElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgColorProfileElement">
            <summary>
            IJsSvgColorProfileElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgColorProfileRule">
            <summary>
            IJsSvgColorProfileRule
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgGradientElement">
            <summary>
            IJsSvgGradientElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgLinearGradientElement">
            <summary>
            IJsSvgLinearGradientElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgRadialGradientElement">
            <summary>
            IJsSvgRadialGradientElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgStopElement">
            <summary>
            IJsSvgStopElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgPatternElement">
            <summary>
            IJsSvgPatternElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgClipPathElement">
            <summary>
            IJsSvgClipPathElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgMaskElement">
            <summary>
            IJsSvgMaskElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFilterElement">
            <summary>
            IJsSvgFilterElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFilterPrimitiveStandardAttributes">
            <summary>
            IJsSvgFilterPrimitiveStandardAttributes
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEBlendElement">
            <summary>
            IJsSvgFEBlendElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEColorMatrixElement">
            <summary>
            IJsSvgFEColorMatrixElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEComponentTransferElement">
            <summary>
            IJsSvgFEComponentTransferElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgComponentTransferFunctionElement">
            <summary>
            IJsSvgComponentTransferFunctionElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEFuncRElement">
            <summary>
            IJsSvgFEFuncRElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEFuncGElement">
            <summary>
            IJsSvgFEFuncGElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEFuncBElement">
            <summary>
            IJsSvgFEFuncBElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEFuncAElement">
            <summary>
            IJsSvgFEFuncAElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFECompositeElement">
            <summary>
            IJsSvgFECompositeElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEConvolveMatrixElement">
            <summary>
            IJsSvgFEConvolveMatrixElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEDiffuseLightingElement">
            <summary>
            IJsSvgFEDiffuseLightingElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEDistantLightElement">
            <summary>
            IJsSvgFEDistantLightElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEPointLightElement">
            <summary>
            IJsSvgFEPointLightElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFESpotLightElement">
            <summary>
            IJsSvgFESpotLightElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEDisplacementMapElement">
            <summary>
            IJsSvgFEDisplacementMapElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEFloodElement">
            <summary>
            IJsSvgFEFloodElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEGaussianBlurElement">
            <summary>
            IJsSvgFEGaussianBlurElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEImageElement">
            <summary>
            IJsSvgFEImageElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEMergeElement">
            <summary>
            IJsSvgFEMergeElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEMergeNodeElement">
            <summary>
            IJsSvgFEMergeNodeElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEMorphologyElement">
            <summary>
            IJsSvgFEMorphologyElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFEOffsetElement">
            <summary>
            IJsSvgFEOffsetElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFESpecularLightingElement">
            <summary>
            IJsSvgFESpecularLightingElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFETileElement">
            <summary>
            IJsSvgFETileElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFETurbulenceElement">
            <summary>
            IJsSvgFETurbulenceElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgCursorElement">
            <summary>
            IJsSvgCursorElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAElement">
            <summary>
            IJsSvgAElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgViewElement">
            <summary>
            IJsSvgViewElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgScriptElement">
            <summary>
            IJsSvgScriptElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgEvent">
            <summary>
            IJsSvgEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgZoomEvent">
            <summary>
            IJsSvgZoomEvent
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimationElement">
            <summary>
            IJsSvgAnimationElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimateElement">
            <summary>
            IJsSvgAnimateElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgSetElement">
            <summary>
            IJsSvgSetElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimateMotionElement">
            <summary>
            IJsSvgAnimateMotionElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgMPathElement">
            <summary>
            IJsSvgMPathElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimateColorElement">
            <summary>
            IJsSvgAnimateColorElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgAnimateTransformElement">
            <summary>
            IJsSvgAnimateTransformElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFontElement">
            <summary>
            IJsSvgFontElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgGlyphElement">
            <summary>
            IJsSvgGlyphElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgMissingGlyphElement">
            <summary>
            IJsSvgMissingGlyphElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgHKernElement">
            <summary>
            IJsSvgHKernElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgVKernElement">
            <summary>
            IJsSvgVKernElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFontFaceElement">
            <summary>
            IJsSvgFontFaceElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFontFaceSrcElement">
            <summary>
            IJsSvgFontFaceSrcElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFontFaceUriElement">
            <summary>
            IJsSvgFontFaceUriElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFontFaceFormatElement">
            <summary>
            IJsSvgFontFaceFormatElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgFontFaceNameElement">
            <summary>
            IJsSvgFontFaceNameElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgDefinitionSrcElement">
            <summary>
            IJsSvgDefinitionSrcElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgMetadataElement">
            <summary>
            IJsSvgMetadataElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgForeignObjectElement">
            <summary>
            IJsSvgForeignObjectElement
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsAbstractView">
            <summary>
            IJsAbstractView
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsDocumentView">
            <summary>
            IJsDocumentView
            </summary>
        </member>
        <member name="T:SharpVectors.Scripting.IJsSvgWindow">
            <summary>
            IJsSvgWindow
            </summary>
        </member>
        <member name="T:SharpVectors.TryCast">
            <summary>
            A helper class that converts between types using a combination of implicit and user-defined conversions.
            </summary>
        </member>
        <member name="M:SharpVectors.TryCast.Cast``2(``0,``1@)">
            <summary>
            Converts between types using a combination of implicit and user-defined conversions.
            </summary>
            <typeparam name="B">The type from which to convert.</typeparam>
            <typeparam name="D">The type to which to convert the object.</typeparam>
            <param name="baseObject">The object to convert.</param>
            <param name="derivedObject">An object whose type at run time is the requested target type.</param>
            <returns>This returns <see lanword="true"/> if the conversion is successful; otherwise, <see lanword="false"/>.</returns>
        </member>
        <member name="T:SharpVectors.DynamicCast">
            <summary>
            A helper class that safely converts pointers and references to classes up, down, and sideways along the inheritance hierarchy.
            </summary>
        </member>
        <member name="M:SharpVectors.DynamicCast.Cast``2(``0,``1@)">
            <summary>
            Safely converts pointers and references to classes up, down, and sideways along the inheritance hierarchy.
            </summary>
            <typeparam name="B">The type from which to convert.</typeparam>
            <typeparam name="D">The type to which to convert the object.</typeparam>
            <param name="baseObject">The object to convert.</param>
            <param name="derivedObject">An object whose type at run time is the requested target type.</param>
            <returns>This returns <see lanword="true"/> if the conversion is successful; otherwise, <see lanword="false"/>.</returns>
        </member>
        <member name="T:SharpVectors.Net.CacheInfo">
            <summary>
            A class encapsulating the caching information of the HTTP responses.
            </summary>
        </member>
        <member name="M:SharpVectors.Net.CacheInfo.#ctor(System.DateTime,System.String,System.DateTime,System.Uri,System.String)">
            <summary>
            Initializes an instance of the <see cref="T:SharpVectors.Net.CacheInfo"/> class with the specified parameters.
            </summary>
            <param name="expires">This specifies the date and time after which the accompanying body data should be considered stale.</param>
            <param name="etag">A value which specifies the current value for the requested variant.</param>
            <param name="lastModified">A value which specifies the date and time at which the accompanying body data was last modified.</param>
            <param name="cachedUri">A value specifying the cached URI.</param>
            <param name="contentType">A value which specifies the MIME type of the accompanying body data.</param>
        </member>
        <member name="P:SharpVectors.Net.CacheInfo.Expires">
            <summary>
            Gets a value which specifies the date and time after which the accompanying body data should be considered stale.
            </summary>
            <value>A <see cref="T:System.DateTime"/> specifying the expiring date and time.</value>
        </member>
        <member name="P:SharpVectors.Net.CacheInfo.CachedUri">
            <summary>
            Gets a value specifying the cached URI.
            </summary>
            <value>A <see cref="T:System.Uri"/> specifying the cached URI.</value>
        </member>
        <member name="P:SharpVectors.Net.CacheInfo.LastModified">
            <summary>
            Gets a value which specifies the date and time at which the accompanying body data was last modified.
            </summary>
            <value>A <see cref="T:System.DateTime"/> specifying the date and time at which the accompanying body data was last modified.</value>
        </member>
        <member name="P:SharpVectors.Net.CacheInfo.ETag">
            <summary>
            Gets a value which specifies the current value for the requested variant.
            </summary>
            <value>A string specifying the current value for the requested variant.</value>
        </member>
        <member name="P:SharpVectors.Net.CacheInfo.ContentType">
            <summary>
            Gets a value which specifies the MIME type of the accompanying body data.
            </summary>
            <value>A string specifying the MIME type of the accompanying body data.</value>
        </member>
        <member name="T:SharpVectors.Net.DataSecurityProtocols">
            <summary>
            A class for setting the security protocol used by the <see cref="T:System.Net.ServicePoint"/> objects managed by the <see cref="T:System.Net.ServicePointManager"/> object.
            </summary>
        </member>
        <member name="M:SharpVectors.Net.DataSecurityProtocols.Initialize">
            <summary>
            This sets the security protocol used by the <see cref="T:System.Net.ServicePoint"/> objects managed by the <see cref="T:System.Net.ServicePointManager"/> object.
            </summary>
        </member>
        <member name="T:SharpVectors.Net.DataWebRequest">
            <summary>
            Makes a request to a Uniform Resource Identifier (URI) with support for "data" type scheme or prefix.
            </summary>
        </member>
        <member name="M:SharpVectors.Net.DataWebRequest.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:SharpVectors.Net.DataWebRequest"/> class.
            </summary>
        </member>
        <member name="M:SharpVectors.Net.DataWebRequest.#ctor(System.Uri)">
            <summary>
            Initializes an instance of the <see cref="T:SharpVectors.Net.DataWebRequest"/> class with the specified URI.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:SharpVectors.Net.DataWebRequest.Register">
            <summary>
            This registers the "data" type scheme or URI prefix. 
            </summary>
            <returns>This returns <see lanword="true"/> if the registration is successful; otherwise, <see lanword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Net.DataWebRequest.Create(System.Uri)">
            <summary>
            Initializes a new <see cref="T:System.Net.WebRequest"/> instance for the specified URI scheme.
            </summary>
            <param name="uri">A <see cref="T:System.Uri"/> containing the URI of the requested resource.</param>
            <returns>A <see cref="T:SharpVectors.Net.DataWebRequest"/> descendant for the specified URI scheme.</returns>
        </member>
        <member name="P:SharpVectors.Net.DataWebRequest.RequestUri">
            <summary>
            Gets the URI of the Internet resource associated with the request.
            </summary>
            <value>A <see cref="T:System.Uri"/> representing the resource associated with the request.</value>
        </member>
        <member name="M:SharpVectors.Net.DataWebRequest.GetResponse">
            <summary>
            This returns a response to an Internet request.
            </summary>
            <returns>A <see cref="T:SharpVectors.Net.DataWebResponse"/> containing the response to the Internet request.</returns>
        </member>
        <member name="T:SharpVectors.Net.DataWebResponse">
            <summary>
            Provides a response from a Uniform Resource Identifier (URI).
            </summary>
            <remarks>According to http://www.ietf.org/rfc/rfc2397.txt</remarks>
        </member>
        <member name="M:SharpVectors.Net.DataWebResponse.#ctor(System.Uri)">
            <summary>
            Initialize a new instance of the <see cref="T:SharpVectors.Net.DataWebResponse"/> with the specified URI.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="P:SharpVectors.Net.DataWebResponse.ContentLength">
            <summary>
            Gets the content length of data being received.
            </summary>
            <value>The number of bytes returned from the Internet resource.</value>
        </member>
        <member name="P:SharpVectors.Net.DataWebResponse.ContentEncoding">
            <summary>
            Gets the content encoding of data being received.
            </summary>
            <value>A <see cref="T:System.Text.Encoding"/> specifying the encoding. The default is <see cref="P:System.Text.Encoding.ASCII"/>.</value>
        </member>
        <member name="P:SharpVectors.Net.DataWebResponse.ContentType">
            <summary>
            Gets the content type of the data being received.
            </summary>
            <value>A string that contains the content type of the response.</value>
        </member>
        <member name="P:SharpVectors.Net.DataWebResponse.ResponseUri">
            <summary>
            Gets the URI of the Internet resource that actually responded to the request.
            </summary>
            <value>An instance of the <see cref="T:System.Uri"/> class that contains the URI of the Internet resource 
            that actually responded to the request.</value>
        </member>
        <member name="M:SharpVectors.Net.DataWebResponse.GetResponseStream">
            <summary>
            This returns the data stream from the Internet resource.
            </summary>
            <returns>An instance of the <see cref="T:System.IO.Stream"/> class for reading data from the Internet resource.</returns>
        </member>
        <member name="T:SharpVectors.Net.ExtendedHttpWebRequestCreator">
            <summary>
            This provides an implementation of the <see cref="T:System.Net.IWebRequestCreate"/> interface for creating the extended
            <see cref="T:System.Net.WebRequest"/> instances with support of custom request caching.
            </summary>
        </member>
        <member name="M:SharpVectors.Net.ExtendedHttpWebRequestCreator.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:SharpVectors.Net.ExtendedHttpWebRequestCreator"/> class.
            </summary>
        </member>
        <member name="M:SharpVectors.Net.ExtendedHttpWebRequestCreator.System#Net#IWebRequestCreate#Create(System.Uri)">
            <summary>
            Creates a <see cref="T:System.Net.WebRequest"/> instance.
            </summary>
            <param name="uri">The uniform resource identifier (URI) of the Web resource.</param>
            <returns>A <see cref="T:System.Net.WebRequest"/> instance.</returns>
        </member>
        <member name="M:SharpVectors.Net.ExtendedHttpWebRequestCreator.Create(System.Uri)">
            <summary>
            Creates a <see cref="T:SharpVectors.Net.ExtendedHttpWebRequest"/> instance.
            </summary>
            <param name="uri">The uniform resource identifier (URI) of the Web resource.</param>
            <returns>A <see cref="T:SharpVectors.Net.ExtendedHttpWebRequest"/> instance.</returns>
        </member>
        <member name="T:SharpVectors.Net.ExtendedHttpWebRequest">
            <summary>
            A class providing an extension to the <see cref="T:System.Net.WebRequest"/> class with support of a custom caching method.
            </summary>
        </member>
        <member name="M:SharpVectors.Net.ExtendedHttpWebRequest.#ctor(System.Uri)">
            <summary>
            Initializes an instance of the <see cref="T:SharpVectors.Net.ExtendedHttpWebRequest"/> class with the specified URI.
            </summary>
            <param name="uri">A value representing the resource associated with the request.</param>
        </member>
        <member name="P:SharpVectors.Net.ExtendedHttpWebRequest.RequestUri">
            <summary>
            Gets the URI of the Internet resource associated with the request.
            </summary>
            <value>A <see cref="T:System.Uri"/> representing the resource associated with the request.</value>
        </member>
        <member name="P:SharpVectors.Net.ExtendedHttpWebRequest.CacheManager">
            <summary>
            Gets or sets a class instance implementing the cache manager interface, <see cref="T:SharpVectors.Net.ICacheManager"/>.
            </summary>
            <value>An implementation of the <see cref="T:SharpVectors.Net.ICacheManager"/> interface. The default is the <see cref="T:SharpVectors.Net.NoCacheManager"/>.</value>
        </member>
        <member name="M:SharpVectors.Net.ExtendedHttpWebRequest.Register">
            <summary>
            Register the <see cref="T:System.Net.WebRequest"/> instance creation factories.
            </summary>
            <returns>This returns <see langword="true"/> if successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:SharpVectors.Net.ExtendedHttpWebRequest.GetResponse">
            <summary>
            This returns a response to an Internet request.
            </summary>
            <returns>A <see cref="T:System.Net.WebResponse"/> containing the response to the Internet request.</returns>
            <seealso cref="M:System.Net.WebRequest.GetResponse"/>
        </member>
        <member name="T:SharpVectors.Net.ExtendedHttpWebResponse">
            <summary>
            A wrapper of the <see cref="T:System.Net.WebResponse"/> class, which provides a response from a 
            Uniform Resource Identifier (URI), with support for a custom reponse caching.
            </summary>
        </member>
        <member name="M:SharpVectors.Net.ExtendedHttpWebResponse.#ctor(System.Uri,System.Net.WebResponse,System.IO.Stream,SharpVectors.Net.CacheInfo)">
            <summary>
            Initializes an instance of the <see cref="T:SharpVectors.Net.ExtendedHttpWebResponse"/> class with the specified parameters.
            </summary>
            <param name="responseUri">The URI of the Internet resource that actually responded to the request.</param>
            <param name="response">The wrapped <see cref="T:System.Net.WebResponse"/> instance, that provides a response from a Uniform Resource Identifier (URI). </param>
            <param name="responseStream">The data stream from the Internet resource.</param>
            <param name="cacheInfo">The caching information.</param>
        </member>
        <member name="M:SharpVectors.Net.ExtendedHttpWebResponse.GetResponseStream">
            <summary>
            Gets the data stream from the Internet resource.
            </summary>
            <returns>An instance of the <see cref="T:System.IO.Stream"/> class for reading data from the Internet resource.</returns>
        </member>
        <member name="P:SharpVectors.Net.ExtendedHttpWebResponse.ContentType">
            <summary>
            Gets the content type of the data being received.
            </summary>
            <value>A string that contains the content type of the response.</value>
        </member>
        <member name="P:SharpVectors.Net.ExtendedHttpWebResponse.ResponseUri">
            <summary>
            Gets the URI of the Internet resource that actually responded to the request.
            </summary>
            <value>An instance of the <see cref="T:System.Uri"/> class that contains the URI of the Internet resource that 
            actually responded to the request.</value>
        </member>
        <member name="T:SharpVectors.Net.ICacheManager">
            <summary>
            An interface that defines and manages the caching information for the extended <see cref="!:WebRequest"/> class
            used by this library.
            </summary>
        </member>
        <member name="M:SharpVectors.Net.ICacheManager.GetCacheInfo(System.Uri)">
            <summary>
            Gets the internet request cache information.
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Net.ICacheManager.SetCacheInfo(System.Uri,SharpVectors.Net.CacheInfo,System.IO.Stream)">
            <summary>
            Sets the internet request cache information.
            </summary>
            <param name="uri">The uniform resource identifier (URI) of the Web resource.</param>
            <param name="cacheInfo">The caching information for the specified URI.</param>
            <param name="stream">The internet request contents to be cached.</param>
        </member>
        <member name="T:SharpVectors.Net.NoCacheManager">
            <summary>
            An implementation of the <see cref="T:SharpVectors.Net.ICacheManager"/> interface providing no caching to internet requests.
            </summary>
        </member>
        <member name="M:SharpVectors.Net.NoCacheManager.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:SharpVectors.Net.NoCacheManager"/> class.
            </summary>
        </member>
        <member name="M:SharpVectors.Net.NoCacheManager.GetCacheInfo(System.Uri)">
            <summary>
            Get a caching information for the internet requests.
            </summary>
            <param name="uri">The uniform resource identifier (URI) of the Web resource.</param>
            <returns>This always return <see langword="null"/>, for no caching.</returns>
        </member>
        <member name="M:SharpVectors.Net.NoCacheManager.SetCacheInfo(System.Uri,SharpVectors.Net.CacheInfo,System.IO.Stream)">
            <summary>
            Sets the internet request cache information.
            </summary>
            <param name="uri">The uniform resource identifier (URI) of the Web resource.</param>
            <param name="cacheInfo">The caching information for the specified URI.</param>
            <param name="stream">The internet request contents to be cached.</param>
            <remarks>Since this provides no caching, any specified parameters are ignored.</remarks>
        </member>
        <member name="T:SharpVectors.Polynomials.Polynomial">
            <summary>
            An implemenation of a polynomial function as a vector of coefficients.
            </summary>
        </member>
        <member name="F:SharpVectors.Polynomials.Polynomial.Tolerance">
            <summary>
            The error tolerance.
            </summary>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Polynomials.Polynomial"/> class with the specified polynomial coefficients.
            </summary>
            <param name="coefficients">The polynomial function coefficients.</param>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.#ctor(SharpVectors.Polynomials.Polynomial)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Polynomials.Polynomial"/> class with an instance of the <see cref="T:SharpVectors.Polynomials.Polynomial"/> class,
            a copy constructor.
            </summary>
            <param name="that"></param>
        </member>
        <member name="P:SharpVectors.Polynomials.Polynomial.Degree">
            <summary>
            Gets a value specifying the degree of the polynomial function defined by this class.
            </summary>
            <value>An integer specifying the degree of the polynomial function.</value>
        </member>
        <member name="P:SharpVectors.Polynomials.Polynomial.Item(System.Int32)">
            <summary>
            Gets a value of the polynomial coefficient at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns></returns>
        </member>
        <member name="P:SharpVectors.Polynomials.Polynomial.Coefficients">
            <summary>
            Gets the coefficients of the polynomial.
            </summary>
            <value>An array of double specifying the coefficients.</value>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.Evaluate(System.Double)">
            <summary>
            Evaluates the current function at the given x-value.
            </summary>
            <param name="x">The position on the x-axis at which to evaluate polynomial function.</param>
            <returns>The value of the polynomial function at <paramref name="x"/>.</returns>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.Simpson(System.Double,System.Double)">
            <summary>
            Integrate the polynomial function from <paramref name="min"/> to <paramref name="min"/> using the Simspon rule.
            </summary>
            <param name="min">The lower limit of the integrate range.</param>
            <param name="max">The upper limit of the integrate range.</param>
            <returns></returns>
            <remarks>Simspon - adapted from "Numerical Recipes in C"</remarks>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.Romberg(System.Double,System.Double)">
            <summary>
            Integrate the polynomial function from <paramref name="min"/> to <paramref name="min"/> using the Romberg rule.
            </summary>
            <param name="min">The lower limit of the integrate range.</param>
            <param name="max">The upper limit of the integrate range.</param>
            <returns></returns>
            <remarks>Romberg - adapted from "Numerical Recipes in C"</remarks>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.Trapezoid(System.Double,System.Double,System.Int32)">
            <summary>
            Integrate the polynomial function from <paramref name="min"/> to <paramref name="min"/> using the trapezoidal rule.
            </summary>
            <param name="min">The lower limit of the integrate range.</param>
            <param name="max">The upper limit of the integrate range.</param>
            <param name="n">The number of trapezoid.</param>
            <returns>The computed numerical integration result over the specified interval.</returns>
            <remarks>trapezoid - adapted from "Numerical Recipes in C"</remarks>
        </member>
        <member name="M:SharpVectors.Polynomials.Polynomial.Interpolate(System.Double[],System.Double[],System.Int32,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="xs"></param>
            <param name="ys"></param>
            <param name="n"></param>
            <param name="offset"></param>
            <param name="x"></param>
            <returns></returns>
            <remarks>Interpolate - adapted from "Numerical Recipes in C".</remarks>
        </member>
        <member name="T:SharpVectors.Polynomials.SqrtPolynomial">
            <summary>
            This class overrides Polynomial's evaluate method to return the square root of that value.
            We need to integrate the square root of a polynomial when finding the arc length of a Bezier curve.
            </summary>
        </member>
        <member name="M:SharpVectors.Polynomials.SqrtPolynomial.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Polynomials.SqrtPolynomial"/> class with the specified polynomial coefficients.
            </summary>
            <param name="coefficients">The polynomial function coefficients.</param>
        </member>
        <member name="M:SharpVectors.Polynomials.SqrtPolynomial.Evaluate(System.Double)">
            <summary>
            Evaluates the current function at the given x-value.
            </summary>
            <param name="x">The position on the x-axis at which to evaluate polynomial function.</param>
            <returns>The value of the polynomial function at <paramref name="x"/>.</returns>
        </member>
        <member name="T:SharpVectors.Xml.DynamicXmlNamespaceManager">
            <summary>
            XML namespace manager allowing to fire events when namespace is not found
            </summary>
        </member>
        <member name="T:SharpVectors.Xml.DynamicXmlNamespaceManager.ResolveEventHandler">
            <summary>
            Event handler type
            </summary>
        </member>
        <member name="E:SharpVectors.Xml.DynamicXmlNamespaceManager.Resolve">
            <summary>
            Occurs when trying to resolve an unknown namespace.
            </summary>
        </member>
        <member name="M:SharpVectors.Xml.DynamicXmlNamespaceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Xml.DynamicXmlNamespaceManager"/> class.
            </summary>
        </member>
        <member name="M:SharpVectors.Xml.DynamicXmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Xml.DynamicXmlNamespaceManager"/> class.
            </summary>
            <param name="xmlNameTable">The XML name table.</param>
        </member>
        <member name="M:SharpVectors.Xml.DynamicXmlNamespaceManager.LookupNamespace(System.String)">
            <summary>
            Gets the namespace URI for the specified prefix.
            </summary>
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, 
            pass <see cref="F:System.String.Empty"/>.</param>
            <returns>
            Returns the namespace URI for <paramref name="prefix"/> or <see langword="null"/> if there is no mapped namespace. 
            The returned string is atomized. For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable"/>.
            </returns>
        </member>
        <member name="T:SharpVectors.Xml.DynamicXmlUrlResolver">
            <summary>
            Provides event-based interface to resolve external XML resources named by a Uniform Resource Identifier (URI).
            </summary>
        </member>
        <member name="T:SharpVectors.Xml.DynamicXmlUrlResolver.ResolveEventHandler">
            <summary>
            Event handler type
            </summary>
        </member>
        <member name="T:SharpVectors.Xml.DynamicXmlUrlResolver.GettingEntityEventHandler">
            <summary>
            Fires when GetEntity is called
            </summary>
        </member>
        <member name="E:SharpVectors.Xml.DynamicXmlUrlResolver.Resolving">
            <summary>
            Occurs when trying to resolve an Uri.
            </summary>
        </member>
        <member name="E:SharpVectors.Xml.DynamicXmlUrlResolver.GettingEntity">
            <summary>
            Occurs when getting entity.
            </summary>
        </member>
        <member name="M:SharpVectors.Xml.DynamicXmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Maps a URI to an object that contains the actual resource.
            </summary>
            <param name="absoluteUri">The URI returned from <see cref="M:SharpVectors.Xml.DynamicXmlUrlResolver.ResolveUri(System.Uri,System.String)"/>.</param>
            <param name="role">Currently not used.</param>
            <param name="ofObjectToReturn">The type of object to return. The current implementation only returns <see cref="T:System.IO.Stream"/> objects.</param>
            <returns>A stream object or <see langword="null"/> if a type other than stream is specified.</returns>
        </member>
        <member name="M:SharpVectors.Xml.DynamicXmlUrlResolver.ResolveUri(System.Uri,System.String)">
            <summary>
            Resolves the absolute URI from the base and relative URIs.
            </summary>
            <param name="baseUri">The base URI used to resolve the relative URI.</param>
            <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. 
            If absolute, this value effectively replaces the <paramref name="baseUri"/> value. 
            If relative, it combines with the <paramref name="baseUri"/> to make an absolute URI.</param>
            <returns>
            A <see cref="T:System.Uri"/> representing the absolute URI, or <see langword="null"/> if the relative URI cannot be resolved.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="baseUri"/>is null or <paramref name="relativeUri"/> is null</exception>
        </member>
        <member name="T:SharpVectors.Xml.LocalDtdXmlUrlResolver">
            <summary>
            Used to redirect external DTDs to local copies.
            </summary>
        </member>
        <member name="M:SharpVectors.Xml.LocalDtdXmlUrlResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Xml.LocalDtdXmlUrlResolver"/> class.
            </summary>
        </member>
        <member name="M:SharpVectors.Xml.LocalDtdXmlUrlResolver.AddDtd(System.String,System.String)">
            <summary>
            This adds local DTD file with the specified public identifier on the entity.
            </summary>
            <param name="publicIdentifier">The public identifier on the entity.</param>
            <param name="localFile">A full path to the local DTD file.</param>
        </member>
        <member name="M:SharpVectors.Xml.LocalDtdXmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Maps a URI to an object that contains the actual resource.
            </summary>
            <param name="absoluteUri">The URI returned from <see cref="M:SharpVectors.Xml.LocalDtdXmlUrlResolver.ResolveUri(System.Uri,System.String)"/>.</param>
            <param name="role">Currently not used.</param>
            <param name="ofObjectToReturn">The type of object to return. The current implementation only returns <see cref="T:System.IO.Stream"/> objects.</param>
            <returns>A stream object or <see langword="null"/> if a type other than stream is specified.</returns>
        </member>
        <member name="M:SharpVectors.Xml.LocalDtdXmlUrlResolver.ResolveUri(System.Uri,System.String)">
            <summary>
            Resolves the absolute URI from the base and relative URIs.
            </summary>
            <param name="baseUri">The base URI used to resolve the relative URI.</param>
            <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. 
            If absolute, this value effectively replaces the <paramref name="baseUri"/> value. 
            If relative, it combines with the <paramref name="baseUri"/> to make an absolute URI.</param>
            <returns>
            A <see cref="T:System.Uri"/> representing the absolute URI, or <see langword="null"/> if the relative URI cannot be resolved.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="baseUri"/>is null or <paramref name="relativeUri"/> is null</exception>
        </member>
        <member name="M:SharpVectors.Xml.UrlResolvePolicy.GetEntity(System.Uri,System.String,System.Type)">
            <summary>
            Maps a URI to an object that contains the actual resource.
            </summary>
            <param name="absoluteUri">The URI returned from <see cref="M:SharpVectors.Xml.UrlResolvePolicy.ResolveUri(System.Uri,System.String)"/>.</param>
            <param name="role">Currently not used.</param>
            <param name="ofObjectToReturn">The type of object to return. The current implementation only returns <see cref="T:System.IO.Stream"/> objects.</param>
            <returns>A stream object or <see langword="null"/> if a type other than stream is specified.</returns>
        </member>
        <member name="M:SharpVectors.Xml.UrlResolvePolicy.ResolveUri(System.Uri,System.String)">
            <summary>
            Resolves the absolute URI from the base and relative URIs.
            </summary>
            <param name="baseUri">The base URI used to resolve the relative URI.</param>
            <param name="relativeUri">The URI to resolve. The URI can be absolute or relative. 
            If absolute, this value effectively replaces the <paramref name="baseUri"/> value. 
            If relative, it combines with the <paramref name="baseUri"/> to make an absolute URI.</param>
            <returns>
            A <see cref="T:System.Uri"/> representing the absolute URI, or <see langword="null"/> if the relative URI cannot be resolved.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="baseUri"/>is null or <paramref name="relativeUri"/> is null</exception>
        </member>
    </members>
</doc>
