<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SharpVectors.Rendering.Wpf</name>
    </assembly>
    <members>
        <member name="T:SharpVectors.Renderers.ResourceModeType">
            <summary>
            A value specifying the root resource element (<see cref="T:System.Windows.Media.DrawingGroup"/>, <see cref="T:System.Windows.Media.DrawingImage"/>).
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.ResourceModeType.None">
            <summary>
            Indicates the root element is not specified.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.ResourceModeType.Drawing">
            <summary>
            Indicates the <see cref="T:System.Windows.Media.DrawingGroup"/> as the root resource element.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.ResourceModeType.Image">
            <summary>
            Indicates the <see cref="T:System.Windows.Media.DrawingImage"/> as the root resource element.
            </summary>
        </member>
        <member name="T:SharpVectors.Renderers.ResourceAccessType">
            <summary>
            A value specifying the referencing or access resource dictionary (<c>DynamicResource</c>, <c>StaticResource</c>).
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.ResourceAccessType.None">
            <summary>
            Indicates the resource referencing type is not specified.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.ResourceAccessType.Dynamic">
            <summary>
            Indicates the resource referencing is dynamic, <c>DynamicResource</c>.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.ResourceAccessType.Static">
            <summary>
            Indicates the resource referencing is static, <c>StaticResource</c>.
            </summary>
        </member>
        <member name="T:SharpVectors.Renderers.ResourceKeyResolverType">
            <summary>
            A value specifiying the resource key resolver type.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.ResourceKeyResolverType.None">
            <summary>
            Indicates an unspecified or unknown resource key resolver.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.ResourceKeyResolverType.Default">
            <summary>
            The default resource key resolver. On error, any defined resolver will fallback to the default resource resolver.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.ResourceKeyResolverType.Dictionary">
            <summary>
            A dictionary-based resource key resolver.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.ResourceKeyResolverType.CodeSnippet">
            <summary>
            A user-defined <c>C#</c> code-based callback method for resolving the resource key. 
            It is compiled and run at runtime in memory.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.ResourceKeyResolverType.Custom">
            <summary>
            A custom or user-defined resource key resolver. It implements the <see cref="T:SharpVectors.Renderers.IResourceKeyResolver"/> interface.
            </summary>
        </member>
        <member name="T:SharpVectors.Renderers.IResourceKeyResolver">
            <summary>
            An interface for resolving the resource key of a resource object (<see cref="T:System.Windows.Media.DrawingGroup"/>, <see cref="T:System.Windows.Media.DrawingImage"/>)
            generated by the resource dictionary converter.
            </summary>
        </member>
        <member name="P:SharpVectors.Renderers.IResourceKeyResolver.ResolverType">
            <summary>
            Gets a value specifying the resource key resolver type.
            </summary>
            <value>
            An enumeration of the type <see cref="T:SharpVectors.Renderers.ResourceKeyResolverType"/> specifying the type of the resource key resolver.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.IResourceKeyResolver.IsValid">
            <summary>
            Gets a value specifying whether the resource key resolver is valid or not.
            </summary>
            <value>
            This is <see langword="true"/> if the resource resolver is valid, otherwise; it is <see langword="false"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Renderers.IResourceKeyResolver.BeginResolve">
            <summary>
            This signals the start of a resource key resolving process.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.IResourceKeyResolver.EndResolve">
            <summary>
            This signals the end of a resource key resolving process.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.IResourceKeyResolver.Resolve(System.Windows.DependencyObject,System.Int32,System.String,System.String)">
            <summary>
            Generates the resource key to be applied to the specified resource object, created from the file name 
            and from the specified source (directory).
            </summary>
            <param name="resource">The target resource object (<see cref="T:System.Windows.Media.DrawingGroup"/>, <see cref="T:System.Windows.Media.DrawingImage"/>) </param>
            <param name="index">The index of the resource file.</param>
            <param name="fileName">The file name of the SVG file without the extension.</param>
            <param name="fileSource">The source directory of the SVG file.</param>
            <returns>
            A <see cref="T:System.String"/> containing the key to be used to identify the specified resource. This must be at least
            3 characters and less than 255 characters.
            </returns>
        </member>
        <member name="T:SharpVectors.Renderers.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SharpVectors.Renderers.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SharpVectors.Renderers.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:SharpVectors.Renderers.ResourceKeyResolver">
            <summary>
            The default implememation of the <see cref="T:SharpVectors.Renderers.IResourceKeyResolver"/> interface. It implementations the default
            method of resolving the resource key; either by the unmodified SVG file name, or a formatted name using the file
            name and/or resource index if a format string is provided.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.ResourceKeyResolver.ReadXml(System.Xml.XmlReader)">
            <summary>
            This reads and sets its state or attributes stored in a <c>XML</c> format
            with the given reader. 
            </summary>
            <param name="reader">
            The reader with which the <c>XML</c> attributes of this object are accessed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpVectors.Renderers.ResourceKeyResolver.WriteXml(System.Xml.XmlWriter)">
            <summary>
            This writes the current state or attributes of this object,
            in the <c>XML</c> format, to the media or storage accessible by the given writer.
            </summary>
            <param name="writer">
            The <c>XML</c> writer with which the <c>XML</c> format of this object's state 
            is written.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:SharpVectors.Renderers.ResourceKeyResolver.ResolverType">
            <summary>
            Gets a value specifying the resource key resolver type.
            </summary>
            <value>
            An enumeration of the type <see cref="T:SharpVectors.Renderers.ResourceKeyResolverType"/> specifying the type of the resource key resolver.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.ResourceKeyResolver.IsValid">
            <summary>
            Gets a value specifying whether the resource key resolver is valid or not.
            </summary>
            <value>
            This is <see langword="true"/> if the resource resolver is valid, otherwise; it is <see langword="false"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Renderers.ResourceKeyResolver.BeginResolve">
            <summary>
            This signals the start of a resource key resolving process.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.ResourceKeyResolver.EndResolve">
            <summary>
            This signals the end of a resource key resolving process.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.ResourceKeyResolver.Resolve(System.Windows.DependencyObject,System.Int32,System.String,System.String)">
            <summary>
            Generates the resource key to be applied to the specified resource object, created from the file name 
            and from the specified source (directory).
            </summary>
            <param name="resource">The target resource object (<see cref="T:System.Windows.Media.DrawingGroup"/>, <see cref="T:System.Windows.Media.DrawingImage"/>) </param>
            <param name="index">The index of the resource file.</param>
            <param name="fileName">The file name of the SVG file without the extension.</param>
            <param name="fileSource">The source directory of the SVG file.</param>
            <returns>
            A <see cref="T:System.String"/> containing the key to be used to identify the specified resource. This must be at least
            3 characters and less than 255 characters.
            </returns>
        </member>
        <member name="M:SharpVectors.Renderers.DictionaryKeyResolver.ReadXml(System.Xml.XmlReader)">
            <summary>
            This reads and sets its state or attributes stored in a <c>XML</c> format
            with the given reader. 
            </summary>
            <param name="reader">
            The reader with which the <c>XML</c> attributes of this object are accessed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpVectors.Renderers.DictionaryKeyResolver.WriteXml(System.Xml.XmlWriter)">
            <summary>
            This writes the current state or attributes of this object,
            in the <c>XML</c> format, to the media or storage accessible by the given writer.
            </summary>
            <param name="writer">
            The <c>XML</c> writer with which the <c>XML</c> format of this object's state 
            is written.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:SharpVectors.Renderers.DictionaryKeyResolver.ResolverType">
            <summary>
            Gets a value specifying the resource key resolver type.
            </summary>
            <value>
            An enumeration of the type <see cref="T:SharpVectors.Renderers.ResourceKeyResolverType"/> specifying the type of the resource key resolver.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.DictionaryKeyResolver.IsValid">
            <summary>
            Gets a value specifying whether the resource key resolver is valid or not.
            </summary>
            <value>
            This is <see langword="true"/> if the resource resolver is valid, otherwise; it is <see langword="false"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Renderers.DictionaryKeyResolver.BeginResolve">
            <summary>
            This signals the start of a resource key resolving process.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.DictionaryKeyResolver.EndResolve">
            <summary>
            This signals the end of a resource key resolving process.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.DictionaryKeyResolver.Resolve(System.Windows.DependencyObject,System.Int32,System.String,System.String)">
            <summary>
            Generates the resource key to be applied to the specified resource object, created from the file name 
            and from the specified source (directory).
            </summary>
            <param name="resource">The target resource object (<see cref="T:System.Windows.Media.DrawingGroup"/>, <see cref="T:System.Windows.Media.DrawingImage"/>) </param>
            <param name="index">The index of the resource file.</param>
            <param name="fileName">The file name of the SVG file without the extension.</param>
            <param name="fileSource">The source directory of the SVG file.</param>
            <returns>
            A <see cref="T:System.String"/> containing the key to be used to identify the specified resource. This must be at least
            3 characters and less than 255 characters.
            </returns>
        </member>
        <member name="M:SharpVectors.Renderers.CodeSnippetKeyResolver.ReadXml(System.Xml.XmlReader)">
            <summary>
            This reads and sets its state or attributes stored in a <c>XML</c> format
            with the given reader. 
            </summary>
            <param name="reader">
            The reader with which the <c>XML</c> attributes of this object are accessed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpVectors.Renderers.CodeSnippetKeyResolver.WriteXml(System.Xml.XmlWriter)">
            <summary>
            This writes the current state or attributes of this object,
            in the <c>XML</c> format, to the media or storage accessible by the given writer.
            </summary>
            <param name="writer">
            The <c>XML</c> writer with which the <c>XML</c> format of this object's state 
            is written.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:SharpVectors.Renderers.CodeSnippetKeyResolver.ResolverType">
            <summary>
            Gets a value specifying the resource key resolver type.
            </summary>
            <value>
            An enumeration of the type <see cref="T:SharpVectors.Renderers.ResourceKeyResolverType"/> specifying the type of the resource key resolver.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.CodeSnippetKeyResolver.IsValid">
            <summary>
            Gets a value specifying whether the resource key resolver is valid or not.
            </summary>
            <value>
            This is <see langword="true"/> if the resource resolver is valid, otherwise; it is <see langword="false"/>.
            </value>
        </member>
        <member name="M:SharpVectors.Renderers.CodeSnippetKeyResolver.BeginResolve">
            <summary>
            This signals the start of a resource key resolving process.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.CodeSnippetKeyResolver.EndResolve">
            <summary>
            This signals the end of a resource key resolving process.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.CodeSnippetKeyResolver.Resolve(System.Windows.DependencyObject,System.Int32,System.String,System.String)">
            <summary>
            Generates the resource key to be applied to the specified resource object, created from the file name 
            and from the specified source (directory).
            </summary>
            <param name="resource">The target resource object (<see cref="T:System.Windows.Media.DrawingGroup"/>, <see cref="T:System.Windows.Media.DrawingImage"/>) </param>
            <param name="index">The index of the resource file.</param>
            <param name="fileName">The file name of the SVG file without the extension.</param>
            <param name="fileSource">The source directory of the SVG file.</param>
            <returns>
            A <see cref="T:System.String"/> containing the key to be used to identify the specified resource. This must be at least
            3 characters and less than 255 characters.
            </returns>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.IsBoldSimulated">
            <summary>
            Gets a value that determines whether to simulate a bold weight for the glyphs represented by the typeface.
            </summary>
            <value>true if bold simulation is used for glyphs; otherwise, false.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.IsObliqueSimulated">
            <summary>
            Gets a value that determines whether to simulate an italic style for the glyphs represented by the typeface.
            </summary>
            <value>true if italic simulation is used for glyphs; otherwise, false.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.StrikethroughPosition">
            <summary>
            Gets a value that indicates the distance from the baseline to the strikethrough for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the strikethrough position, measured from the baseline and expressed 
            as a fraction of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.StrikethroughThickness">
            <summary>
            Gets a value that indicates the thickness of the strikethrough relative to the font em size.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the strikethrough thickness, expressed as a fraction 
            of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.UnderlinePosition">
            <summary>
            Gets a value that indicates the distance of the underline from the baseline for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the underline position, measured from the baseline 
            and expressed as a fraction of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.UnderlineThickness">
            <summary>
            Gets a value that indicates the thickness of the underline relative to the font em size for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the underline thickness, expressed as a fraction 
            of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.OverlinePosition">
            <summary>
            Gets a value that indicates the distance of the overline from the baseline for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the overline position, measured from the baseline 
            and expressed as a fraction of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.OverlineThickness">
            <summary>
            Gets a value that indicates the thickness of the overline relative to the font em size for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the overline thickness, expressed as a fraction 
            of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.XHeight">
            <summary>
            Gets the distance from the baseline to the top of an English lowercase letter for a typeface. 
            The distance excludes ascenders.
            </summary>
            <value>
            A <see cref="T:System.Double"/> that indicates the distance from the baseline to the top of an
            English lowercase letter (excluding ascenders), expressed as a fraction of the font em size.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.BidiLevel">
            <summary>
            Gets or sets the bidirectional nesting level of Glyphs.
            </summary>
            <value>An <see cref="T:System.Int32"/> value that represents the bidirectional nesting level.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.DeviceFontName">
            <summary>
            Gets or sets the specific device font for which the Glyphs object has been optimized.
            </summary>
            <value>A <see cref="T:System.String"/> value that represents the name of the device font.</value>
        </member>
        <member name="M:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.ParseGlyphRunProperties">
            <SecurityNote>
             Critical as it accesses the base Uri
             TreatAsSafe as it only uses this to load glyphtypefaces, and this information is not disclosed.
            </SecurityNote>
        </member>
        <member name="M:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.ReadGlyphIndex(System.String,System.Boolean@,System.Int32@,System.Int32@,System.UInt16@)">
            <summary>
            Read GlyphIndex specification - glyph index value with an optional glyph cluster prefix.
            </summary>
            <param name="valueSpec"></param>
            <param name="inCluster"></param>
            <param name="glyphClusterSize"></param>
            <param name="characterClusterSize"></param>
            <param name="glyphIndex"></param>
            <returns>true if glyph index is present, false if glyph index is not present.</returns>
        </member>
        <member name="M:SharpVectors.Renderers.Texts.WpfGlyphTextBuilder.SetClusterMapEntry(System.UInt16[],System.Int32,System.UInt16)">
            <summary>
            Performs validation against cluster map size and throws a well defined exception.
            </summary>
        </member>
        <member name="T:SharpVectors.Renderers.Texts.WpfPathTextBuilder">
            <summary>
            This is the text-path builder, which handles the rendering using the text-builder objects, 
            <see cref="T:SharpVectors.Renderers.Texts.WpfTextBuilder"/>, to convert the text characters to geometric representations.
            </summary>
        </member>
        <member name="T:SharpVectors.Renderers.Texts.WpfPathTextRun">
            <summary>
            This defines the information required to render a text-run on a path.
            </summary>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.IsBoldSimulated">
            <summary>
            Gets a value that determines whether to simulate a bold weight for the glyphs represented by the typeface.
            </summary>
            <value>true if bold simulation is used for glyphs; otherwise, false.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.IsObliqueSimulated">
            <summary>
            Gets a value that determines whether to simulate an italic style for the glyphs represented by the typeface.
            </summary>
            <value>true if italic simulation is used for glyphs; otherwise, false.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.StrikethroughPosition">
            <summary>
            Gets a value that indicates the distance from the baseline to the strikethrough for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the strikethrough position, measured from the baseline and expressed 
            as a fraction of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.StrikethroughThickness">
            <summary>
            Gets a value that indicates the thickness of the strikethrough relative to the font em size.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the strikethrough thickness, expressed as a fraction 
            of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.UnderlinePosition">
            <summary>
            Gets a value that indicates the distance of the underline from the baseline for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the underline position, measured from the baseline 
            and expressed as a fraction of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.UnderlineThickness">
            <summary>
            Gets a value that indicates the thickness of the underline relative to the font em size for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the underline thickness, expressed as a fraction 
            of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.OverlinePosition">
            <summary>
            Gets a value that indicates the distance of the overline from the baseline for the typeface.
            </summary>
            <value>A <see cref="T:System.Single"/> that indicates the overline position, measured from the baseline 
            and expressed as a fraction of the font em size.</value>
            <remarks>attribute name = "overline-position" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.OverlineThickness">
            <summary>
            Gets a value that indicates the thickness of the overline relative to the font em size for the typeface.
            </summary>
            <value>A <see cref="T:System.Single"/> that indicates the overline thickness, expressed as a fraction 
            of the font em size.</value>
            <remarks>attribute name = "overline-thickness" {number}</remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.XHeight">
            <summary>
            Gets the distance from the baseline to the top of an English lowercase letter for a typeface. 
            The distance excludes ascenders.
            </summary>
            <value>
            A <see cref="T:System.Double"/> that indicates the distance from the baseline to the top of an
            English lowercase letter (excluding ascenders), expressed as a fraction of the font em size.
            </value>
        </member>
        <member name="M:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.SvgAttributedTextIterator.IsArabicCharTransparent(System.Char)">
            <summary>
            Returns true if the char is transparent.
            </summary>
            <param name="c"> The character to test. </param>
            <returns> True if the character is transparent, false otherwise. </returns>
        </member>
        <member name="M:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.SvgAttributedTextIterator.IsArabicCharShapesRight(System.Char)">
            <summary>
            Returns true if the character shapes to the right. Note that duel
            shaping characters also shape to the right and so will return true.
            </summary>
            <param name="c"> The character to test. </param>
            <returns> True if the character shapes to the right, false otherwise. </returns>
        </member>
        <member name="M:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.SvgAttributedTextIterator.IsArabicCharShapesDuel(System.Char)">
            <summary>
            Returns true if character has duel shaping.
            </summary>
            <param name="c"> The character to test. </param>
            <returns> True if the character is duel shaping, false otherwise. </returns>
        </member>
        <member name="M:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.SvgAttributedTextIterator.IsArabicCharShapesLeft(System.Char)">
            <summary>
            Returns true if character shapes to the left. Note that duel
            shaping characters also shape to the left and so will return true.
            </summary>
            <param name="c"> The character to test. </param>
            <returns> True if the character shapes to the left, false otherwise. </returns>
        </member>
        <member name="M:SharpVectors.Renderers.Texts.WpfSvgTextBuilder.SvgAttributedTextIterator.IsArabicCharShaped(System.Char)">
            <summary>
            Returns true if character is shaped.
            </summary>
            <param name="c"> The character to test. </param>
            <returns> True if the character is shaped, false otherwise. </returns>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.PixelsPerInchX">
            <summary>Gets the DPI along X axis.</summary>
            <value>The DPI along the X axis.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.PixelsPerInchY">
            <summary>Gets the DPI along Y axis.</summary>
            <value>The DPI along the Y axis.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.DpiScaleX">
            <summary>Gets the DPI scale on the X axis.</summary>
            <value>The DPI scale for the X axis.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.DpiScaleY">
            <summary>Gets the DPI scale on the Yaxis.</summary>
            <value>The DPI scale for the Y axis.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.PixelsPerDip">
            <summary>Get or sets the PixelsPerDip at which the text should be rendered.</summary>
            <value>The current PixelsPerDip value.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.IsBoldSimulated">
            <summary>
            Gets a value that determines whether to simulate a bold weight for the glyphs represented by the typeface.
            </summary>
            <value>true if bold simulation is used for glyphs; otherwise, false.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.IsObliqueSimulated">
            <summary>
            Gets a value that determines whether to simulate an italic style for the glyphs represented by the typeface.
            </summary>
            <value>true if italic simulation is used for glyphs; otherwise, false.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.StrikethroughPosition">
            <summary>
            Gets a value that indicates the distance from the baseline to the strikethrough for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the strikethrough position, measured from the baseline and expressed 
            as a fraction of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.StrikethroughThickness">
            <summary>
            Gets a value that indicates the thickness of the strikethrough relative to the font em size.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the strikethrough thickness, expressed as a fraction 
            of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.UnderlinePosition">
            <summary>
            Gets a value that indicates the distance of the underline from the baseline for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the underline position, measured from the baseline 
            and expressed as a fraction of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.UnderlineThickness">
            <summary>
            Gets a value that indicates the thickness of the underline relative to the font em size for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the underline thickness, expressed as a fraction 
            of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.OverlinePosition">
            <summary>
            Gets a value that indicates the distance of the overline from the baseline for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the overline position, measured from the baseline 
            and expressed as a fraction of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.OverlineThickness">
            <summary>
            Gets a value that indicates the thickness of the overline relative to the font em size for the typeface.
            </summary>
            <value>A <see cref="T:System.Double"/> that indicates the overline thickness, expressed as a fraction 
            of the font em size.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.XHeight">
            <summary>
            Gets the distance from the baseline to the top of an English lowercase letter for a typeface. 
            The distance excludes ascenders.
            </summary>
            <value>
            A <see cref="T:System.Double"/> that indicates the distance from the baseline to the top of an
            English lowercase letter (excluding ascenders), expressed as a fraction of the font em size.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.Baseline">
            <summary>
            Gets the distance from the top of the first line to the baseline of the first
            line of a <see cref="T:SharpVectors.Renderers.Texts.WpfTextBuilder"/> object.
            </summary>
            <value>
            The distance from the top of the first line to the baseline of the first line,
            provided in device-independent units (1/96th inch per unit).
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.FlowDirection">
            <summary>
            Gets or sets the System.Windows.FlowDirection of a <see cref="T:SharpVectors.Renderers.Texts.WpfTextBuilder"/> object.
            </summary>
            <value>
            The System.Windows.FlowDirection of the formatted text.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.TextAlignment">
            <summary>
            Gets or sets the alignment of text within a <see cref="T:SharpVectors.Renderers.Texts.WpfTextBuilder"/> object.
            </summary>
            <value>
            One of the System.Windows.TextAlignment values that specifies the alignment of
            text within a <see cref="T:SharpVectors.Renderers.Texts.WpfTextBuilder"/> object.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.Trimming">
            <summary>
            Gets or sets the means by which the omission of text is indicated.
            </summary>
            <value>
            One of the System.Windows.TextTrimming values that specifies how the omission
            of text is indicated. The default is System.Windows.TextTrimming.WordEllipsis.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Texts.WpfTextBuilder.TextDecorations">
            <summary>
            Sets the System.Windows.TextDecorationCollection for the entire set of characters
            in the <see cref="T:SharpVectors.Renderers.Texts.WpfTextBuilder"/> object.
            </summary>
            <value name="textDecorations">The System.Windows.TextDecorationCollection to apply to the text.</value>
        </member>
        <member name="M:SharpVectors.Renderers.Texts.WpfTextRenderer.ExtractTextPathGeometry(System.Windows.Media.Geometry)">
            <summary>
            This will extract a <see cref="T:System.Windows.Media.PathGeometry"/> that is nested into GeometryGroup, which
            is normally created by the FormattedText.BuildGeometry() method.
            </summary>
            <param name="sourceGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:SharpVectors.Renderers.Utils.WpfConvert.ToColor(SharpVectors.Dom.Css.ICssColor)">
            <summary>
            A WPF <see cref="T:System.Windows.Media.Color"/> representation of the <c>RgbColor</c>.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.Utils.WpfConvert.ToRect(SharpVectors.Dom.Svg.SvgRectF)">
            <summary>
            This converts the specified <see cref="T:System.Windows.Rect"/> structure to a 
            <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure.
            </summary>
            <param name="rect">The <see cref="T:System.Windows.Rect"/> structure to convert.</param>
            <returns>
            The <see cref="T:SharpVectors.Dom.Svg.SvgRectF"/> structure that is converted from the 
            specified <see cref="T:System.Windows.Rect"/> structure.
            </returns>
        </member>
        <member name="T:SharpVectors.Renderers.WpfSettings`1">
            <summary>
            This is the typed or generic <see langword="abstract"/> base class for 
            most objects in this build library, and it defines the basic cloneable 
            and serialization interfaces. This is used as the base object to create 
            components object hierarchy.
            </summary>
            <typeparam name="T">
            The underlying value type of the <see cref="T:SharpVectors.Renderers.WpfSettings`1"/> generic type. 
            </typeparam>
            <remarks>
            This also provides a base class for component object hierarchy whose state
            can be serialized to an <c>XML</c> format. 
            </remarks>
        </member>
        <member name="M:SharpVectors.Renderers.WpfSettings`1.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:SharpVectors.Renderers.WpfSettings`1"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Renderers.WpfSettings`1"/> class
            to the default properties or values.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.WpfSettings`1.#ctor(SharpVectors.Renderers.WpfSettings{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Renderers.WpfSettings`1"/> class
            with initial parameters copied from the specified instance of the 
            specified <see cref="T:SharpVectors.Renderers.WpfSettings`1"/> class, a copy constructor.
            </summary>
            <param name="source">
            An instance of the <see cref="T:SharpVectors.Renderers.WpfSettings`1"/> class from which the
            initialization parameters or values will be copied.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the parameter <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpVectors.Renderers.WpfSettings`1.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This property is reserved, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class instead.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the <c>XML</c> representation of 
            the object that is produced by the <see cref="M:SharpVectors.Renderers.WpfSettings`1.WriteXml(System.Xml.XmlWriter)"/> method and 
            consumed by the <see cref="M:SharpVectors.Renderers.WpfSettings`1.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:SharpVectors.Renderers.WpfSettings`1.ReadXml(System.Xml.XmlReader)">
            <summary>
            This reads and sets its state or attributes stored in a <c>XML</c> format
            with the given reader. 
            </summary>
            <param name="reader">
            The reader with which the <c>XML</c> attributes of this object are accessed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpVectors.Renderers.WpfSettings`1.WriteXml(System.Xml.XmlWriter)">
            <summary>
            This writes the current state or attributes of this object,
            in the <c>XML</c> format, to the media or storage accessible by the given writer.
            </summary>
            <param name="writer">
            The <c>XML</c> writer with which the <c>XML</c> format of this object's state 
            is written.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpVectors.Renderers.WpfSettings`1.Clone">
            <overloads>
            This creates a new build object that is a deep copy of the current 
            instance.
            </overloads>
            <summary>
            This creates a new build object that is a deep copy of the current 
            instance.
            </summary>
            <returns>
            A new build object that is a deep copy of this instance.
            </returns>
            <remarks>
            This is deep cloning of the members of this build object. If you 
            need just a copy, use the copy constructor to create a new instance.
            </remarks>
        </member>
        <member name="M:SharpVectors.Renderers.WpfSettings`1.System#ICloneable#Clone">
            <summary>
            This creates a new build object that is a deep copy of the current 
            instance.
            </summary>
            <returns>
            A new build object that is a deep copy of this instance.
            </returns>
            <remarks>
            This is deep cloning of the members of this style object. If you need just a copy,
            use the copy constructor to create a new instance.
            </remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingContext.Count">
            <summary>
            Gets the number of elements contained in the drawing stack.
            </summary>
            <value>
            The number of elements contained in the drawing stack.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingContext.PixelsPerInchX">
            <summary>Gets the DPI along X axis.</summary>
            <value>The DPI along the X axis.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingContext.PixelsPerInchY">
            <summary>Gets the DPI along Y axis.</summary>
            <value>The DPI along the Y axis.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingContext.DpiScaleX">
            <summary>Gets the DPI scale on the X axis.</summary>
            <value>The DPI scale for the X axis.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingContext.DpiScaleY">
            <summary>Gets the DPI scale on the Yaxis.</summary>
            <value>The DPI scale for the Y axis.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingContext.PixelsPerDip">
            <summary>Get or sets the PixelsPerDip at which the text should be rendered.</summary>
            <value>The current PixelsPerDip value.</value>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingContext.Clear">
            <summary>
            Removes all objects from the drawing stack.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingContext.Contains(System.Windows.Media.DrawingGroup)">
            <summary>
            Determines whether an element is in the drawing stack.
            </summary>
            <param name="item">The object to locate in the drawing stack. The value can be null for reference types.</param>
            <returns>true if item is found in the drawing stack; otherwise, false.</returns>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingContext.CopyTo(System.Windows.Media.DrawingGroup[],System.Int32)">
            <summary>
            Copies the drawing stack to an existing one-dimensional array, starting at the specified array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the elements
            copied from drawing stack. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="arrayIndex"/> is equal to or greater than the length of array.
            <para>-or-</para>
            The number of elements in the source drawing stack is greater than the available 
            space from <paramref name="arrayIndex"/> to the end of the destination array.
            </exception>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingContext.Peek">
            <summary>
            Returns the object at the top of the drawing stack without removing it.
            </summary>
            <returns>The object at the top of the drawing stack.</returns>
            <exception cref="T:System.InvalidOperationException">The drawing stack is empty.</exception>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingContext.Pop">
            <summary>
            Removes and returns the object at the top of the drawing stack.
            </summary>
            <returns>The object removed from the top of the drawing stack.</returns>
            <exception cref="T:System.InvalidOperationException">The drawing stack is empty.</exception>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingContext.Push(System.Windows.Media.DrawingGroup)">
            <summary>
            Inserts an object at the top of the drawing stack.
            </summary>
            <param name="item">The object to push onto the drawing stack. The value can be null for reference types.</param>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingContext.ToArray">
            <summary>
            Copies the drawing stack to a new array.
            </summary>
            <returns>A new array containing copies of the elements of the drawing stack.</returns>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingContext.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the drawing stack,
            if that number is less than 90 percent of current capacity.
            </summary>
        </member>
        <member name="T:SharpVectors.Renderers.Wpf.WpfDrawingRenderer">
            <summary>
            
            </summary>
            <remarks>
            Rename: WpfRendererSession
            </remarks>
        </member>
        <member name="F:SharpVectors.Renderers.Wpf.WpfDrawingRenderer._svgWindow">
            <summary>
            The renderer's <see cref="T:SharpVectors.Dom.Svg.SvgWindow">SvgWindow</see> object.
            </summary>
        </member>
        <member name="T:SharpVectors.Renderers.Wpf.WpfDrawingSettings">
            <summary>
            This provides the settings or options for the drawing/rendering engine of the WPF.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.Wpf.WpfDrawingSettings.XmlTagName">
            <summary>
            The name of the <c>XML</c> tag name, under which this object is stored.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.Wpf.WpfDrawingSettings.XmlVersion">
            <summary>
            The version of the file format, under which this object is stored.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.Wpf.WpfDrawingSettings.PropertyNonePen">
            <summary>
            A well-known property name, specifies the <see cref="T:System.Windows.Media.Pen"/> object to be used for an <c>SVG</c> element, 
            which is defined with display styling <c>none</c>, but no stroke styling options.
            <para>
            The default value is <see langword="null"/>.
            </para>
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.Wpf.WpfDrawingSettings.PropertyNoneBrush">
            <summary>
            A well-known property name, specifies the <see cref="T:System.Windows.Media.Brush"/> object to be used for an <c>SVG</c> element, 
            which is defined with display styling <c>none</c>, but no fill styling options. 
            <para>
            The default value is <see langword="null"/>.
            </para>
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.Wpf.WpfDrawingSettings.PropertyIsResources">
            <summary>
            A well-known property name, a Boolean value specifying the target output of the rendering is 
            resource dictionary <c>XAML</c>.
            <para>
            If set to <see langword="true"/>, operations required to enhance the output of <see cref="T:System.Windows.ResourceDictionary"/>
            <c>XAML</c> are enabled.
            </para>
            The default value is <see langword="false"/>.
            </summary>
            <seealso cref="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.DrawingResources"/>.
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingSettings.#ctor">
            <overloads>
            Initializes a new instance of the <see cref="T:SharpVectors.Renderers.Wpf.WpfDrawingSettings"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Renderers.Wpf.WpfDrawingSettings"/> class
            with the default parameters and settings.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingSettings.#ctor(SharpVectors.Renderers.Wpf.WpfDrawingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:SharpVectors.Renderers.Wpf.WpfDrawingSettings"/> class
            with the specified initial drawing or rendering settings, a copy constructor.
            </summary>
            <param name="settings">
            This specifies the initial options for the rendering or drawing engine.
            </param>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.Item(System.String)">
            <summary>
            Gets or sets a well-known property value.
            </summary>
            <param name="name">
            The well-known name of the property. It can be <c>SharpVectors</c> or user-defined. Only the <c>SharpVectors</c>
            defined properties are supported by default. A <see langword="null"/> or empty <see cref="T:System.String"/> names are ignored.
            </param>
            <value>
            The value of the well-known or user-defined property. Setting the value of an existing property 
            to <see langword="null"/> will remove the property.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.PixelWidth">
            <summary>
            Gets or sets the pixel width of the rendered drawing.
            </summary>
            <value>The width of the rendered drawing in pixels. The default is <c>-1</c>, not set.</value>
            <remarks>
            This, together with a valid <see cref="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.PixelHeight"/> value, may defined a bounding box around the rendered drawing
            to constrain its bounds. Only effective where static images are required.
            </remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.PixelHeight">
            <summary>
            Gets or sets the pixel height of the rendered drawing.
            </summary>
            <value>The height of the rendered drawing in pixels. The default is <c>-1</c>, not set.</value>
            <remarks>
            This, together with a valid <see cref="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.PixelWidth"/> value, may defined a bounding box around the rendered drawing
            to constrain its bounds. Only effective where static images are required.
            </remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.HasPixelSize">
            <summary>
            Gets a value indicating the dimension or size of the target drawing is specified.
            </summary>
            <value>
            This is <see langword="true"/> if the values of both <see cref="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.PixelWidth"/> and <see cref="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.PixelHeight"/> are
            positive; otherwise, it is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.UserCssFilePath">
            <summary>
            Gets or sets a stylesheet to override the styles in <c>SVG</c> documents using a custom user stylesheet, 
            similar to that in browsers.
            </summary>
            <value>A string containing the path to the user stylesheet file. The default is <see langword="null"/>.</value>
            <remarks>
            In most browsers, the user (or reader) of the web site can choose to override styles using a custom 
            user stylesheet designed to tailor the experience to the user's wishes. Depending on the user agent, 
            user styles can be configured directly or added via browser extensions.
            </remarks>
            <seealso cref="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.UserAgentCssFilePath"/>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.UserAgentCssFilePath">
            <summary>
            Gets or sets the basic style sheet that give default styles to any <c>SVG</c> document, similar to
            the user-agent or browsers styles.
            </summary>
            <value>A string containing the path to the user-agent stylesheet file. The default is <see langword="null"/>.</value>
            <remarks>
            These style sheets are named user-agent stylesheets in browsers. Most browsers use actual stylesheets 
            for this purpose, while others simulate them in code. The end result is the same.
            <para>
            Some browsers let users modify the user-agent stylesheet, but this is rare and is the approach used
            by the <c>SharpVectors</c>.
            </para>
            </remarks>
            <seealso cref="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.UserCssFilePath"/>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.CssVariables">
            <summary>
            Gets or sets user-defined CSS custom properties for the rendering.
            </summary>
            <value>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of user-defined styles. This value is
            never <see langword="null"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.IgnoreRootViewbox">
            <summary>
            Gets or sets a value to indicate whether to turn off viewbox at the root of the drawing.
            </summary>
            <value>
            For image outputs, this will force the original size to be saved.
            <para>
            The default value is <see langword="false"/>.
            </para>
            </value>
            <remarks>
            There are reported cases where are diagrams displayed in Inkscape program, but will not
            show when converted. These are diagrams on the drawing canvas of Inkspace but outside 
            the svg viewbox. 
            <para>
            When converted the drawings are also converted but not displayed due to
            clipping. Setting this property to <see langword="true"/> will clear the clipping region
            on conversion.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.EnsureViewboxSize">
            <summary>
            Gets or sets a value to indicate preserving the original viewbox size when saving images.
            </summary>
            <value>
            For image outputs, this will force the original size to be saved.
            <para>
            The default value is <see langword="false"/>. However, the ImageSvgConverter converted
            sets this to <see langword="true"/> by default.
            </para>
            </value>
            <remarks>
            Setting this to <see langword="true"/> will cause the rendering process to draw a transparent
            box around the output, if a viewbox is defined. This will ensure that the original image
            size is saved.
            </remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.EnsureViewboxPosition">
            <summary>
            Gets or sets a value to indicate applying a translate transform to the viewbox to ensure
            it is visible when rendered.
            </summary>
            <value>
            This determines whether a transformation is applied to the rendered drawing. For drawings
            where the top-left position of the viewbox is off the screen, due to negative values, this
            will ensure the drawing is visible.
            <para>
            The default value is <see langword="true"/>. Set this value to <see langword="false"/> if
            you wish to apply your own transformations to the drawings.
            </para>
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.OptimizePath">
            <summary>
            Gets or sets a value indicating whether the path geometry is optimized using the <see cref="T:System.Windows.Media.StreamGeometry"/>.
            </summary>
            <value>
            This is <see langword="true"/> if the path geometry is optimized using the <see cref="T:System.Windows.Media.StreamGeometry"/>; 
            otherwise, it is <see langword="false"/>. The default is <see langword="true"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.TextAsGeometry">
            <summary>
            Gets or sets a value indicating whether the texts are rendered as path geometry.
            </summary>
            <value>
            This is <see langword="true"/> if texts are rendered as path geometries; otherwise, this is 
            <see langword="false"/>. The default is <see langword="false"/>.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.IncludeRuntime">
            <summary>
            Gets or sets a value indicating whether the <c>SharpVectors.Runtime.dll</c>
            classes are used in the generated output.
            </summary>
            <value>
            This is <see langword="true"/> if the <c>SharpVectors.Runtime.dll</c> classes and types are used in the 
            generated output; otherwise, it is <see langword="false"/>. The default is <see langword="true"/>.
            </value>
            <remarks>
            The use of the <c>SharpVectors.Runtime.dll</c> prevents the hard-coded font path generated by the 
            <see cref="T:System.Windows.Media.FormattedText"/> class, support for embedded images etc.
            </remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.CultureInfo">
            <summary>
            Gets or sets the main culture information used for rendering texts.
            </summary>
            <value>
            An instance of the <see cref="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.CultureInfo"/> specifying the main
            culture information for texts. The default is the English culture.
            </value>
            <remarks>
            <para>
            This is the culture information passed to the <see cref="T:System.Windows.Media.FormattedText"/>
            class instance for the text rendering.
            </para>
            <para>
            The library does not currently provide any means of splitting texts
            into its multi-language parts.
            </para>
            </remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.NeutralCultureInfo">
            <summary>
            Gets the neutral language for text rendering.
            </summary>
            <value>
            An instance of the <see cref="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.CultureInfo"/> specifying the neutral
            culture information for texts. The default is the English culture.
            </value>
            <remarks>
            For vertical text rendering, there is a basic text splitting into
            Western and other languages. This culture information is used to
            render the Western language part, and the mains culture information
            for the other languages.
            </remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.DefaultFontName">
            <summary>
            Gets or sets the default font family name, which is used when a text
            node does not specify a font family name.
            </summary>
            <value>
            A string containing the default font family name. The default is the <c>Arial</c> font, 
            for its support of Unicode texts. This value cannot be <see langword="null"/> or empty.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.Visitors">
            <summary>
            Gets the list of custom rendering visitor implementation objects to be used by the <c>SharpVectors</c>.
            </summary>
            <value>An object <see cref="T:SharpVectors.Renderers.Wpf.WpfVisitors"/> specifying the list of the visitor objects.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.DefaultFontFamily">
            <summary>
            Gets or sets the globally available default font family.
            </summary>
            <value>
            An instance of the <see cref="T:System.Windows.Media.FontFamily"/> specifying the globally available font family. 
            The default is <c>Arial</c> font family (since <c>Arial Unicode MS</c> is no longer shipped by MS).
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.GenericSerif">
            <summary>
            Gets or set the globally available generic serif font family.
            </summary>
            <value>
            An instance of <see cref="T:System.Windows.Media.FontFamily"/> specifying the generic serif
            font family. The default is <c>Times New Roman</c> font family.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.GenericSansSerif">
            <summary>
            Gets or set the globally available generic sans serif font family.
            </summary>
            <value>
            An instance of <see cref="T:System.Windows.Media.FontFamily"/> specifying the generic sans 
            serif font family. The default is <c>Tahoma</c> font family.
            </value>
            <remarks>
            The possible font names are <c>Tahoma</c>, <c>Arial</c>, 
            <c>Verdana</c>, <c>Trebuchet</c>, <c>MS Sans Serif</c> and <c>Helvetica</c>.
            </remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.GenericMonospace">
            <summary>
            Gets or set the globally available generic Monospace font family.
            </summary>
            <value>
            An instance of <see cref="T:System.Windows.Media.FontFamily"/> specifying the generic 
            Monospace font family. The default is <c>MS Gothic</c> font family.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.GenericCursive">
            <summary>
            Gets or set the globally available generic cursive font family.
            </summary>
            <value>
            An instance of <see cref="T:System.Windows.Media.FontFamily"/> specifying the generic 
            cursive font family. The default is <c>Comic Sans MS</c> font family.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.GenericFantasy">
            <summary>
            Gets or set the globally available generic fantasy font family.
            </summary>
            <value>
            An instance of <see cref="T:System.Windows.Media.FontFamily"/> specifying the generic 
            fantasy font family. The default is <c>Impact</c> font family.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.ExternalResourcesAccessMode">
            <summary>
            Gets or sets a value indicating how to handled external resources.
            </summary>
            <value>
            An enumeration of the type <see cref="T:SharpVectors.Dom.ExternalResourcesAccessModes"/> specifying the access mode. 
            The default is <see cref="F:SharpVectors.Dom.ExternalResourcesAccessModes.Allow"/>.
            </value>
            <seealso cref="P:SharpVectors.Dom.Document.ExternalResourcesAccessMode"/>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.CanUseBitmap">
            <summary>
            Gets or sets a value indicating if image elements will render bitmaps.
            </summary>
            <value>
            A value specifying how bitmaps are rendered. If <see langword="true"/> elements will render bitmaps; 
            otherwise, it is <see langword="false"/> elements will not render bitmaps. The default is <see langword="true"/>.
            </value>
            <seealso cref="P:SharpVectors.Dom.Document.CanUseBitmap"/>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.FontLocations">
            <summary>
            Gets the list of the custom font locations or paths.
            </summary>
            <value>An iterator to the custom font locations or paths.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.FontFamilyNames">
            <summary>
            A dictionary specifying a map of the font family names to their locations.
            </summary>
            <value>A dictionary of the font family names to their locations.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.HasFontFamilies">
            <summary>
            Gets a value specifying whether user-defined font families are associated with the target rendering.
            </summary>
            <value>This is <see langword="true"/> if user-defined font families exists; otherwise, it is <see langword="false"/>. </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.FontFamilies">
            <summary>
            Gets the list of a custom font family objects.
            </summary>
            <value>An iterator to the custom font families.</value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.InteractiveMode">
            <summary>
            Gets or sets a value specifying the interactive mode of the target rendering.
            </summary>
            <value>
            An enumeration of the type <see cref="T:SharpVectors.Runtime.SvgInteractiveModes"/> specifying the interactive mode.
            The default is <see cref="F:SharpVectors.Runtime.SvgInteractiveModes.None"/>, no interactivity.
            </value>
            <remarks>
            The interactive mode determine whether extra attributes are added to the individual rendered elements
            to make it easy to select or identity at runtime.
            </remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.DpiScale">
            <summary>
            Gets or sets an object that stores <c>DPI</c> information from which an <c>SVG</c> element is rendered.
            </summary>
            <value>
            An object <see cref="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.DpiScale"/> specifying the <c>DPI</c> information for rendering. Setting 
            a <see langword="null"/> value is ignored.
            </value>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfDrawingSettings.DrawingResources">
            <summary>
            Gets or sets an object used to collect extra information used to enhance the output of
            <see cref="T:System.Windows.ResourceDictionary"/> XAML.
            </summary>
            <value>
            An object <see cref="T:SharpVectors.Renderers.Wpf.WpfDrawingResources"/> specifying the store of the extra information used by 
            resource dictionary output <c>XAML</c>. The default is <see langword="null"/>.
            </value>
            <remarks>
            This is only used if the user-defined property specified by <see cref="F:SharpVectors.Renderers.Wpf.WpfDrawingSettings.PropertyIsResources"/> is set
            to <see langword="true"/>; otherwise, the extra information used by the resource dictionary output are
            not generation. 
            <para>
            If the value of <see cref="F:SharpVectors.Renderers.Wpf.WpfDrawingSettings.PropertyIsResources"/> is set to <see langword="true"/>, an instance of the
            <see cref="T:SharpVectors.Renderers.Wpf.WpfDrawingResources"/> is created a associated with this drawing options, if not provided.
            </para>
            </remarks>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingSettings.AddFontFamilyName(System.String,System.String)">
            <summary>
            This adds a mapped font family name. A mapped name can be a localized name of a font family or
            an alternative font family name.
            </summary>
            <param name="mappedName">The mapped or alternative font family name.</param>
            <param name="fontName">The target font family name.</param>
            <remarks>
            <para>
            The font family name mapping applies to both system and private fonts.
            </para>
            Both the <paramref name="mappedName"/> and the <paramref name="fontName"/> values must not be
            <see langword="null"/> or empty <see cref="T:System.String"/>.
            </remarks>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingSettings.AddFontLocation(System.String)">
            <summary>
            This adds the specified local font location (file or directory) to enable the use of private fonts.
            </summary>
            <param name="fontLocation">A string containing the path to a font file.</param>
            <remarks>
            <para>
            The <paramref name="fontLocation"/> value cannot be a file path or a directory. If a directory is specified,
            all the files with the standard font file extensions in the directory will be loaded.
            </para>
            The <paramref name="fontLocation"/> must not be <see langword="null"/> or empty <see cref="T:System.String"/> and
            the specified location must exists.
            </remarks>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingSettings.LookupFontFamily(System.String,System.Windows.FontWeight,System.Windows.FontStyle,System.Windows.FontStretch)">
            <summary>
            This looks for or matches the specified font family name and attributes.
            </summary>
            <param name="fontName">The font family name to search in the list of defined fonts.</param>
            <returns>
            It returns an <see cref="T:System.Windows.Media.FontFamily"/> defining the font family object matched; otherwise, it
            returns <see langword="null"/>.
            </returns>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingSettings.ReadXml(System.Xml.XmlReader)">
            <summary>
            This reads and sets its state or attributes stored in a <c>XML</c> format with the given reader. 
            </summary>
            <param name="reader">
            The reader with which the <c>XML</c> attributes of this object are accessed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingSettings.WriteXml(System.Xml.XmlWriter)">
            <summary>
            This writes the current state or attributes of this object,
            in the <c>XML</c> format, to the media or storage accessible by the given writer.
            </summary>
            <param name="writer">
            The <c>XML</c> writer with which the <c>XML</c> format of this object's state is written.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfDrawingSettings.Clone">
            <overloads>
            This creates a new settings object that is a deep copy of the current instance.
            </overloads>
            <summary>
            This creates a new settings object that is a deep copy of the current instance.
            </summary>
            <returns>
            A new settings object that is a deep copy of this instance.
            </returns>
            <remarks>
            This is deep cloning of the members of this settings object. If you 
            need just a copy, use the copy constructor to create a new instance.
            </remarks>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfHitTestResult.Point">
            <summary>
            The point value to hit test against.
            </summary>
        </member>
        <member name="P:SharpVectors.Renderers.Wpf.WpfHitTestResult.Element">
            <summary>
            Gets the SVG object that was hit.
            </summary>
        </member>
        <member name="T:SharpVectors.Renderers.Wpf.WpfHitTextLevel">
            <summary>
            Hit-test options for text elements.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.Wpf.WpfHitTextLevel.Bounds">
            <summary>
            Test only the bounds of the rendered text.
            </summary>
        </member>
        <member name="F:SharpVectors.Renderers.Wpf.WpfHitTextLevel.Glyphs">
            <summary>
            Test the bounds and glyph geometris in the rendered text.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfRendering.CreateByUri(SharpVectors.Dom.Svg.SvgDocument,System.String,System.String)">
            <summary>
            Generates a new <see cref="T:SharpVectors.Renderers.Wpf.WpfRendering">WpfRendering</see> that
            corresponds to the given Uri.
            </summary>
            <param name="baseUri">
            The base Uri.
            </param>
            <param name="url">
            The url.
            </param>
            <returns>
            The generated <see cref="T:SharpVectors.Renderers.Wpf.WpfRendering">WpfRendering</see> that
            corresponds to the given Uri.
            </returns>
        </member>
        <member name="T:SharpVectors.Renderers.Wpf.WpfRenderingBase">
            <summary>      
            Defines the interface required for a rendering node to interact with the renderer and the SVG DOM
            </summary>
            <remarks>
            Rename: WpfElementRenderer, WpfRenderingObject
            </remarks>
        </member>
        <member name="T:SharpVectors.Renderers.Wpf.WpfRenderingHelper">
            <summary>
            
            </summary>
            <remarks>
            Rename: WpfDocumentRenderer
            </remarks>
        </member>
        <member name="F:SharpVectors.Renderers.Wpf.WpfResourceSettings.XmlTagName">
            <summary>
            Gets the name of the <c>XML</c> tag name, under which this object is stored.
            </summary>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfResourceSettings.ReadXml(System.Xml.XmlReader)">
            <summary>
            This reads and sets its state or attributes stored in a <c>XML</c> format
            with the given reader. 
            </summary>
            <param name="reader">
            The reader with which the <c>XML</c> attributes of this object are accessed.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SharpVectors.Renderers.Wpf.WpfResourceSettings.WriteXml(System.Xml.XmlWriter)">
            <summary>
            This writes the current state or attributes of this object,
            in the <c>XML</c> format, to the media or storage accessible by the given writer.
            </summary>
            <param name="writer">
            The <c>XML</c> writer with which the <c>XML</c> format of this object's state 
            is written.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="reader"/> is <see langword="null"/>.
            </exception>
        </member>
    </members>
</doc>
